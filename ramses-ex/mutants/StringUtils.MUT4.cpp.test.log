b'UpdateCTestConfiguration  from :/home/ssd/locphan/llvm-project/clang/tools/lemon/temp/ramses/build/DartConfiguration.tcl\nUpdateCTestConfiguration  from :/home/ssd/locphan/llvm-project/clang/tools/lemon/temp/ramses/build/DartConfiguration.tcl\nTest project /home/ssd/locphan/llvm-project/clang/tools/lemon/temp/ramses/build\nConstructing a list of tests\nDone constructing a list of tests\nUpdating test list for fixtures\nAdded 0 tests to meet fixture requirements\nChecking test dependency graph...\nChecking test dependency graph end\ntest 1\n    Start  1: ramses-capu-test_UNITTEST\n\n1: Test command: /home/ssd/locphan/llvm-project/clang/tools/lemon/temp/ramses/build/bin/ramses-capu-test "--gtest_output=xml:TestResult_ramses-capu-test.xml"\n1: Test timeout computed to be: 9.99988e+06\n1: Running main() from gmock_main.cc\n1: \x1b[0;32m[==========] \x1b[mRunning 106 tests from 12 test cases.\n1: \x1b[0;32m[----------] \x1b[mGlobal test environment set-up.\n1: \x1b[0;32m[----------] \x1b[m1 test from CapuDefaultHashFunctionTest\n1: \x1b[0;32m[ RUN      ] \x1b[mCapuDefaultHashFunctionTest.useTraitsToFindCorrectHashFunction\n1: \x1b[0;32m[       OK ] \x1b[mCapuDefaultHashFunctionTest.useTraitsToFindCorrectHashFunction (0 ms)\n1: \x1b[0;32m[----------] \x1b[m1 test from CapuDefaultHashFunctionTest (0 ms total)\n1: \n1: \x1b[0;32m[----------] \x1b[m18 tests from HashSet\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.Constructor_Default\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.Constructor_Default (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.copyConstructor\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.copyConstructor (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.put\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.put (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.count\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.count (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.clear\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.clear (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.remove\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.remove (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.hasElement\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.hasElement (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.findsContainedElement\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.findsContainedElement (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.doesNotFindElementNotContained\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.doesNotFindElementNotContained (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.returnedIteratorPointsToNextElementAfterDeletion\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.returnedIteratorPointsToNextElementAfterDeletion (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.canRemoveElementsDuringCycle\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.canRemoveElementsDuringCycle (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.HashSetWithComplexType\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.HashSetWithComplexType (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.swapMemberFunction\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.swapMemberFunction (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.swapGlobal\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.swapGlobal (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.TestMoveConstructor\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.TestMoveConstructor (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.TestAssign\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.TestAssign (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.TestMoveAssign\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.TestMoveAssign (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSet.TestReserve\n1: \x1b[0;32m[       OK ] \x1b[mHashSet.TestReserve (0 ms)\n1: \x1b[0;32m[----------] \x1b[m18 tests from HashSet (0 ms total)\n1: \n1: \x1b[0;32m[----------] \x1b[m3 tests from HashSetIterator\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSetIterator.hasNext\n1: \x1b[0;32m[       OK ] \x1b[mHashSetIterator.hasNext (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSetIterator.next\n1: \x1b[0;32m[       OK ] \x1b[mHashSetIterator.next (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashSetIterator.ForEach\n1: \x1b[0;32m[       OK ] \x1b[mHashSetIterator.ForEach (0 ms)\n1: \x1b[0;32m[----------] \x1b[m3 tests from HashSetIterator (0 ms total)\n1: \n1: \x1b[0;32m[----------] \x1b[m40 tests from HashTableTest\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestWithEnum\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestWithEnum (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestCopyConstructor\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestCopyConstructor (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestMoveConstructor\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestMoveConstructor (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestMoveAssign\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestMoveAssign (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestReserve\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestReserve (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.CanInsertWithoutRehashWhenConstructedWithCapacity\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.CanInsertWithoutRehashWhenConstructedWithCapacity (5 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.CanInsertWithoutRehashWhenReservedToCapacity\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.CanInsertWithoutRehashWhenReservedToCapacity (4 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.AssignmentOperator\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.AssignmentOperator (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestMapRehashWithObjects\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestMapRehashWithObjects (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestClear\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestClear (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestClear2\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestClear2 (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestContains\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestContains (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.IteratorRemove\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.IteratorRemove (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.find\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.find (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.operator_subscript_read\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.operator_subscript_read (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.operator_subscript_assign\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.operator_subscript_assign (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestAddGet2\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestAddGet2 (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestAddGet\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestAddGet (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestRemove1\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestRemove1 (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestRemove\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestRemove (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestIterator1\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestIterator1 (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestIterator2\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestIterator2 (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestConstIterator1\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestConstIterator1 (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestConstIterator2\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestConstIterator2 (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.IteratorPrimitiveKeyComplexValue\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.IteratorPrimitiveKeyComplexValue (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.IteratorPrimitiveKeyComplexPtrValue\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.IteratorPrimitiveKeyComplexPtrValue (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.IteratorMethodCall\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.IteratorMethodCall (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestRehasing\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestRehasing (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.TestWildRemoving\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.TestWildRemoving (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.ForEach\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.ForEach (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.HashTableWithComplexKey\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.HashTableWithComplexKey (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.swapMemberFunction\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.swapMemberFunction (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.swapGlobal\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.swapGlobal (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.basicRefCountLifecycle\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.basicRefCountLifecycle (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.clearDestructsAllElements\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.clearDestructsAllElements (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.copyCtorCopyConstructsObjects\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.copyCtorCopyConstructsObjects (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.assignmentCopiesObjects\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.assignmentCopiesObjects (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.arrayAccessOperatorConstructsNewElementIfNotExisting\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.arrayAccessOperatorConstructsNewElementIfNotExisting (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.arrayAccessOperatorReusesElementIfExisting\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.arrayAccessOperatorReusesElementIfExisting (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTableTest.swapKeepsNumberOfObjectsUnchanged\n1: \x1b[0;32m[       OK ] \x1b[mHashTableTest.swapKeepsNumberOfObjectsUnchanged (0 ms)\n1: \x1b[0;32m[----------] \x1b[m40 tests from HashTableTest (9 ms total)\n1: \n1: \x1b[0;32m[----------] \x1b[m10 tests from HashTest\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTest.HashInt32\n1: \x1b[0;32m[       OK ] \x1b[mHashTest.HashInt32 (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTest.HashInt64\n1: \x1b[0;32m[       OK ] \x1b[mHashTest.HashInt64 (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTest.HashPointer\n1: \x1b[0;32m[       OK ] \x1b[mHashTest.HashPointer (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTest.HashEnum\n1: \x1b[0;32m[       OK ] \x1b[mHashTest.HashEnum (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTest.HashArrayUsesAllElementsForPrimitiveType\n1: \x1b[0;32m[       OK ] \x1b[mHashTest.HashArrayUsesAllElementsForPrimitiveType (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTest.HashArrayUsesAllElementsForComplexType\n1: \x1b[0;32m[       OK ] \x1b[mHashTest.HashArrayUsesAllElementsForComplexType (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTest.HashingArrayOfPrimitivesIsSameAsCombiningArrayValues\n1: \x1b[0;32m[       OK ] \x1b[mHashTest.HashingArrayOfPrimitivesIsSameAsCombiningArrayValues (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTest.HashingArrayOfComplexTypesIsSameAsCombiningArrayValues\n1: \x1b[0;32m[       OK ] \x1b[mHashTest.HashingArrayOfComplexTypesIsSameAsCombiningArrayValues (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTest.HashMemoryRangeRespectLength\n1: \x1b[0;32m[       OK ] \x1b[mHashTest.HashMemoryRangeRespectLength (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashTest.HashMemoryRangeWorksForEmptyRange\n1: \x1b[0;32m[       OK ] \x1b[mHashTest.HashMemoryRangeWorksForEmptyRange (0 ms)\n1: \x1b[0;32m[----------] \x1b[m10 tests from HashTest (0 ms total)\n1: \n1: \x1b[0;32m[----------] \x1b[m4 tests from HashResizerTest\n1: \x1b[0;32m[ RUN      ] \x1b[mHashResizerTest.resizeToOneBit\n1: \x1b[0;32m[       OK ] \x1b[mHashResizerTest.resizeToOneBit (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashResizerTest.resizeTo4Bits\n1: \x1b[0;32m[       OK ] \x1b[mHashResizerTest.resizeTo4Bits (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashResizerTest.resizeToMoreBitsThanPossible\n1: \x1b[0;32m[       OK ] \x1b[mHashResizerTest.resizeToMoreBitsThanPossible (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashResizerTest.resizeToExactMatchingBits\n1: \x1b[0;32m[       OK ] \x1b[mHashResizerTest.resizeToExactMatchingBits (0 ms)\n1: \x1b[0;32m[----------] \x1b[m4 tests from HashResizerTest (0 ms total)\n1: \n1: \x1b[0;32m[----------] \x1b[m2 tests from HashCombine\n1: \x1b[0;32m[ RUN      ] \x1b[mHashCombine.usesSeedAndValue\n1: \x1b[0;32m[       OK ] \x1b[mHashCombine.usesSeedAndValue (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mHashCombine.usesExtraArguments\n1: \x1b[0;32m[       OK ] \x1b[mHashCombine.usesExtraArguments (0 ms)\n1: \x1b[0;32m[----------] \x1b[m2 tests from HashCombine (0 ms total)\n1: \n1: \x1b[0;32m[----------] \x1b[m1 test from HashValue\n1: \x1b[0;32m[ RUN      ] \x1b[mHashValue.givesSameResultAsHashCombine\n1: \x1b[0;32m[       OK ] \x1b[mHashValue.givesSameResultAsHashCombine (0 ms)\n1: \x1b[0;32m[----------] \x1b[m1 test from HashValue (0 ms total)\n1: \n1: \x1b[0;32m[----------] \x1b[m19 tests from File\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.ConstructorTest\n1: \x1b[0;32m[       OK ] \x1b[mFile.ConstructorTest (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.CantOpenNonExistingFile\n1: \x1b[0;32m[       OK ] \x1b[mFile.CantOpenNonExistingFile (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.ReadableFileCanBeOpened\n1: \x1b[0;32m[       OK ] \x1b[mFile.ReadableFileCanBeOpened (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.WriteTest\n1: \x1b[0;32m[       OK ] \x1b[mFile.WriteTest (1 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.WriteSubstring\n1: \x1b[0;32m[       OK ] \x1b[mFile.WriteSubstring (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.CantWriteToFileOpenedReadOnly\n1: \x1b[0;32m[       OK ] \x1b[mFile.CantWriteToFileOpenedReadOnly (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.ReadTest\n1: \x1b[0;32m[       OK ] \x1b[mFile.ReadTest (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.ReadWriteBinaryTest\n1: \x1b[0;32m[       OK ] \x1b[mFile.ReadWriteBinaryTest (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.Seek\n1: \x1b[0;32m[       OK ] \x1b[mFile.Seek (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.getCurrentPositionWithinFile\n1: \x1b[0;32m[       OK ] \x1b[mFile.getCurrentPositionWithinFile (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.OpenBinaryFileCanBeOpenedForReadAgain\n1: \x1b[0;32m[       OK ] \x1b[mFile.OpenBinaryFileCanBeOpenedForReadAgain (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.TestCreateAndDelete\n1: \x1b[0;32m[       OK ] \x1b[mFile.TestCreateAndDelete (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.TestExists\n1: \x1b[0;32m[       OK ] \x1b[mFile.TestExists (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.TestGetFilename\n1: \x1b[0;32m[       OK ] \x1b[mFile.TestGetFilename (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.TestGetExtension\n1: \x1b[0;32m[       OK ] \x1b[mFile.TestGetExtension (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.TestGetPath\n1: \x1b[0;32m[       OK ] \x1b[mFile.TestGetPath (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.TestGetFileSize\n1: \x1b[0;32m[       OK ] \x1b[mFile.TestGetFileSize (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.TestIsDirectory\n1: \x1b[0;32m[       OK ] \x1b[mFile.TestIsDirectory (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mFile.CreateAndRemoveDirectory\n1: \x1b[0;32m[       OK ] \x1b[mFile.CreateAndRemoveDirectory (0 ms)\n1: \x1b[0;32m[----------] \x1b[m19 tests from File (1 ms total)\n1: \n1: \x1b[0;32m[----------] \x1b[m3 tests from Memory\n1: \x1b[0;32m[ RUN      ] \x1b[mMemory.compare\n1: \x1b[0;32m[       OK ] \x1b[mMemory.compare (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mMemory.set\n1: \x1b[0;32m[       OK ] \x1b[mMemory.set (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mMemory.copy\n1: \x1b[0;32m[       OK ] \x1b[mMemory.copy (0 ms)\n1: \x1b[0;32m[----------] \x1b[m3 tests from Memory (0 ms total)\n1: \n1: \x1b[0;32m[----------] \x1b[m2 tests from StringUtils\n1: \x1b[0;32m[ RUN      ] \x1b[mStringUtils.Strncpy\n1: \x1b[0;32m[       OK ] \x1b[mStringUtils.Strncpy (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mStringUtils.Strncpy2\n1: \x1b[0;32m[       OK ] \x1b[mStringUtils.Strncpy2 (0 ms)\n1: \x1b[0;32m[----------] \x1b[m2 tests from StringUtils (0 ms total)\n1: \n1: \x1b[0;32m[----------] \x1b[m3 tests from Traits\n1: \x1b[0;32m[ RUN      ] \x1b[mTraits.TestTypeIdentifier\n1: \x1b[0;32m[       OK ] \x1b[mTraits.TestTypeIdentifier (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mTraits.TestPrimitiveTypes\n1: \x1b[0;32m[       OK ] \x1b[mTraits.TestPrimitiveTypes (0 ms)\n1: \x1b[0;32m[ RUN      ] \x1b[mTraits.TestPointerAndReferences\n1: \x1b[0;32m[       OK ] \x1b[mTraits.TestPointerAndReferences (0 ms)\n1: \x1b[0;32m[----------] \x1b[m3 tests from Traits (0 ms total)\n1: \n1: \x1b[0;32m[----------] \x1b[mGlobal test environment tear-down\n1: \x1b[0;32m[==========] \x1b[m106 tests from 12 test cases ran. (10 ms total)\n1: \x1b[0;32m[  PASSED  ] \x1b[m106 tests.\n1: \n1: \x1b[0;33m  YOU HAVE 3 DISABLED TESTS\n1: \n1: \x1b[m\n1/9 Test  #1: ramses-capu-test_UNITTEST ................................................   Passed    0.02 sec\ntest 6\n    Start  6: ramses-framework-test_UNITTEST\n\n6: Test command: /home/ssd/locphan/llvm-project/clang/tools/lemon/temp/ramses/build/bin/ramses-framework-test "--gtest_output=xml:TestResult_ramses-framework-test.xml"\n6: Test timeout computed to be: 9.99988e+06\n6: Running main() from ramses-framework-test\n6: \x1b[0;32m[==========] \x1b[mRunning 2615 tests from 204 test cases.\n6: \x1b[0;32m[----------] \x1b[mGlobal test environment set-up.\n6: \x1b[0;32m[----------] \x1b[m8 tests from TypedArrayViewTestAndConst/0, where TypeParam = ramses_internal::ArrayView<char>\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/0.creationOfViewAndIterator\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/0.creationOfViewAndIterator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/0.beginAndEnd\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/0.beginAndEnd (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/0.acceptsNullptr\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/0.acceptsNullptr (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/0.acceptsZeroSize\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/0.acceptsZeroSize (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/0.constIteratorAccessOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/0.constIteratorAccessOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/0.iteratorIncreaseDecreaseOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/0.iteratorIncreaseDecreaseOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/0.iteratorArithmeticOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/0.iteratorArithmeticOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/0.iteratorComparingOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/0.iteratorComparingOperatorTest (0 ms)\n6: \x1b[0;32m[----------] \x1b[m8 tests from TypedArrayViewTestAndConst/0 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m8 tests from TypedArrayViewTestAndConst/1, where TypeParam = ramses_internal::ArrayView<char>\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/1.creationOfViewAndIterator\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/1.creationOfViewAndIterator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/1.beginAndEnd\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/1.beginAndEnd (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/1.acceptsNullptr\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/1.acceptsNullptr (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/1.acceptsZeroSize\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/1.acceptsZeroSize (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/1.constIteratorAccessOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/1.constIteratorAccessOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/1.iteratorIncreaseDecreaseOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/1.iteratorIncreaseDecreaseOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/1.iteratorArithmeticOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/1.iteratorArithmeticOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/1.iteratorComparingOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/1.iteratorComparingOperatorTest (0 ms)\n6: \x1b[0;32m[----------] \x1b[m8 tests from TypedArrayViewTestAndConst/1 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m8 tests from TypedArrayViewTestAndConst/2, where TypeParam = ramses_internal::ArrayView<unsigned int>\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/2.creationOfViewAndIterator\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/2.creationOfViewAndIterator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/2.beginAndEnd\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/2.beginAndEnd (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/2.acceptsNullptr\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/2.acceptsNullptr (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/2.acceptsZeroSize\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/2.acceptsZeroSize (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/2.constIteratorAccessOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/2.constIteratorAccessOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/2.iteratorIncreaseDecreaseOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/2.iteratorIncreaseDecreaseOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/2.iteratorArithmeticOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/2.iteratorArithmeticOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/2.iteratorComparingOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/2.iteratorComparingOperatorTest (0 ms)\n6: \x1b[0;32m[----------] \x1b[m8 tests from TypedArrayViewTestAndConst/2 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m8 tests from TypedArrayViewTestAndConst/3, where TypeParam = ramses_internal::ArrayView<unsigned short>\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/3.creationOfViewAndIterator\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/3.creationOfViewAndIterator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/3.beginAndEnd\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/3.beginAndEnd (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/3.acceptsNullptr\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/3.acceptsNullptr (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/3.acceptsZeroSize\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/3.acceptsZeroSize (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/3.constIteratorAccessOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/3.constIteratorAccessOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/3.iteratorIncreaseDecreaseOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/3.iteratorIncreaseDecreaseOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/3.iteratorArithmeticOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/3.iteratorArithmeticOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTestAndConst/3.iteratorComparingOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTestAndConst/3.iteratorComparingOperatorTest (0 ms)\n6: \x1b[0;32m[----------] \x1b[m8 tests from TypedArrayViewTestAndConst/3 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m3 tests from TypedArrayViewTest/0, where TypeParam = ramses_internal::ArrayView<char>\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTest/0.iteratorAccessOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTest/0.iteratorAccessOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTest/0.ConstIteratorAccessOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTest/0.ConstIteratorAccessOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTest/0.simpleIteration\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTest/0.simpleIteration (0 ms)\n6: \x1b[0;32m[----------] \x1b[m3 tests from TypedArrayViewTest/0 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m3 tests from TypedArrayViewTest/1, where TypeParam = ramses_internal::ArrayView<unsigned int>\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTest/1.iteratorAccessOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTest/1.iteratorAccessOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTest/1.ConstIteratorAccessOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTest/1.ConstIteratorAccessOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTest/1.simpleIteration\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTest/1.simpleIteration (0 ms)\n6: \x1b[0;32m[----------] \x1b[m3 tests from TypedArrayViewTest/1 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m3 tests from TypedArrayViewTest/2, where TypeParam = ramses_internal::ArrayView<unsigned short>\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTest/2.iteratorAccessOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTest/2.iteratorAccessOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTest/2.ConstIteratorAccessOperatorTest\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTest/2.ConstIteratorAccessOperatorTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mTypedArrayViewTest/2.simpleIteration\n6: \x1b[0;32m[       OK ] \x1b[mTypedArrayViewTest/2.simpleIteration (0 ms)\n6: \x1b[0;32m[----------] \x1b[m3 tests from TypedArrayViewTest/2 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m1 test from ArrayViewTest\n6: \x1b[0;32m[ RUN      ] \x1b[mArrayViewTest.worksWithRandomIteratorAlgorithms\n6: \x1b[0;32m[       OK ] \x1b[mArrayViewTest.worksWithRandomIteratorAlgorithms (0 ms)\n6: \x1b[0;32m[----------] \x1b[m1 test from ArrayViewTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m5 tests from ABlockingQueue\n6: \x1b[0;32m[ RUN      ] \x1b[mABlockingQueue.canPushAndPopValue\n6: \x1b[0;32m[       OK ] \x1b[mABlockingQueue.canPushAndPopValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mABlockingQueue.canPushAndPopMultipleValuesAsFifo\n6: \x1b[0;32m[       OK ] \x1b[mABlockingQueue.canPushAndPopMultipleValuesAsFifo (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mABlockingQueue.hasTimeoutWhenPoppingEmptyQueue\n6: \x1b[0;32m[       OK ] \x1b[mABlockingQueue.hasTimeoutWhenPoppingEmptyQueue (10 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mABlockingQueue.isEmptyIfNoElementsInside\n6: \x1b[0;32m[       OK ] \x1b[mABlockingQueue.isEmptyIfNoElementsInside (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mABlockingQueue.confidence_canPushAndPopFromMultipleThreads\n6: \x1b[0;32m[       OK ] \x1b[mABlockingQueue.confidence_canPushAndPopFromMultipleThreads (736 ms)\n6: \x1b[0;32m[----------] \x1b[m5 tests from ABlockingQueue (746 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m28 tests from GuidTest\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.TestNewAreNotEqual\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.TestNewAreNotEqual (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.TestParseAreEqual1\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.TestParseAreEqual1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.TestParseInvalidGuid1\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.TestParseInvalidGuid1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.TestParseInvalidGuid2\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.TestParseInvalidGuid2 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.TestParseInvalidGuid3\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.TestParseInvalidGuid3 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.TestParseToString1\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.TestParseToString1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.TestParseToString2\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.TestParseToString2 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.TestCopyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.TestCopyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.TestAssignmentOperator1\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.TestAssignmentOperator1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.TestParse1\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.TestParse1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.TestParse2\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.TestParse2 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.CopyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.CopyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.ExpectUuidStructPacked\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.ExpectUuidStructPacked (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.HashGuid\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.HashGuid (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.HashersForGuidEqual\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.HashersForGuidEqual (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.createsRandom\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.createsRandom (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.copyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.copyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.createFromString\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.createFromString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.canCreateAlwaysSameInvalidGuid\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.canCreateAlwaysSameInvalidGuid (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.InvalidGuidIsInvalidOthersNot\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.InvalidGuidIsInvalidOthersNot (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.writeToStringOutputStream_full\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.writeToStringOutputStream_full (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.writeToStringOutputStream_leading_zeros\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.writeToStringOutputStream_leading_zeros (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.writeToStringOutputStream_zero\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.writeToStringOutputStream_zero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.writeToStringOutputStream_specialNumber\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.writeToStringOutputStream_specialNumber (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.get64\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.get64 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.initFrom64\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.initFrom64 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.writeReadToBinaryStream\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.writeReadToBinaryStream (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mGuidTest.readBinaryStreamWithUpperBytesSet\n6: \x1b[0;32m[       OK ] \x1b[mGuidTest.readBinaryStreamWithUpperBytesSet (0 ms)\n6: \x1b[0;32m[----------] \x1b[m28 tests from GuidTest (1 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m9 tests from AHeapArray\n6: \x1b[0;32m[ RUN      ] \x1b[mAHeapArray.DefaultCtorCreatesEmpty\n6: \x1b[0;32m[       OK ] \x1b[mAHeapArray.DefaultCtorCreatesEmpty (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAHeapArray.CanCreateWithSize\n6: \x1b[0;32m[       OK ] \x1b[mAHeapArray.CanCreateWithSize (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAHeapArray.CanCreateWithSizeAndData\n6: \x1b[0;32m[       OK ] \x1b[mAHeapArray.CanCreateWithSizeAndData (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAHeapArray.CanGetConstData\n6: \x1b[0;32m[       OK ] \x1b[mAHeapArray.CanGetConstData (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAHeapArray.IsZeroAfterSetZero\n6: \x1b[0;32m[       OK ] \x1b[mAHeapArray.IsZeroAfterSetZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAHeapArray.CanMoveConstruct\n6: \x1b[0;32m[       OK ] \x1b[mAHeapArray.CanMoveConstruct (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAHeapArray.CanMoveAssign\n6: \x1b[0;32m[       OK ] \x1b[mAHeapArray.CanMoveAssign (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAHeapArray.canBeStronglyTyped\n6: \x1b[0;32m[       OK ] \x1b[mAHeapArray.canBeStronglyTyped (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAHeapArray.canBeReconstructedWithOtherSize\n6: \x1b[0;32m[       OK ] \x1b[mAHeapArray.canBeReconstructedWithOtherSize (0 ms)\n6: \x1b[0;32m[----------] \x1b[m9 tests from AHeapArray (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m12 tests from AIInutOutputStream\n6: \x1b[0;32m[ RUN      ] \x1b[mAIInutOutputStream.verifyUint32\n6: \x1b[0;32m[       OK ] \x1b[mAIInutOutputStream.verifyUint32 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAIInutOutputStream.verifyInt32\n6: \x1b[0;32m[       OK ] \x1b[mAIInutOutputStream.verifyInt32 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAIInutOutputStream.verifyUint64\n6: \x1b[0;32m[       OK ] \x1b[mAIInutOutputStream.verifyUint64 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAIInutOutputStream.verifyInt64\n6: \x1b[0;32m[       OK ] \x1b[mAIInutOutputStream.verifyInt64 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAIInutOutputStream.verifyUint16\n6: \x1b[0;32m[       OK ] \x1b[mAIInutOutputStream.verifyUint16 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAIInutOutputStream.verifyInt16\n6: \x1b[0;32m[       OK ] \x1b[mAIInutOutputStream.verifyInt16 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAIInutOutputStream.verifyUint8\n6: \x1b[0;32m[       OK ] \x1b[mAIInutOutputStream.verifyUint8 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAIInutOutputStream.verifyInt8\n6: \x1b[0;32m[       OK ] \x1b[mAIInutOutputStream.verifyInt8 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAIInutOutputStream.verifyBool\n6: \x1b[0;32m[       OK ] \x1b[mAIInutOutputStream.verifyBool (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAIInutOutputStream.verifyFloat\n6: \x1b[0;32m[       OK ] \x1b[mAIInutOutputStream.verifyFloat (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAIInutOutputStream.verifyEnum\n6: \x1b[0;32m[       OK ] \x1b[mAIInutOutputStream.verifyEnum (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAIInutOutputStream.verifyEnum8\n6: \x1b[0;32m[       OK ] \x1b[mAIInutOutputStream.verifyEnum8 (0 ms)\n6: \x1b[0;32m[----------] \x1b[m12 tests from AIInutOutputStream (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m3 tests from PlatformMath\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformMath.PI\n6: \x1b[0;32m[       OK ] \x1b[mPlatformMath.PI (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformMath.Rad2Deg\n6: \x1b[0;32m[       OK ] \x1b[mPlatformMath.Rad2Deg (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformMath.Deg2Rad\n6: \x1b[0;32m[       OK ] \x1b[mPlatformMath.Deg2Rad (0 ms)\n6: \x1b[0;32m[----------] \x1b[m3 tests from PlatformMath (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from NumericLimits\n6: \x1b[0;32m[ RUN      ] \x1b[mNumericLimits.ensureAvailableForAlltypes\n6: \x1b[0;32m[       OK ] \x1b[mNumericLimits.ensureAvailableForAlltypes (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mNumericLimits.testLimits\n6: \x1b[0;32m[       OK ] \x1b[mNumericLimits.testLimits (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from NumericLimits (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m1 test from Endianess\n6: \x1b[0;32m[ RUN      ] \x1b[mEndianess.isLittleEndianOnAllRamsesSystems\n6: \x1b[0;32m[       OK ] \x1b[mEndianess.isLittleEndianOnAllRamsesSystems (0 ms)\n6: \x1b[0;32m[----------] \x1b[m1 test from Endianess (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m4 tests from EnvironmentVariables\n6: \x1b[0;32m[ RUN      ] \x1b[mEnvironmentVariables.getTest\n6: \x1b[0;32m[       OK ] \x1b[mEnvironmentVariables.getTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mEnvironmentVariables.hasTest\n6: \x1b[0;32m[       OK ] \x1b[mEnvironmentVariables.hasTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mEnvironmentVariables.setTest\n6: \x1b[0;32m[       OK ] \x1b[mEnvironmentVariables.setTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mEnvironmentVariables.unsetTest\n6: \x1b[0;32m[       OK ] \x1b[mEnvironmentVariables.unsetTest (0 ms)\n6: \x1b[0;32m[----------] \x1b[m4 tests from EnvironmentVariables (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m1 test from PlatformSignal\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformSignal.signalAndRaise\n6: \x1b[0;32m[       OK ] \x1b[mPlatformSignal.signalAndRaise (0 ms)\n6: \x1b[0;32m[----------] \x1b[m1 test from PlatformSignal (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m7 tests from APlatformThread\n6: \x1b[0;32m[ RUN      ] \x1b[mAPlatformThread.Constructor\n6: \x1b[0;32m[       OK ] \x1b[mAPlatformThread.Constructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAPlatformThread.TwoThreadsAtOnce\n6: \x1b[0;32m[       OK ] \x1b[mAPlatformThread.TwoThreadsAtOnce (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAPlatformThread.reuseThread\n6: \x1b[0;32m[       OK ] \x1b[mAPlatformThread.reuseThread (2 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAPlatformThread.startAndCancelTest\n6: \x1b[0;32m[       OK ] \x1b[mAPlatformThread.startAndCancelTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAPlatformThread.joinWithoutStartingIsOK\n6: \x1b[0;32m[       OK ] \x1b[mAPlatformThread.joinWithoutStartingIsOK (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAPlatformThread.cancelWithoutRunnable\n6: \x1b[0;32m[       OK ] \x1b[mAPlatformThread.cancelWithoutRunnable (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAPlatformThread.stateLifecycle\n6: \x1b[0;32m[       OK ] \x1b[mAPlatformThread.stateLifecycle (10 ms)\n6: \x1b[0;32m[----------] \x1b[m7 tests from APlatformThread (12 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m1 test from Thread\n6: \x1b[0;32m[ RUN      ] \x1b[mThread.getId\n6: \x1b[0;32m[       OK ] \x1b[mThread.getId (0 ms)\n6: \x1b[0;32m[----------] \x1b[m1 test from Thread (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m4 tests from PlatformTimeSynchronized\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformTimeSynchronized.nowNotZero\n6: \x1b[0;32m[       OK ] \x1b[mPlatformTimeSynchronized.nowNotZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformTimeSynchronized.expectTimeProgressed\n6: \x1b[0;32m[       OK ] \x1b[mPlatformTimeSynchronized.expectTimeProgressed (60 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformTimeSynchronized.non_ptp_behavesAsSystemClock\n6: \x1b[0;32m[       OK ] \x1b[mPlatformTimeSynchronized.non_ptp_behavesAsSystemClock (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformTimeSynchronized.integralConversionsWork\n6: \x1b[0;32m[       OK ] \x1b[mPlatformTimeSynchronized.integralConversionsWork (0 ms)\n6: \x1b[0;32m[----------] \x1b[m4 tests from PlatformTimeSynchronized (60 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m5 tests from PlatformTimeMonotonic\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformTimeMonotonic.notZero\n6: \x1b[0;32m[       OK ] \x1b[mPlatformTimeMonotonic.notZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformTimeMonotonic.doesNotMoveBackward\n6: \x1b[0;32m[       OK ] \x1b[mPlatformTimeMonotonic.doesNotMoveBackward (61 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformTimeMonotonic.expectTimeProgressed_Milliseconds\n6: \x1b[0;32m[       OK ] \x1b[mPlatformTimeMonotonic.expectTimeProgressed_Milliseconds (60 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformTimeMonotonic.expectTimeProgressed_Microseconds\n6: \x1b[0;32m[       OK ] \x1b[mPlatformTimeMonotonic.expectTimeProgressed_Microseconds (60 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformTimeMonotonic.integralConversionsWork\n6: \x1b[0;32m[       OK ] \x1b[mPlatformTimeMonotonic.integralConversionsWork (0 ms)\n6: \x1b[0;32m[----------] \x1b[m5 tests from PlatformTimeMonotonic (181 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m3 tests from PlatformTimeAbsolute\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformTimeAbsolute.notZero\n6: \x1b[0;32m[       OK ] \x1b[mPlatformTimeAbsolute.notZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformTimeAbsolute.isBiggerThanSomeReferenceTime\n6: \x1b[0;32m[       OK ] \x1b[mPlatformTimeAbsolute.isBiggerThanSomeReferenceTime (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mPlatformTimeAbsolute.integralConversionsWork\n6: \x1b[0;32m[       OK ] \x1b[mPlatformTimeAbsolute.integralConversionsWork (0 ms)\n6: \x1b[0;32m[----------] \x1b[m3 tests from PlatformTimeAbsolute (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m48 tests from AStringOutputStream\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteFloatWithDefaultPrecision\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteFloatWithDefaultPrecision (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteFloatMaximumNegativeWithDefaultPrecision\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteFloatMaximumNegativeWithDefaultPrecision (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteFloatZeroWithMaximumPrecision\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteFloatZeroWithMaximumPrecision (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteFloatZeroWithCappedToMaximumPrecision\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteFloatZeroWithCappedToMaximumPrecision (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteFloatSmallestNegativeWithMaximumPrecision\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteFloatSmallestNegativeWithMaximumPrecision (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteInt32\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteInt32 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteUInt32\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteUInt32 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteInt64\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteInt64 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteUInt64\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteUInt64 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteString\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteStdString\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteStdString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteBoolTrue\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteBoolTrue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteBoolFalse\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteBoolFalse (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteCharArray\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteCharArray (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteChar\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteChar (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteUInt16\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteUInt16 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteFixed\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteFixed (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.Clear\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.Clear (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.AutoFlush\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.AutoFlush (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.Flush\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.Flush (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.MultipleData\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.MultipleData (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.Resize\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.Resize (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.C_StrIsNullTerminatedForConstStreams\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.C_StrIsNullTerminatedForConstStreams (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteUInt32HexNoLeadingZero\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteUInt32HexNoLeadingZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteUInt32HexLeadingZero\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteUInt32HexLeadingZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteInt32HexNoLeadingZero\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteInt32HexNoLeadingZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteInt32HexLeadingZero\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteInt32HexLeadingZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteInt32HexNegativeValue\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteInt32HexNegativeValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteUInt64HexNoLeadingZero\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteUInt64HexNoLeadingZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteUInt64HexLeadingZero\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteUInt64HexLeadingZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteInt64HexNoLeadingZero\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteInt64HexNoLeadingZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteInt64HexLeadingZero\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteInt64HexLeadingZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteInt64HexNegativeValue\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteInt64HexNegativeValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteUInt16HexLeadingZero\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteUInt16HexLeadingZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteUInt16HexNoLeadingZero\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteUInt16HexNoLeadingZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteInt16HexLeadingZero\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteInt16HexLeadingZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteInt16HexNoLeadingZero\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteInt16HexNoLeadingZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.WriteInt16HexNegativeValue\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.WriteInt16HexNegativeValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.hasLengthZeroIntially\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.hasLengthZeroIntially (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.returnsCorrectLength\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.returnsCorrectLength (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.PrintsNullVoidPointerAsHex\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.PrintsNullVoidPointerAsHex (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.PrintsNonNullVoidPointerAsHex\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.PrintsNonNullVoidPointerAsHex (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.Matrix44f\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.Matrix44f (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.releaseReturnsStringAndClearsStream\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.releaseReturnsStringAndClearsStream (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.ToStringWorksForStreamableTypes\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.ToStringWorksForStreamableTypes (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.CanGetUnderlayingString\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.CanGetUnderlayingString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.CanConstructWithString\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.CanConstructWithString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStringOutputStream.CanConstructWithStdString\n6: \x1b[0;32m[       OK ] \x1b[mAStringOutputStream.CanConstructWithStdString (0 ms)\n6: \x1b[0;32m[----------] \x1b[m48 tests from AStringOutputStream (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m75 tests from String\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestCTor\n6: \x1b[0;32m[       OK ] \x1b[mString.TestCTor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestCStr\n6: \x1b[0;32m[       OK ] \x1b[mString.TestCStr (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestCopyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mString.TestCopyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.InitialSizeConstructor\n6: \x1b[0;32m[       OK ] \x1b[mString.InitialSizeConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.ConstructWithEmptyStringIsEmpty\n6: \x1b[0;32m[       OK ] \x1b[mString.ConstructWithEmptyStringIsEmpty (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAssignOperator1\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAssignOperator1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.MoveConstructor\n6: \x1b[0;32m[       OK ] \x1b[mString.MoveConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.MoveAssignment\n6: \x1b[0;32m[       OK ] \x1b[mString.MoveAssignment (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestToLowerCase1\n6: \x1b[0;32m[       OK ] \x1b[mString.TestToLowerCase1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestToLowerCase2\n6: \x1b[0;32m[       OK ] \x1b[mString.TestToLowerCase2 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestToLowerCase3\n6: \x1b[0;32m[       OK ] \x1b[mString.TestToLowerCase3 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestToLowerCase4\n6: \x1b[0;32m[       OK ] \x1b[mString.TestToLowerCase4 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestToLowerCase5\n6: \x1b[0;32m[       OK ] \x1b[mString.TestToLowerCase5 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestToUpperCase1\n6: \x1b[0;32m[       OK ] \x1b[mString.TestToUpperCase1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestToUpperCase2\n6: \x1b[0;32m[       OK ] \x1b[mString.TestToUpperCase2 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestToUpperCase3\n6: \x1b[0;32m[       OK ] \x1b[mString.TestToUpperCase3 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestToUpperCase4\n6: \x1b[0;32m[       OK ] \x1b[mString.TestToUpperCase4 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestToUpperCase5\n6: \x1b[0;32m[       OK ] \x1b[mString.TestToUpperCase5 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAssignOperator2\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAssignOperator2 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAssignOperator3\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAssignOperator3 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAssignOperator4\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAssignOperator4 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAssignOperator5\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAssignOperator5 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAssignOperator6\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAssignOperator6 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAppend1\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAppend1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAppend2\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAppend2 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAppend3\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAppend3 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAppend4\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAppend4 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAppend5\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAppend5 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestPlusOperator1\n6: \x1b[0;32m[       OK ] \x1b[mString.TestPlusOperator1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestPlusOperator2\n6: \x1b[0;32m[       OK ] \x1b[mString.TestPlusOperator2 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestPlusOperator3\n6: \x1b[0;32m[       OK ] \x1b[mString.TestPlusOperator3 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestPlusOperator4\n6: \x1b[0;32m[       OK ] \x1b[mString.TestPlusOperator4 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestPlusOperator5\n6: \x1b[0;32m[       OK ] \x1b[mString.TestPlusOperator5 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAddition\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAddition (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAddAssignString\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAddAssignString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestAddAssignChar\n6: \x1b[0;32m[       OK ] \x1b[mString.TestAddAssignChar (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestSubStringCTor1\n6: \x1b[0;32m[       OK ] \x1b[mString.TestSubStringCTor1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestSubStringCTor4\n6: \x1b[0;32m[       OK ] \x1b[mString.TestSubStringCTor4 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestSubStringCTor5\n6: \x1b[0;32m[       OK ] \x1b[mString.TestSubStringCTor5 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestSubStringCTor6\n6: \x1b[0;32m[       OK ] \x1b[mString.TestSubStringCTor6 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestSubStringCTorWithoutNullTermintor\n6: \x1b[0;32m[       OK ] \x1b[mString.TestSubStringCTorWithoutNullTermintor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.AccessOperator\n6: \x1b[0;32m[       OK ] \x1b[mString.AccessOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.AutoCast\n6: \x1b[0;32m[       OK ] \x1b[mString.AutoCast (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.Equals1\n6: \x1b[0;32m[       OK ] \x1b[mString.Equals1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.Equals2\n6: \x1b[0;32m[       OK ] \x1b[mString.Equals2 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.Equals3\n6: \x1b[0;32m[       OK ] \x1b[mString.Equals3 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.Equals4\n6: \x1b[0;32m[       OK ] \x1b[mString.Equals4 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.NotEquals1\n6: \x1b[0;32m[       OK ] \x1b[mString.NotEquals1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.NotEquals2\n6: \x1b[0;32m[       OK ] \x1b[mString.NotEquals2 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.NotEquals3\n6: \x1b[0;32m[       OK ] \x1b[mString.NotEquals3 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.SmallerGreater1\n6: \x1b[0;32m[       OK ] \x1b[mString.SmallerGreater1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.SmallerGreater2\n6: \x1b[0;32m[       OK ] \x1b[mString.SmallerGreater2 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.SmallerGreater3\n6: \x1b[0;32m[       OK ] \x1b[mString.SmallerGreater3 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.SmallerGreater4\n6: \x1b[0;32m[       OK ] \x1b[mString.SmallerGreater4 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.FindChar\n6: \x1b[0;32m[       OK ] \x1b[mString.FindChar (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.FindCharOffset\n6: \x1b[0;32m[       OK ] \x1b[mString.FindCharOffset (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.FindStringOffset\n6: \x1b[0;32m[       OK ] \x1b[mString.FindStringOffset (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.RFindChar\n6: \x1b[0;32m[       OK ] \x1b[mString.RFindChar (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.FindSubstring\n6: \x1b[0;32m[       OK ] \x1b[mString.FindSubstring (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.GetSubstring\n6: \x1b[0;32m[       OK ] \x1b[mString.GetSubstring (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.StartsWith\n6: \x1b[0;32m[       OK ] \x1b[mString.StartsWith (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.EndsWith\n6: \x1b[0;32m[       OK ] \x1b[mString.EndsWith (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestDataGetterOnEmptyString\n6: \x1b[0;32m[       OK ] \x1b[mString.TestDataGetterOnEmptyString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.TestDataGetterOnNonEmptyString\n6: \x1b[0;32m[       OK ] \x1b[mString.TestDataGetterOnNonEmptyString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.ResizeAnEmptyString\n6: \x1b[0;32m[       OK ] \x1b[mString.ResizeAnEmptyString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.ResizeToSmaller\n6: \x1b[0;32m[       OK ] \x1b[mString.ResizeToSmaller (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.IsNullterminatedAlsoAfterResizing\n6: \x1b[0;32m[       OK ] \x1b[mString.IsNullterminatedAlsoAfterResizing (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.IsNullterminatedAlsoAfterResizingToZero\n6: \x1b[0;32m[       OK ] \x1b[mString.IsNullterminatedAlsoAfterResizingToZero (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.ResizeReallyAllocatesEnough\n6: \x1b[0;32m[       OK ] \x1b[mString.ResizeReallyAllocatesEnough (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.ReservePreventReallocAndCapacityChange\n6: \x1b[0;32m[       OK ] \x1b[mString.ReservePreventReallocAndCapacityChange (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.reserveOnEmptyStringSetCapacityOnAtLeastThisValue\n6: \x1b[0;32m[       OK ] \x1b[mString.reserveOnEmptyStringSetCapacityOnAtLeastThisValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.reserveMoreOnNonOnEmptyStringSetCapacityOnAtLeastThisValue\n6: \x1b[0;32m[       OK ] \x1b[mString.reserveMoreOnNonOnEmptyStringSetCapacityOnAtLeastThisValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.reserveLessThanSizeDoesNothing\n6: \x1b[0;32m[       OK ] \x1b[mString.reserveLessThanSizeDoesNothing (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.HashMapWithString\n6: \x1b[0;32m[       OK ] \x1b[mString.HashMapWithString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mString.HashMapWithStdString\n6: \x1b[0;32m[       OK ] \x1b[mString.HashMapWithStdString (0 ms)\n6: \x1b[0;32m[----------] \x1b[m75 tests from String (1 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m4 tests from AString\n6: \x1b[0;32m[ RUN      ] \x1b[mAString.serializeDeserializeString\n6: \x1b[0;32m[       OK ] \x1b[mAString.serializeDeserializeString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAString.serializeDeserializeStdString\n6: \x1b[0;32m[       OK ] \x1b[mAString.serializeDeserializeStdString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAString.serializeDeserializeRamsesToStdString\n6: \x1b[0;32m[       OK ] \x1b[mAString.serializeDeserializeRamsesToStdString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAString.serializeDeserializeStdToRamsesString\n6: \x1b[0;32m[       OK ] \x1b[mAString.serializeDeserializeStdToRamsesString (0 ms)\n6: \x1b[0;32m[----------] \x1b[m4 tests from AString (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m8 tests from AVector\n6: \x1b[0;32m[ RUN      ] \x1b[mAVector.isInitiallyEmpty\n6: \x1b[0;32m[       OK ] \x1b[mAVector.isInitiallyEmpty (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAVector.canBeConstructedWithDefaultValues\n6: \x1b[0;32m[       OK ] \x1b[mAVector.canBeConstructedWithDefaultValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAVector.canBeConstructedWithGivenValue\n6: \x1b[0;32m[       OK ] \x1b[mAVector.canBeConstructedWithGivenValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAVector.canBeInitializedFromInitializerList\n6: \x1b[0;32m[       OK ] \x1b[mAVector.canBeInitializedFromInitializerList (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAVector.canBeCopyConstructed\n6: \x1b[0;32m[       OK ] \x1b[mAVector.canBeCopyConstructed (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAVector.canBeAssignTo\n6: \x1b[0;32m[       OK ] \x1b[mAVector.canBeAssignTo (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAVector.canBeMoveConstructed\n6: \x1b[0;32m[       OK ] \x1b[mAVector.canBeMoveConstructed (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAVector.canBeMoveAssigned\n6: \x1b[0;32m[       OK ] \x1b[mAVector.canBeMoveAssigned (0 ms)\n6: \x1b[0;32m[----------] \x1b[m8 tests from AVector (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m3 tests from APILoggingHelperTest\n6: \x1b[0;32m[ RUN      ] \x1b[mAPILoggingHelperTest.emptyArgumentsTest\n6: \x1b[0;32m[       OK ] \x1b[mAPILoggingHelperTest.emptyArgumentsTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAPILoggingHelperTest.singleArgumentTest\n6: \x1b[0;32m[       OK ] \x1b[mAPILoggingHelperTest.singleArgumentTest (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAPILoggingHelperTest.multiArgumentsTest\n6: \x1b[0;32m[       OK ] \x1b[mAPILoggingHelperTest.multiArgumentsTest (0 ms)\n6: \x1b[0;32m[----------] \x1b[m3 tests from APILoggingHelperTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m4 tests from ACommandContainer\n6: \x1b[0;32m[ RUN      ] \x1b[mACommandContainer.isEmptyAfterCreation\n6: \x1b[0;32m[       OK ] \x1b[mACommandContainer.isEmptyAfterCreation (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mACommandContainer.canAddAndGetCommand\n6: \x1b[0;32m[       OK ] \x1b[mACommandContainer.canAddAndGetCommand (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mACommandContainer.canClearCommands\n6: \x1b[0;32m[       OK ] \x1b[mACommandContainer.canClearCommands (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mACommandContainer.canSwapContent\n6: \x1b[0;32m[       OK ] \x1b[mACommandContainer.canSwapContent (0 ms)\n6: \x1b[0;32m[----------] \x1b[m4 tests from ACommandContainer (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from ACommand\n6: \x1b[0;32m[ RUN      ] \x1b[mACommand.CanBeCreated\n6: \x1b[0;32m[       OK ] \x1b[mACommand.CanBeCreated (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mACommand.canConvertToItsType\n6: \x1b[0;32m[       OK ] \x1b[mACommand.canConvertToItsType (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from ACommand (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from DcsmApiTypes\n6: \x1b[0;32m[ RUN      ] \x1b[mDcsmApiTypes.hasSizeInfoComparison\n6: \x1b[0;32m[       OK ] \x1b[mDcsmApiTypes.hasSizeInfoComparison (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mDcsmApiTypes.hasAnimationInformationComparison\n6: \x1b[0;32m[       OK ] \x1b[mDcsmApiTypes.hasAnimationInformationComparison (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from DcsmApiTypes (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m7 tests from ADcsmConsumer\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmConsumer.canCreateAndDestroy\n6: \x1b[0;32m[       OK ] \x1b[mADcsmConsumer.canCreateAndDestroy (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmConsumer.canCreateAndLetFrameworkDestroy\n6: \x1b[0;32m[       OK ] \x1b[mADcsmConsumer.canCreateAndLetFrameworkDestroy (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmConsumer.cannotCreateTwiceOnSameFramework\n6: \x1b[0;32m[       OK ] \x1b[mADcsmConsumer.cannotCreateTwiceOnSameFramework (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmConsumer.cannotDestroyConsumerFromOtherFramework\n6: \x1b[0;32m[       OK ] \x1b[mADcsmConsumer.cannotDestroyConsumerFromOtherFramework (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmConsumer.canCreateAndDestroyConsumerOnDifferentFrameworksSimultaneously\n6: \x1b[0;32m[       OK ] \x1b[mADcsmConsumer.canCreateAndDestroyConsumerOnDifferentFrameworksSimultaneously (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmConsumer.emptyDispatchSucceeds\n6: \x1b[0;32m[       OK ] \x1b[mADcsmConsumer.emptyDispatchSucceeds (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmConsumer.sendCallWithUnknownContentFails\n6: \x1b[0;32m[       OK ] \x1b[mADcsmConsumer.sendCallWithUnknownContentFails (0 ms)\n6: \x1b[0;32m[----------] \x1b[m7 tests from ADcsmConsumer (3 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m10 tests from ADcsmMetadataCreator\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataCreator.initiallyEmpty\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataCreator.initiallyEmpty (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataCreator.canSetPreviewImagePng\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataCreator.canSetPreviewImagePng (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataCreator.failsForInvalidPreviewImagePng\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataCreator.failsForInvalidPreviewImagePng (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataCreator.canSetPreviewDescription\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataCreator.canSetPreviewDescription (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataCreator.canSetWidgetOrder\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataCreator.canSetWidgetOrder (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataCreator.canSetWidgetBackgroundID\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataCreator.canSetWidgetBackgroundID (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataCreator.canSetWidgetHUDLineID\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataCreator.canSetWidgetHUDLineID (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataCreator.canSetCarModel\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataCreator.canSetCarModel (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataCreator.canSetCarModelView\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataCreator.canSetCarModelView (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataCreator.canSetCarModelVisibility\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataCreator.canSetCarModelVisibility (0 ms)\n6: \x1b[0;32m[----------] \x1b[m10 tests from ADcsmMetadataCreator (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m9 tests from ADcsmMetadataUpdate\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataUpdate.emptyObjectReturnsEmptyMetadata\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataUpdate.emptyObjectReturnsEmptyMetadata (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataUpdate.returnsPreviewImagePng\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataUpdate.returnsPreviewImagePng (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataUpdate.returnsPreviewDescription\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataUpdate.returnsPreviewDescription (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataUpdate.returnsWidgetOrder\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataUpdate.returnsWidgetOrder (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataUpdate.returnsWidgetBackgroundID\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataUpdate.returnsWidgetBackgroundID (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataUpdate.returnsWidgetHUDLineID\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataUpdate.returnsWidgetHUDLineID (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataUpdate.returnsCarModel\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataUpdate.returnsCarModel (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataUpdate.returnsCarModelView\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataUpdate.returnsCarModelView (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmMetadataUpdate.returnsCarModelVisibility\n6: \x1b[0;32m[       OK ] \x1b[mADcsmMetadataUpdate.returnsCarModelVisibility (0 ms)\n6: \x1b[0;32m[----------] \x1b[m9 tests from ADcsmMetadataUpdate (1 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m47 tests from ADcsmProvider\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsLocalProviderAvailabilityOnConstructionAndDestruction\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsLocalProviderAvailabilityOnConstructionAndDestruction (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsDispatchOnDcsmClientWhenDispatchIsCalledAndReturnsOK\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsDispatchOnDcsmClientWhenDispatchIsCalledAndReturnsOK (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.canOfferContent\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.canOfferContent (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.canOfferContentWithMetadata\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.canOfferContentWithMetadata (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.willIgnoreAllButOneOfferContent\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.willIgnoreAllButOneOfferContent (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.willIgnoreAllButOneOfferContentAfterOfferWithMetadata\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.willIgnoreAllButOneOfferContentAfterOfferWithMetadata (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.willAcceptSameSceneIDForDifferentContents\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.willAcceptSameSceneIDForDifferentContents (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.willAutomaticallyReplyContentReadyIfContentIsMarkedReadyAndNotCallCallback\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.willAutomaticallyReplyContentReadyIfContentIsMarkedReadyAndNotCallCallback (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.willCallCallbackIfContentNotMarkedReady\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.willCallCallbackIfContentNotMarkedReady (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.willReplyContentReadyOnceContentIsMarkedReady\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.willReplyContentReadyOnceContentIsMarkedReady (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.ignoresStateChangeRequestToSameState\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.ignoresStateChangeRequestToSameState (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsCallbackForEachSizeChangedWithCorrectSizeInfoAndAnimInformation\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsCallbackForEachSizeChangedWithCorrectSizeInfoAndAnimInformation (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsCallbackForEachStatusChangedWithCorrectAnimInformation\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsCallbackForEachStatusChangedWithCorrectAnimInformation (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsSizeChangedCallbackOnStatusChangedToAssignedFromOffered\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsSizeChangedCallbackOnStatusChangedToAssignedFromOffered (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.doesNotCallSizeChangedCallbackOnStatusChangedToAssignedFromAboveButContentReleasedCallback\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.doesNotCallSizeChangedCallbackOnStatusChangedToAssignedFromAboveButContentReleasedCallback (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.doesNotCallSizeChangedCallbackOnStatusChangedToAnyOtherStateThanAssignedUpwards\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.doesNotCallSizeChangedCallbackOnStatusChangedToAnyOtherStateThanAssignedUpwards (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.sendsRequestStopOfferMessageAndCallsStopOfferAcceptedOnStatusChange\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.sendsRequestStopOfferMessageAndCallsStopOfferAcceptedOnStatusChange (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.sendsRequestContentFacosMessageToConsumerIfUserCallsRequestContentFocus\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.sendsRequestContentFacosMessageToConsumerIfUserCallsRequestContentFocus (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.doesNothingIfUserUsesWrongContentIDOnStopOfferContent\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.doesNothingIfUserUsesWrongContentIDOnStopOfferContent (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.doesNothingIfUserUsesWrongContentIDOnRequestContentFocus\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.doesNothingIfUserUsesWrongContentIDOnRequestContentFocus (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.doesNothingIfUserUsesWrongContentIDOnMarkContentReady\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.doesNothingIfUserUsesWrongContentIDOnMarkContentReady (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.marksContentReadyOnlyOnce\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.marksContentReadyOnlyOnce (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsNoCanvasSizeCallbackIfDcsmSizeMessageHasUnknownContentID\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsNoCanvasSizeCallbackIfDcsmSizeMessageHasUnknownContentID (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.doesNothingIfContentStateMessageHasWrongContentID\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.doesNothingIfContentStateMessageHasWrongContentID (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.allowsToReofferContentWithSameOrDifferentParameters\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.allowsToReofferContentWithSameOrDifferentParameters (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.offerContentFailsIfSendOfferContentFails\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.offerContentFailsIfSendOfferContentFails (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.offerContentWithMetadataFailsIfSendOfferContentFails\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.offerContentWithMetadataFailsIfSendOfferContentFails (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.offerContentWithMetadataFailsIfSendMetadataFails\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.offerContentWithMetadataFailsIfSendMetadataFails (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.requestStopOfferContentFailsIfSendRequestUnregisterContentFails\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.requestStopOfferContentFailsIfSendRequestUnregisterContentFails (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.markContentReadyFailsIfsendContentReadyFails\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.markContentReadyFailsIfsendContentReadyFails (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.requestContentFocusFailsIfSendContentFocusRequestFails\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.requestContentFocusFailsIfSendContentFocusRequestFails (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.dispatchesToTheHandlerProvidedByUser\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.dispatchesToTheHandlerProvidedByUser (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsShowCallbackIfNewStateIsShown\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsShowCallbackIfNewStateIsShown (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsHideCallbackIfNewStateIsReadyAndWasShown\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsHideCallbackIfNewStateIsReadyAndWasShown (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsReleaseCallbackIfNewStateIsAssignedAndWasShown\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsReleaseCallbackIfNewStateIsAssignedAndWasShown (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsReleaseCallbackIfNewStateIsAssignedAndWasReady\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsReleaseCallbackIfNewStateIsAssignedAndWasReady (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsStopOfferCallbackIfNewStateIsUnregisteredAndWasShown\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsStopOfferCallbackIfNewStateIsUnregisteredAndWasShown (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsStopOfferCallbackIfNewStateIsUnregisteredAndWasReady\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsStopOfferCallbackIfNewStateIsUnregisteredAndWasReady (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.callsStopOfferCallbackIfNewStateIsUnregisteredAndWasAssigned\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.callsStopOfferCallbackIfNewStateIsUnregisteredAndWasAssigned (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.needsANewMarkReadyAfterContentHasBeenSetToAssigned\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.needsANewMarkReadyAfterContentHasBeenSetToAssigned (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.needsANewMarkReadyAfterContentHasBeenSetToOffered\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.needsANewMarkReadyAfterContentHasBeenSetToOffered (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.allowsUserToCallMarkReadyWithinContentReleaseCallback\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.allowsUserToCallMarkReadyWithinContentReleaseCallback (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.doesNotCallSendContentReadyWhenContentHasBeenMarkedReadyButNotRequestedAfterUnreadying\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.doesNotCallSendContentReadyWhenContentHasBeenMarkedReadyButNotRequestedAfterUnreadying (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.doesNotCallSendContentReadyWhenContentHasBeenMarkedReadyButNotRequestedAfterReassigning\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.doesNotCallSendContentReadyWhenContentHasBeenMarkedReadyButNotRequestedAfterReassigning (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.canUpdateContentMetadata\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.canUpdateContentMetadata (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.updateContentMetadataFailsWithoutOffer\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.updateContentMetadataFailsWithoutOffer (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProvider.updateContentMetadataFailsWhenSendUpdateContentMetadataFails\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProvider.updateContentMetadataFailsWhenSendUpdateContentMetadataFails (0 ms)\n6: \x1b[0;32m[----------] \x1b[m47 tests from ADcsmProvider (6 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m6 tests from ADcsmProviderFromFramework\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProviderFromFramework.canCreateAndDestroy\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProviderFromFramework.canCreateAndDestroy (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProviderFromFramework.canCreateAndLetFrameworkDestroy\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProviderFromFramework.canCreateAndLetFrameworkDestroy (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProviderFromFramework.cannotCreateTwiceOnSameFramework\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProviderFromFramework.cannotCreateTwiceOnSameFramework (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProviderFromFramework.cannotDestroyProviderFromOtherFramework\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProviderFromFramework.cannotDestroyProviderFromOtherFramework (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProviderFromFramework.canCreateAndDestroyProviderOnDifferentFrameworksSimultaneously\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProviderFromFramework.canCreateAndDestroyProviderOnDifferentFrameworksSimultaneously (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmProviderFromFramework.emptyDispatchSucceeds\n6: \x1b[0;32m[       OK ] \x1b[mADcsmProviderFromFramework.emptyDispatchSucceeds (0 ms)\n6: \x1b[0;32m[----------] \x1b[m6 tests from ADcsmProviderFromFramework (2 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m6 tests from ADcsmSystem\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmSystem.canDoAFullContentLifecycle\n6: \x1b[0;32m[       OK ] \x1b[mADcsmSystem.canDoAFullContentLifecycle (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmSystem.canDoAFullContentLifecycleLateMarkReady\n6: \x1b[0;32m[       OK ] \x1b[mADcsmSystem.canDoAFullContentLifecycleLateMarkReady (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmSystem.allowsToAssignAndUnassignToSameContentRepeatedly\n6: \x1b[0;32m[       OK ] \x1b[mADcsmSystem.allowsToAssignAndUnassignToSameContentRepeatedly (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmSystem.allowsToRereadyTheSameContentRepeatedly\n6: \x1b[0;32m[       OK ] \x1b[mADcsmSystem.allowsToRereadyTheSameContentRepeatedly (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmSystem.canDoOfferWithMetadata\n6: \x1b[0;32m[       OK ] \x1b[mADcsmSystem.canDoOfferWithMetadata (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mADcsmSystem.canUpdateMetadataAfterOffer\n6: \x1b[0;32m[       OK ] \x1b[mADcsmSystem.canUpdateMetadataAfterOffer (1 ms)\n6: \x1b[0;32m[----------] \x1b[m6 tests from ADcsmSystem (4 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m6 tests from ARamsesFrameworkConfig\n6: \x1b[0;32m[ RUN      ] \x1b[mARamsesFrameworkConfig.IsInitializedCorrectly\n6: \x1b[0;32m[       OK ] \x1b[mARamsesFrameworkConfig.IsInitializedCorrectly (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mARamsesFrameworkConfig.CanSetShellConsoleType\n6: \x1b[0;32m[       OK ] \x1b[mARamsesFrameworkConfig.CanSetShellConsoleType (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mARamsesFrameworkConfig.CanSetShellTypeNone\n6: \x1b[0;32m[       OK ] \x1b[mARamsesFrameworkConfig.CanSetShellTypeNone (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mARamsesFrameworkConfig.CanSetShellTypeDefault\n6: \x1b[0;32m[       OK ] \x1b[mARamsesFrameworkConfig.CanSetShellTypeDefault (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mARamsesFrameworkConfig.CanEnableRamshFromCommandLine\n6: \x1b[0;32m[       OK ] \x1b[mARamsesFrameworkConfig.CanEnableRamshFromCommandLine (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mARamsesFrameworkConfig.TestSetandGetApplicationInformation\n6: \x1b[0;32m[       OK ] \x1b[mARamsesFrameworkConfig.TestSetandGetApplicationInformation (0 ms)\n6: \x1b[0;32m[----------] \x1b[m6 tests from ARamsesFrameworkConfig (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from ARamsesFrameworkImpl\n6: \x1b[0;32m[ RUN      ] \x1b[mARamsesFrameworkImpl.canCreateFrameworkImplFromDefaultConfig\n6: \x1b[0;32m[       OK ] \x1b[mARamsesFrameworkImpl.canCreateFrameworkImplFromDefaultConfig (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mARamsesFrameworkImpl.defaultConfigGeneratesGuidNotStartingWithZeros\n6: \x1b[0;32m[       OK ] \x1b[mARamsesFrameworkImpl.defaultConfigGeneratesGuidNotStartingWithZeros (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from ARamsesFrameworkImpl (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m4 tests from AStatusObject\n6: \x1b[0;32m[ RUN      ] \x1b[mAStatusObject.allValidationLevelsContainObjectNames\n6: \x1b[0;32m[       OK ] \x1b[mAStatusObject.allValidationLevelsContainObjectNames (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStatusObject.filteresValidationInfosCorrectly\n6: \x1b[0;32m[       OK ] \x1b[mAStatusObject.filteresValidationInfosCorrectly (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStatusObject.filteresValidationWarningsCorrectly\n6: \x1b[0;32m[       OK ] \x1b[mAStatusObject.filteresValidationWarningsCorrectly (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStatusObject.filteresValidationErrorsCorrectly\n6: \x1b[0;32m[       OK ] \x1b[mAStatusObject.filteresValidationErrorsCorrectly (0 ms)\n6: \x1b[0;32m[----------] \x1b[m4 tests from AStatusObject (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m28 tests from AStronglyTypedValue\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.CanBeCreatedWithDefaultValue\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.CanBeCreatedWithDefaultValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.ReturnsInvalidValueFromInvalid\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.ReturnsInvalidValueFromInvalid (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.CanBeCreatedWithUInt32\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.CanBeCreatedWithUInt32 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.ReturnsCorrectUInt32Value\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.ReturnsCorrectUInt32Value (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.ReturnsCorrectUInt32Reference\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.ReturnsCorrectUInt32Reference (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.ReturnedReferenceChangeEffectsValue_UInt32\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.ReturnedReferenceChangeEffectsValue_UInt32 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.EqualsToOtherIfSameUInt32Value\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.EqualsToOtherIfSameUInt32Value (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.DoesNotEqualToOtherIfDifferentUInt32Value\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.DoesNotEqualToOtherIfDifferentUInt32Value (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.CanBeCopiedWithUInt32AsValue\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.CanBeCopiedWithUInt32AsValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.CanBeCopyAssignedWithUInt32AsValue\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.CanBeCopyAssignedWithUInt32AsValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.canBeUsedWithPointer\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.canBeUsedWithPointer (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.canBeUsedInStdHashContainerWithIntegral\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.canBeUsedInStdHashContainerWithIntegral (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.canBeUsedInStdHashContainerWithPointer\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.canBeUsedInStdHashContainerWithPointer (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.canBeCheckedForValid\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.canBeCheckedForValid (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.CanBeCreatedWithDefaultValue\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.CanBeCreatedWithDefaultValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.ReturnsInvalidValueFromInvalid\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.ReturnsInvalidValueFromInvalid (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.CanBeCreatedWithUInt32\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.CanBeCreatedWithUInt32 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.ReturnsCorrectUInt32Value\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.ReturnsCorrectUInt32Value (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.ReturnsCorrectUInt32Reference\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.ReturnsCorrectUInt32Reference (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.ReturnedReferenceChangeEffectsValue_UInt32\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.ReturnedReferenceChangeEffectsValue_UInt32 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.EqualsToOtherIfSameUInt32Value\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.EqualsToOtherIfSameUInt32Value (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.DoesNotEqualToOtherIfDifferentUInt32Value\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.DoesNotEqualToOtherIfDifferentUInt32Value (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.CanBeCopiedWithUInt32AsValue\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.CanBeCopiedWithUInt32AsValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.CanBeCopyAssignedWithUInt32AsValue\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.CanBeCopyAssignedWithUInt32AsValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.canBeUsedWithPointer\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.canBeUsedWithPointer (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.canBeUsedInStdHashContainerWithIntegral\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.canBeUsedInStdHashContainerWithIntegral (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.canBeUsedInStdHashContainerWithPointer\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.canBeUsedInStdHashContainerWithPointer (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAStronglyTypedValue.canBeCheckedForValid\n6: \x1b[0;32m[       OK ] \x1b[mAStronglyTypedValue.canBeCheckedForValid (0 ms)\n6: \x1b[0;32m[----------] \x1b[m28 tests from AStronglyTypedValue (1 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from ACameraMatrixHelper\n6: \x1b[0;32m[ RUN      ] \x1b[mACameraMatrixHelper.ComputesProjectionMatrix\n6: \x1b[0;32m[       OK ] \x1b[mACameraMatrixHelper.ComputesProjectionMatrix (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mACameraMatrixHelper.ComputesOrthographicMatrix\n6: \x1b[0;32m[       OK ] \x1b[mACameraMatrixHelper.ComputesOrthographicMatrix (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from ACameraMatrixHelper (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m1 test from APerspectiveProjectionMatrix\n6: \x1b[0;32m[ RUN      ] \x1b[mAPerspectiveProjectionMatrix.ProjectsPointsCloserToViewerFartherFromCenterInNormalizedDeviceSpace\n6: \x1b[0;32m[       OK ] \x1b[mAPerspectiveProjectionMatrix.ProjectsPointsCloserToViewerFartherFromCenterInNormalizedDeviceSpace (0 ms)\n6: \x1b[0;32m[----------] \x1b[m1 test from APerspectiveProjectionMatrix (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m1 test from AOrthographicProjectionMatrix\n6: \x1b[0;32m[ RUN      ] \x1b[mAOrthographicProjectionMatrix.ProjectsPointsWithDifferentDepthToTheSamePixelInNormalizedDeviceSpace\n6: \x1b[0;32m[       OK ] \x1b[mAOrthographicProjectionMatrix.ProjectsPointsWithDifferentDepthToTheSamePixelInNormalizedDeviceSpace (0 ms)\n6: \x1b[0;32m[----------] \x1b[m1 test from AOrthographicProjectionMatrix (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m12 tests from Matrix22fTest\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix22fTest.DefaultConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix22fTest.DefaultConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix22fTest.CopyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix22fTest.CopyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix22fTest.ValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix22fTest.ValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix22fTest.VectorConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix22fTest.VectorConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix22fTest.IdentityMatrix\n6: \x1b[0;32m[       OK ] \x1b[mMatrix22fTest.IdentityMatrix (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix22fTest.EmptyMatrix\n6: \x1b[0;32m[       OK ] \x1b[mMatrix22fTest.EmptyMatrix (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix22fTest.MatrixMultiplication\n6: \x1b[0;32m[       OK ] \x1b[mMatrix22fTest.MatrixMultiplication (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix22fTest.MatrixMultiplicationAndAssign\n6: \x1b[0;32m[       OK ] \x1b[mMatrix22fTest.MatrixMultiplicationAndAssign (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix22fTest.Equality\n6: \x1b[0;32m[       OK ] \x1b[mMatrix22fTest.Equality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix22fTest.UnEquality\n6: \x1b[0;32m[       OK ] \x1b[mMatrix22fTest.UnEquality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix22fTest.SetSingleValues\n6: \x1b[0;32m[       OK ] \x1b[mMatrix22fTest.SetSingleValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix22fTest.SetValues\n6: \x1b[0;32m[       OK ] \x1b[mMatrix22fTest.SetValues (0 ms)\n6: \x1b[0;32m[----------] \x1b[m12 tests from Matrix22fTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m12 tests from Matrix33fTest\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix33fTest.DefaultConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix33fTest.DefaultConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix33fTest.CopyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix33fTest.CopyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix33fTest.ValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix33fTest.ValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix33fTest.VectorConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix33fTest.VectorConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix33fTest.IdentityMatrix\n6: \x1b[0;32m[       OK ] \x1b[mMatrix33fTest.IdentityMatrix (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix33fTest.EmptyMatrix\n6: \x1b[0;32m[       OK ] \x1b[mMatrix33fTest.EmptyMatrix (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix33fTest.MatrixMultiplication\n6: \x1b[0;32m[       OK ] \x1b[mMatrix33fTest.MatrixMultiplication (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix33fTest.MatrixMultiplicationAndAssign\n6: \x1b[0;32m[       OK ] \x1b[mMatrix33fTest.MatrixMultiplicationAndAssign (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix33fTest.Equality\n6: \x1b[0;32m[       OK ] \x1b[mMatrix33fTest.Equality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix33fTest.UnEquality\n6: \x1b[0;32m[       OK ] \x1b[mMatrix33fTest.UnEquality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix33fTest.SetSingleValues\n6: \x1b[0;32m[       OK ] \x1b[mMatrix33fTest.SetSingleValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix33fTest.SetValues\n6: \x1b[0;32m[       OK ] \x1b[mMatrix33fTest.SetValues (0 ms)\n6: \x1b[0;32m[----------] \x1b[m12 tests from Matrix33fTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m24 tests from Matrix44Test\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.DefaultConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.DefaultConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.CopyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.CopyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.ValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.ValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.ValueArrayConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.ValueArrayConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.VectorConstructor\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.VectorConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.IdentityMatrix\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.IdentityMatrix (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.EulerRotationMatrixZYX\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.EulerRotationMatrixZYX (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.EulerRotationXMatrixZYX\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.EulerRotationXMatrixZYX (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.EulerRotationYMatrixZYX\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.EulerRotationYMatrixZYX (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.EulerRotationZMatrixZYX\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.EulerRotationZMatrixZYX (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.EmptyMatrix\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.EmptyMatrix (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.VectorMultiplication\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.VectorMultiplication (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.MatrixMultiplication\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.MatrixMultiplication (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.MatrixMultiplicationAndAssign\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.MatrixMultiplicationAndAssign (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.Equality\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.Equality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.UnEquality\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.UnEquality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.Transpose\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.Transpose (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.SetSingleValues\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.SetSingleValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.SetValues\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.SetValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.AccessByIndex\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.AccessByIndex (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.Determinant\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.Determinant (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.Inverse\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.Inverse (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.GetScalingMatrix\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.GetScalingMatrix (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMatrix44Test.RotateUsingMatrix44ZYX\n6: \x1b[0;32m[       OK ] \x1b[mMatrix44Test.RotateUsingMatrix44ZYX (0 ms)\n6: \x1b[0;32m[----------] \x1b[m24 tests from Matrix44Test (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m12 tests from AProjectionParams\n6: \x1b[0;32m[ RUN      ] \x1b[mAProjectionParams.EqualsToSimilarPerspectiveProjParams\n6: \x1b[0;32m[       OK ] \x1b[mAProjectionParams.EqualsToSimilarPerspectiveProjParams (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAProjectionParams.EqualsToSimilarOrthographicProjParams\n6: \x1b[0;32m[       OK ] \x1b[mAProjectionParams.EqualsToSimilarOrthographicProjParams (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAProjectionParams.PerspectiveDoesNotEqualOrthographicWithSameCalculatedPlaneValues\n6: \x1b[0;32m[       OK ] \x1b[mAProjectionParams.PerspectiveDoesNotEqualOrthographicWithSameCalculatedPlaneValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAProjectionParams.PerspectiveDoesNotEqualOrthographicWithSamePlaneValues\n6: \x1b[0;32m[       OK ] \x1b[mAProjectionParams.PerspectiveDoesNotEqualOrthographicWithSamePlaneValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAProjectionParams.CanBeConstructedFromOrthographicParameters\n6: \x1b[0;32m[       OK ] \x1b[mAProjectionParams.CanBeConstructedFromOrthographicParameters (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAProjectionParams.CanUpdateOrthographicParameters\n6: \x1b[0;32m[       OK ] \x1b[mAProjectionParams.CanUpdateOrthographicParameters (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAProjectionParams.CanBeConstructedFromPerspectiveParameters\n6: \x1b[0;32m[       OK ] \x1b[mAProjectionParams.CanBeConstructedFromPerspectiveParameters (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAProjectionParams.CanUpdateAspectRatioOnPerspectiveProjection\n6: \x1b[0;32m[       OK ] \x1b[mAProjectionParams.CanUpdateAspectRatioOnPerspectiveProjection (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAProjectionParams.CanUpdateFovYOnPerspectiveProjection\n6: \x1b[0;32m[       OK ] \x1b[mAProjectionParams.CanUpdateFovYOnPerspectiveProjection (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAProjectionParams.GetFovYOnNonSymmectricPerspectiveProjection\n6: \x1b[0;32m[       OK ] \x1b[mAProjectionParams.GetFovYOnNonSymmectricPerspectiveProjection (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAProjectionParams.GetAspectRatioOnOrthographicProjection\n6: \x1b[0;32m[       OK ] \x1b[mAProjectionParams.GetAspectRatioOnOrthographicProjection (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAProjectionParams.GetAspectRatioOnUnsymmetricPerspectiveProjection\n6: \x1b[0;32m[       OK ] \x1b[mAProjectionParams.GetAspectRatioOnUnsymmetricPerspectiveProjection (0 ms)\n6: \x1b[0;32m[----------] \x1b[m12 tests from AProjectionParams (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m10 tests from QuadTest\n6: \x1b[0;32m[ RUN      ] \x1b[mQuadTest.CanCreateQuad_DefaultConstructor\n6: \x1b[0;32m[       OK ] \x1b[mQuadTest.CanCreateQuad_DefaultConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mQuadTest.CanCreateQuad_AllParamsSet\n6: \x1b[0;32m[       OK ] \x1b[mQuadTest.CanCreateQuad_AllParamsSet (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mQuadTest.CanCompareQuads\n6: \x1b[0;32m[       OK ] \x1b[mQuadTest.CanCompareQuads (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mQuadTest.CanGetArea\n6: \x1b[0;32m[       OK ] \x1b[mQuadTest.CanGetArea (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mQuadTest.CanGetBoundingQuad_EmptyQuad\n6: \x1b[0;32m[       OK ] \x1b[mQuadTest.CanGetBoundingQuad_EmptyQuad (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mQuadTest.CanGetBoundingQuad_ZeroWidth\n6: \x1b[0;32m[       OK ] \x1b[mQuadTest.CanGetBoundingQuad_ZeroWidth (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mQuadTest.CanGetBoundingQuad_ZeroHeight\n6: \x1b[0;32m[       OK ] \x1b[mQuadTest.CanGetBoundingQuad_ZeroHeight (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mQuadTest.CanGetBoundingQuad_OneInsideOther\n6: \x1b[0;32m[       OK ] \x1b[mQuadTest.CanGetBoundingQuad_OneInsideOther (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mQuadTest.CanGetBoundingQuad_OverlappingQuads\n6: \x1b[0;32m[       OK ] \x1b[mQuadTest.CanGetBoundingQuad_OverlappingQuads (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mQuadTest.CanGetBoundingQuad_NonOverlappingQuads\n6: \x1b[0;32m[       OK ] \x1b[mQuadTest.CanGetBoundingQuad_NonOverlappingQuads (0 ms)\n6: \x1b[0;32m[----------] \x1b[m10 tests from QuadTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m23 tests from Vector2Test\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.DefaultConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.DefaultConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.CopyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.CopyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.ValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.ValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.ScalarValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.ScalarValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.AssignmentOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.AssignmentOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.AddOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.AddOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.AddAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.AddAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.SubOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.SubOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.SubAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.SubAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.MulOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.MulOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.MulFriendOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.MulFriendOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.MulAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.MulAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.MulVector\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.MulVector (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.MulAssignVector\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.MulAssignVector (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.Dot\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.Dot (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.Length\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.Length (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.Angle\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.Angle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.Equality\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.Equality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.UnEquality\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.UnEquality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.Empty\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.Empty (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.SetSingleValues\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.SetSingleValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.SetAllValues\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.SetAllValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2Test.Normalize\n6: \x1b[0;32m[       OK ] \x1b[mVector2Test.Normalize (0 ms)\n6: \x1b[0;32m[----------] \x1b[m23 tests from Vector2Test (1 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m22 tests from Vector2iTest\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.DefaultConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.DefaultConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.CopyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.CopyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.ValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.ValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.ScalarValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.ScalarValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.AssignmentOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.AssignmentOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.AddOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.AddOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.AddAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.AddAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.SubOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.SubOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.SubAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.SubAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.MulOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.MulOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.MulFriendOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.MulFriendOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.MulAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.MulAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.MulVector\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.MulVector (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.MulAssignVector\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.MulAssignVector (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.Dot\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.Dot (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.Length\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.Length (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.Angle\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.Angle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.Equality\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.Equality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.UnEquality\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.UnEquality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.Empty\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.Empty (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.SetSingleValues\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.SetSingleValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector2iTest.SetAllValues\n6: \x1b[0;32m[       OK ] \x1b[mVector2iTest.SetAllValues (0 ms)\n6: \x1b[0;32m[----------] \x1b[m22 tests from Vector2iTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m25 tests from Vector3Test\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.DefaultConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.DefaultConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.CopyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.CopyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.ValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.ValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.ScalarValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.ScalarValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.ConstructorFromvector4\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.ConstructorFromvector4 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.AssignmentOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.AssignmentOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.AddOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.AddOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.AddAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.AddAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.SubOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.SubOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.SubAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.SubAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.MulOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.MulOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.MulFriendOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.MulFriendOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.MulAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.MulAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.MulVector\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.MulVector (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.MulAssignVector\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.MulAssignVector (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.Dot\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.Dot (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.Cross\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.Cross (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.Length\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.Length (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.Angle\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.Angle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.Equality\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.Equality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.UnEquality\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.UnEquality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.Empty\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.Empty (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.SetSingleValues\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.SetSingleValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.SetAllValues\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.SetAllValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3Test.Normalize\n6: \x1b[0;32m[       OK ] \x1b[mVector3Test.Normalize (0 ms)\n6: \x1b[0;32m[----------] \x1b[m25 tests from Vector3Test (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m23 tests from Vector3iTest\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.DefaultConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.DefaultConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.CopyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.CopyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.ValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.ValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.ScalarValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.ScalarValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.AssignmentOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.AssignmentOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.AddOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.AddOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.AddAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.AddAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.SubOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.SubOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.SubAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.SubAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.MulOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.MulOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.MulFriendOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.MulFriendOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.MulAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.MulAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.MulVector\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.MulVector (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.MulAssignVector\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.MulAssignVector (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.Dot\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.Dot (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.Cross\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.Cross (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.Length\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.Length (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.Angle\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.Angle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.Equality\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.Equality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.UnEquality\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.UnEquality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.Empty\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.Empty (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.SetSingleValues\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.SetSingleValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector3iTest.SetAllValues\n6: \x1b[0;32m[       OK ] \x1b[mVector3iTest.SetAllValues (0 ms)\n6: \x1b[0;32m[----------] \x1b[m23 tests from Vector3iTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m25 tests from Vector4Test\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.DefaultConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.DefaultConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.CopyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.CopyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.ValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.ValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.ScalarValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.ScalarValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.AssignmentOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.AssignmentOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.AddOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.AddOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.AddAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.AddAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.SubOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.SubOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.SubAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.SubAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.MulOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.MulOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.DivOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.DivOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.MulFriendOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.MulFriendOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.MulAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.MulAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.MulVector\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.MulVector (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.MulAssignVector\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.MulAssignVector (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.DivAssignVectorByScalar\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.DivAssignVectorByScalar (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.Equality\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.Equality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.UnEquality\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.UnEquality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.Dot\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.Dot (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.Cross\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.Cross (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.Length\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.Length (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.Angle\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.Angle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.Empty\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.Empty (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.SetSingleValues\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.SetSingleValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4Test.SetAllValues\n6: \x1b[0;32m[       OK ] \x1b[mVector4Test.SetAllValues (0 ms)\n6: \x1b[0;32m[----------] \x1b[m25 tests from Vector4Test (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m23 tests from Vector4iTest\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.DefaultConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.DefaultConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.CopyConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.CopyConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.ValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.ValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.ScalarValueConstructor\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.ScalarValueConstructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.AssignmentOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.AssignmentOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.AddOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.AddOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.AddAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.AddAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.SubOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.SubOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.SubAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.SubAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.MulOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.MulOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.MulFriendOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.MulFriendOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.MulAssignOperator\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.MulAssignOperator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.MulVector\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.MulVector (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.MulAssignVector\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.MulAssignVector (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.Equality\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.Equality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.UnEquality\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.UnEquality (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.Dot\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.Dot (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.Cross\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.Cross (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.Length\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.Length (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.Angle\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.Angle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.Empty\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.Empty (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.SetSingleValues\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.SetSingleValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mVector4iTest.SetAllValues\n6: \x1b[0;32m[       OK ] \x1b[mVector4iTest.SetAllValues (0 ms)\n6: \x1b[0;32m[----------] \x1b[m23 tests from Vector4iTest (1 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m3 tests from BinaryFileInputStreamTest\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryFileInputStreamTest.ReadSomeData\n6: \x1b[0;32m[       OK ] \x1b[mBinaryFileInputStreamTest.ReadSomeData (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryFileInputStreamTest.BadFileObj\n6: \x1b[0;32m[       OK ] \x1b[mBinaryFileInputStreamTest.BadFileObj (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryFileInputStreamTest.Matrix44f\n6: \x1b[0;32m[       OK ] \x1b[mBinaryFileInputStreamTest.Matrix44f (0 ms)\n6: \x1b[0;32m[----------] \x1b[m3 tests from BinaryFileInputStreamTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m3 tests from BinaryFileOutputStreamTest\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryFileOutputStreamTest.WriteSomeData\n6: \x1b[0;32m[       OK ] \x1b[mBinaryFileOutputStreamTest.WriteSomeData (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryFileOutputStreamTest.BadFileObj\n6: \x1b[0;32m[       OK ] \x1b[mBinaryFileOutputStreamTest.BadFileObj (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryFileOutputStreamTest.Matrix44f\n6: \x1b[0;32m[       OK ] \x1b[mBinaryFileOutputStreamTest.Matrix44f (0 ms)\n6: \x1b[0;32m[----------] \x1b[m3 tests from BinaryFileOutputStreamTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m15 tests from BinaryInputStreamTest\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.ReadInt32Value\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.ReadInt32Value (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.ReadUInt32Value\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.ReadUInt32Value (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.ReadInt64Value\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.ReadInt64Value (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.ReadUInt64Value\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.ReadUInt64Value (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.ReadUInt16Value\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.ReadUInt16Value (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.ReadStringValue\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.ReadStringValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.ReadEmptyStringValue\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.ReadEmptyStringValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.ReadBoolValue\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.ReadBoolValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.ReadFloatValue\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.ReadFloatValue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.ReadMultipleData\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.ReadMultipleData (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.Matrix44f\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.Matrix44f (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.ReadStronglyTypedEnum\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.ReadStronglyTypedEnum (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.GetReadPosition\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.GetReadPosition (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.CanSkipForward\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.CanSkipForward (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryInputStreamTest.CanSkipBackward\n6: \x1b[0;32m[       OK ] \x1b[mBinaryInputStreamTest.CanSkipBackward (0 ms)\n6: \x1b[0;32m[----------] \x1b[m15 tests from BinaryInputStreamTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m15 tests from BinaryOutputStreamTest\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.Constructor\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.Constructor (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.ConstructorWithCapacity\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.ConstructorWithCapacity (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.InsertUInt16\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.InsertUInt16 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.InsertBool\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.InsertBool (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.InsertInt\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.InsertInt (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.InsertUInt\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.InsertUInt (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.InsertInt64\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.InsertInt64 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.InsertUInt64\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.InsertUInt64 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.InsertFloat\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.InsertFloat (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.InsertGuid\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.InsertGuid (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.InsertMultipleData\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.InsertMultipleData (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.InsertString\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.InsertString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.Matrix44f\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.Matrix44f (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.InserStronglyTypedEnum\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.InserStronglyTypedEnum (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mBinaryOutputStreamTest.Release\n6: \x1b[0;32m[       OK ] \x1b[mBinaryOutputStreamTest.Release (0 ms)\n6: \x1b[0;32m[----------] \x1b[m15 tests from BinaryOutputStreamTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m32 tests from CommandLineParserTest\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.NoArguments\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.NoArguments (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.GetProgramName\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.GetProgramName (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.shortStringArg\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.shortStringArg (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.stripsWhiteSpacesFromArgumentsWithDashPrefix\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.stripsWhiteSpacesFromArgumentsWithDashPrefix (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.doesNotTrimArgumentsWithQuotes\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.doesNotTrimArgumentsWithQuotes (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.LongStringArg\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.LongStringArg (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.BoolSwitchArguments\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.BoolSwitchArguments (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.onlyFileTarget\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.onlyFileTarget (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.fileTargetAtTheEnd\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.fileTargetAtTheEnd (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.multipleFileTargets\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.multipleFileTargets (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.BoolOptionFollowedByFile\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.BoolOptionFollowedByFile (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.BoolOption\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.BoolOption (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.MixedArgumentsAndFileTargets\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.MixedArgumentsAndFileTargets (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.NegativeFloatArguments\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.NegativeFloatArguments (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.IntegerArguments\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.IntegerArguments (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.UInt16Arguments\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.UInt16Arguments (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.UInt32Arguments\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.UInt32Arguments (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.Vec3Arguments\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.Vec3Arguments (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.DelayedParsingArgumentBool\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.DelayedParsingArgumentBool (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.DelayedParsingArgumentString\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.DelayedParsingArgumentString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.DelayedParsingArgumentFloat\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.DelayedParsingArgumentFloat (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.DelayedParsingArgumentInt32\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.DelayedParsingArgumentInt32 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.DelayedParsingArgumentUInt16\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.DelayedParsingArgumentUInt16 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.DelayedParsingArgumentUInt32\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.DelayedParsingArgumentUInt32 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.OptionCanParsedSeveralTimes\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.OptionCanParsedSeveralTimes (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes_DoesNotChangeValueIfNoMoreCanBeFound\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes_DoesNotChangeValueIfNoMoreCanBeFound (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes_BoolOptionIsSetToTrue\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes_BoolOptionIsSetToTrue (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes_WithouMixingOptions\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes_WithouMixingOptions (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes_WithMixingOptions\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes_WithMixingOptions (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes_WithMixingOptions_AccessInDifferentOrder\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes_WithMixingOptions_AccessInDifferentOrder (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes_IgnoresErroneousOptionsWithNoValueSet\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineParserTest.OptionCanBeSetSeveralTimes_IgnoresErroneousOptionsWithNoValueSet (0 ms)\n6: \x1b[0;32m[----------] \x1b[m32 tests from CommandLineParserTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from CommandLineArgumentsTest\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineArgumentsTest.ArgumentProvidesGetHelpStringMethod\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineArgumentsTest.ArgumentProvidesGetHelpStringMethod (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mCommandLineArgumentsTest.ArgumentBoolProvidesGetHelpStringMethod\n6: \x1b[0;32m[       OK ] \x1b[mCommandLineArgumentsTest.ArgumentBoolProvidesGetHelpStringMethod (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from CommandLineArgumentsTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m19 tests from AnImage\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.canGetResolution\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.canGetResolution (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.canSaveAndLoadPNG\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.canSaveAndLoadPNG (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.ReportsTheSumOfAllItsPixels\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.ReportsTheSumOfAllItsPixels (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.CanBeSubtractedFromOtherBitmapWithSameSize\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.CanBeSubtractedFromOtherBitmapWithSameSize (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.YieldsBlackImageWhenSubtractedFromItself\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.YieldsBlackImageWhenSubtractedFromItself (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.GivesEmptyImageIfEnlargingToSmallerSize\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.GivesEmptyImageIfEnlargingToSmallerSize (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.GivesImageCopyIfEnlargingToSameSize\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.GivesImageCopyIfEnlargingToSameSize (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.CreatesEnlargedImageContainingOriginalAndRestFilledWithGivenValue_extendedWidth\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.CreatesEnlargedImageContainingOriginalAndRestFilledWithGivenValue_extendedWidth (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.CreatesEnlargedImageContainingOriginalAndRestFilledWithGivenValue_extendedHeight\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.CreatesEnlargedImageContainingOriginalAndRestFilledWithGivenValue_extendedHeight (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.CreatesEnlargedImageContainingOriginalAndRestFilledWithGivenValue_extendedWidthAndHeight\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.CreatesEnlargedImageContainingOriginalAndRestFilledWithGivenValue_extendedWidthAndHeight (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.CopyConstructedBitmapIsSame\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.CopyConstructedBitmapIsSame (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.AssignedBitmapIsSame\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.AssignedBitmapIsSame (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.MoveAssignedBitmapIsSame\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.MoveAssignedBitmapIsSame (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.UnequalSizeBitmapsAreDifferent\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.UnequalSizeBitmapsAreDifferent (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.FlipsImage2x1\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.FlipsImage2x1 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.FlipsImage2x2\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.FlipsImage2x2 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.FlipsImage2x3\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.FlipsImage2x3 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.FlipsImage4x4\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.FlipsImage4x4 (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAnImage.getsNumOfNonBlackPixels\n6: \x1b[0;32m[       OK ] \x1b[mAnImage.getsNumOfNonBlackPixels (0 ms)\n6: \x1b[0;32m[----------] \x1b[m19 tests from AnImage (1 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m8 tests from AInplaceStringTokenizer\n6: \x1b[0;32m[ RUN      ] \x1b[mAInplaceStringTokenizer.CanHandleEmptyString\n6: \x1b[0;32m[       OK ] \x1b[mAInplaceStringTokenizer.CanHandleEmptyString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAInplaceStringTokenizer.ReturnsOneStringWhenFits\n6: \x1b[0;32m[       OK ] \x1b[mAInplaceStringTokenizer.ReturnsOneStringWhenFits (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAInplaceStringTokenizer.SplitsBasedOnLengthOnly\n6: \x1b[0;32m[       OK ] \x1b[mAInplaceStringTokenizer.SplitsBasedOnLengthOnly (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAInplaceStringTokenizer.SplitsBasedOnLengthWhenLastExactlyFits\n6: \x1b[0;32m[       OK ] \x1b[mAInplaceStringTokenizer.SplitsBasedOnLengthWhenLastExactlyFits (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAInplaceStringTokenizer.SplitsBasedOnSeparator\n6: \x1b[0;32m[       OK ] \x1b[mAInplaceStringTokenizer.SplitsBasedOnSeparator (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAInplaceStringTokenizer.SplitsBasedOnSeparatorWhenLastExactlyFits\n6: \x1b[0;32m[       OK ] \x1b[mAInplaceStringTokenizer.SplitsBasedOnSeparatorWhenLastExactlyFits (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAInplaceStringTokenizer.SkipsSeparatorInLastPosition\n6: \x1b[0;32m[       OK ] \x1b[mAInplaceStringTokenizer.SkipsSeparatorInLastPosition (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAInplaceStringTokenizer.SplitsOnMixedLengthAndSeparator\n6: \x1b[0;32m[       OK ] \x1b[mAInplaceStringTokenizer.SplitsOnMixedLengthAndSeparator (0 ms)\n6: \x1b[0;32m[----------] \x1b[m8 tests from AInplaceStringTokenizer (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m4 tests from ALogHelper_StringToLogLevel\n6: \x1b[0;32m[ RUN      ] \x1b[mALogHelper_StringToLogLevel.GivesCorrectLevels\n6: \x1b[0;32m[       OK ] \x1b[mALogHelper_StringToLogLevel.GivesCorrectLevels (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mALogHelper_StringToLogLevel.IgnoresCase\n6: \x1b[0;32m[       OK ] \x1b[mALogHelper_StringToLogLevel.IgnoresCase (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mALogHelper_StringToLogLevel.TrimsString\n6: \x1b[0;32m[       OK ] \x1b[mALogHelper_StringToLogLevel.TrimsString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mALogHelper_StringToLogLevel.ReturnFalseOnInvalidLogLevels\n6: \x1b[0;32m[       OK ] \x1b[mALogHelper_StringToLogLevel.ReturnFalseOnInvalidLogLevels (0 ms)\n6: \x1b[0;32m[----------] \x1b[m4 tests from ALogHelper_StringToLogLevel (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m6 tests from ALogHelper_ParseContextFilters\n6: \x1b[0;32m[ RUN      ] \x1b[mALogHelper_ParseContextFilters.canExtractSingleCommandCorrectly\n6: \x1b[0;32m[       OK ] \x1b[mALogHelper_ParseContextFilters.canExtractSingleCommandCorrectly (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mALogHelper_ParseContextFilters.canExtractMultipleCommandsCorrectly\n6: \x1b[0;32m[       OK ] \x1b[mALogHelper_ParseContextFilters.canExtractMultipleCommandsCorrectly (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mALogHelper_ParseContextFilters.canHandleDescriptiveLoglevelNames\n6: \x1b[0;32m[       OK ] \x1b[mALogHelper_ParseContextFilters.canHandleDescriptiveLoglevelNames (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mALogHelper_ParseContextFilters.skipsUnknownLogLevelStrings\n6: \x1b[0;32m[       OK ] \x1b[mALogHelper_ParseContextFilters.skipsUnknownLogLevelStrings (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mALogHelper_ParseContextFilters.canExtractCommandCorrectlyWhenPassedZeroString\n6: \x1b[0;32m[       OK ] \x1b[mALogHelper_ParseContextFilters.canExtractCommandCorrectlyWhenPassedZeroString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mALogHelper_ParseContextFilters.canExtractCommandCorrectlyWhenPassedCurruptString\n6: \x1b[0;32m[       OK ] \x1b[mALogHelper_ParseContextFilters.canExtractCommandCorrectlyWhenPassedCurruptString (0 ms)\n6: \x1b[0;32m[----------] \x1b[m6 tests from ALogHelper_ParseContextFilters (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from ALogHelper_GetLoglevelFromInt\n6: \x1b[0;32m[ RUN      ] \x1b[mALogHelper_GetLoglevelFromInt.WorksForAllDirectlyMappableValues\n6: \x1b[0;32m[       OK ] \x1b[mALogHelper_GetLoglevelFromInt.WorksForAllDirectlyMappableValues (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mALogHelper_GetLoglevelFromInt.ReturnsTraceForAllUnknownValues\n6: \x1b[0;32m[       OK ] \x1b[mALogHelper_GetLoglevelFromInt.ReturnsTraceForAllUnknownValues (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from ALogHelper_GetLoglevelFromInt (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m10 tests from AMemoryPoolExplicit/0, where TypeParam = ramses_internal::MemoryPoolExplicit<ramses_internal::ComparableObject, unsigned int>\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/0.HasInitialSize\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/0.HasInitialSize (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/0.ReportsUnallocatedObject\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/0.ReportsUnallocatedObject (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/0.AllocatedObjectIsReportedToBeAllocated\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/0.AllocatedObjectIsReportedToBeAllocated (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/0.AllocatingSpecificHandlesResultsInSameValidHandle\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/0.AllocatingSpecificHandlesResultsInSameValidHandle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/0.AllocationWithSkippingHandlesResultsInUnallocatedHandlesInBetween\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/0.AllocationWithSkippingHandlesResultsInUnallocatedHandlesInBetween (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/0.DoesNotAffectOtherObjectsWhenDeletingObject\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/0.DoesNotAffectOtherObjectsWhenDeletingObject (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/0.AllocateUsingSpecificHandle\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/0.AllocateUsingSpecificHandle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/0.CanAllocateFullCapacity\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/0.CanAllocateFullCapacity (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/0.preallocatesMemory\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/0.preallocatesMemory (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/0.neverShrinksOnPreallocation\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/0.neverShrinksOnPreallocation (0 ms)\n6: \x1b[0;32m[----------] \x1b[m10 tests from AMemoryPoolExplicit/0 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m10 tests from AMemoryPoolExplicit/1, where TypeParam = ramses_internal::MemoryPoolExplicit<ramses_internal::ComparableObject, unsigned short>\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/1.HasInitialSize\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/1.HasInitialSize (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/1.ReportsUnallocatedObject\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/1.ReportsUnallocatedObject (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/1.AllocatedObjectIsReportedToBeAllocated\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/1.AllocatedObjectIsReportedToBeAllocated (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/1.AllocatingSpecificHandlesResultsInSameValidHandle\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/1.AllocatingSpecificHandlesResultsInSameValidHandle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/1.AllocationWithSkippingHandlesResultsInUnallocatedHandlesInBetween\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/1.AllocationWithSkippingHandlesResultsInUnallocatedHandlesInBetween (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/1.DoesNotAffectOtherObjectsWhenDeletingObject\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/1.DoesNotAffectOtherObjectsWhenDeletingObject (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/1.AllocateUsingSpecificHandle\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/1.AllocateUsingSpecificHandle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/1.CanAllocateFullCapacity\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/1.CanAllocateFullCapacity (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/1.preallocatesMemory\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/1.preallocatesMemory (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPoolExplicit/1.neverShrinksOnPreallocation\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPoolExplicit/1.neverShrinksOnPreallocation (0 ms)\n6: \x1b[0;32m[----------] \x1b[m10 tests from AMemoryPoolExplicit/1 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m13 tests from AMemoryPool/0, where TypeParam = ramses_internal::MemoryPool<ramses_internal::ComparableObject, unsigned int>\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.HasInitialSizes\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.HasInitialSizes (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.UnexistingObjectIsNotAllocated\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.UnexistingObjectIsNotAllocated (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.AllocatedObjectIsReportedToBeAllocated\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.AllocatedObjectIsReportedToBeAllocated (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.AllocatingSpecificHandlesResultsInSameValidHandle\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.AllocatingSpecificHandlesResultsInSameValidHandle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.AllocationWithSkippingHandlesResultsInUnallocatedHandlesInBetween\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.AllocationWithSkippingHandlesResultsInUnallocatedHandlesInBetween (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.ReducesActualObjectCountByOneAfterDeletion\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.ReducesActualObjectCountByOneAfterDeletion (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.DoesNotAffectOtherObjectsWhenDeletingObject\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.DoesNotAffectOtherObjectsWhenDeletingObject (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.AllocateUsingSpecificHandle\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.AllocateUsingSpecificHandle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.AllocateUsingSpecificHandleBeyondCapacity\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.AllocateUsingSpecificHandleBeyondCapacity (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.AllocatingFullInitialCapacityDoesNotChangeCapacity\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.AllocatingFullInitialCapacityDoesNotChangeCapacity (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.preallocatesMemory\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.preallocatesMemory (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.neverShrinksOnPreallocation\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.neverShrinksOnPreallocation (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/0.neverChangesAllocatedCountOnPreallocation\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/0.neverChangesAllocatedCountOnPreallocation (0 ms)\n6: \x1b[0;32m[----------] \x1b[m13 tests from AMemoryPool/0 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m13 tests from AMemoryPool/1, where TypeParam = ramses_internal::MemoryPool<ramses_internal::ComparableObject, unsigned short>\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.HasInitialSizes\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.HasInitialSizes (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.UnexistingObjectIsNotAllocated\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.UnexistingObjectIsNotAllocated (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.AllocatedObjectIsReportedToBeAllocated\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.AllocatedObjectIsReportedToBeAllocated (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.AllocatingSpecificHandlesResultsInSameValidHandle\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.AllocatingSpecificHandlesResultsInSameValidHandle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.AllocationWithSkippingHandlesResultsInUnallocatedHandlesInBetween\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.AllocationWithSkippingHandlesResultsInUnallocatedHandlesInBetween (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.ReducesActualObjectCountByOneAfterDeletion\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.ReducesActualObjectCountByOneAfterDeletion (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.DoesNotAffectOtherObjectsWhenDeletingObject\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.DoesNotAffectOtherObjectsWhenDeletingObject (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.AllocateUsingSpecificHandle\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.AllocateUsingSpecificHandle (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.AllocateUsingSpecificHandleBeyondCapacity\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.AllocateUsingSpecificHandleBeyondCapacity (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.AllocatingFullInitialCapacityDoesNotChangeCapacity\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.AllocatingFullInitialCapacityDoesNotChangeCapacity (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.preallocatesMemory\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.preallocatesMemory (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.neverShrinksOnPreallocation\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.neverShrinksOnPreallocation (1 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mAMemoryPool/1.neverChangesAllocatedCountOnPreallocation\n6: \x1b[0;32m[       OK ] \x1b[mAMemoryPool/1.neverChangesAllocatedCountOnPreallocation (0 ms)\n6: \x1b[0;32m[----------] \x1b[m13 tests from AMemoryPool/1 (1 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m6 tests from MessagePoolTest\n6: \x1b[0;32m[ RUN      ] \x1b[mMessagePoolTest.getSuccessMsg\n6: \x1b[0;32m[       OK ] \x1b[mMessagePoolTest.getSuccessMsg (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMessagePoolTest.getInvalidMsg\n6: \x1b[0;32m[       OK ] \x1b[mMessagePoolTest.getInvalidMsg (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMessagePoolTest.addMessage\n6: \x1b[0;32m[       OK ] \x1b[mMessagePoolTest.addMessage (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMessagePoolTest.fillCache\n6: \x1b[0;32m[       OK ] \x1b[mMessagePoolTest.fillCache (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMessagePoolTest.floodCache\n6: \x1b[0;32m[       OK ] \x1b[mMessagePoolTest.floodCache (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mMessagePoolTest.tooOldEntryGivesUnknownMessage\n6: \x1b[0;32m[       OK ] \x1b[mMessagePoolTest.tooOldEntryGivesUnknownMessage (0 ms)\n6: \x1b[0;32m[----------] \x1b[m6 tests from MessagePoolTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/0, where TypeParam = unsigned short\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/0.WriteAndCheckSingleElement\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/0.WriteAndCheckSingleElement (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/0.WriteAndCheckMultipleElements\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/0.WriteAndCheckMultipleElements (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/0 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/1, where TypeParam = int\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/1.WriteAndCheckSingleElement\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/1.WriteAndCheckSingleElement (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/1.WriteAndCheckMultipleElements\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/1.WriteAndCheckMultipleElements (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/1 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/2, where TypeParam = unsigned int\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/2.WriteAndCheckSingleElement\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/2.WriteAndCheckSingleElement (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/2.WriteAndCheckMultipleElements\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/2.WriteAndCheckMultipleElements (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/2 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/3, where TypeParam = long\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/3.WriteAndCheckSingleElement\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/3.WriteAndCheckSingleElement (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/3.WriteAndCheckMultipleElements\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/3.WriteAndCheckMultipleElements (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/3 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/4, where TypeParam = unsigned long\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/4.WriteAndCheckSingleElement\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/4.WriteAndCheckSingleElement (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/4.WriteAndCheckMultipleElements\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/4.WriteAndCheckMultipleElements (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/4 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/5, where TypeParam = float\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/5.WriteAndCheckSingleElement\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/5.WriteAndCheckSingleElement (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/5.WriteAndCheckMultipleElements\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/5.WriteAndCheckMultipleElements (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/5 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/6, where TypeParam = bool\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/6.WriteAndCheckSingleElement\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/6.WriteAndCheckSingleElement (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/6.WriteAndCheckMultipleElements\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/6.WriteAndCheckMultipleElements (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/6 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/7, where TypeParam = ramses_internal::Matrix44f\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/7.WriteAndCheckSingleElement\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/7.WriteAndCheckSingleElement (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/7.WriteAndCheckMultipleElements\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/7.WriteAndCheckMultipleElements (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/7 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/8, where TypeParam = ramses_internal::ResourceContentHash\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/8.WriteAndCheckSingleElement\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/8.WriteAndCheckSingleElement (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamBaseTypesTest/8.WriteAndCheckMultipleElements\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamBaseTypesTest/8.WriteAndCheckMultipleElements (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamBaseTypesTest/8 (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamComplexTypesTest\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamComplexTypesTest.WriteAndCheckString\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamComplexTypesTest.WriteAndCheckString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mRawBinaryOutputStreamComplexTypesTest.WriteAndCheckBuffer\n6: \x1b[0;32m[       OK ] \x1b[mRawBinaryOutputStreamComplexTypesTest.WriteAndCheckBuffer (0 ms)\n6: \x1b[0;32m[----------] \x1b[m2 tests from RawBinaryOutputStreamComplexTypesTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m7 tests from StatisticCollectionTest\n6: \x1b[0;32m[ RUN      ] \x1b[mStatisticCollectionTest.canUpdateCounter\n6: \x1b[0;32m[       OK ] \x1b[mStatisticCollectionTest.canUpdateCounter (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mStatisticCollectionTest.nextTimeIntervalResetsCounter\n6: \x1b[0;32m[       OK ] \x1b[mStatisticCollectionTest.nextTimeIntervalResetsCounter (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mStatisticCollectionTest.collectsMinValueOfMultipleTimeframes\n6: \x1b[0;32m[       OK ] \x1b[mStatisticCollectionTest.collectsMinValueOfMultipleTimeframes (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mStatisticCollectionTest.collectsMaxValueOfMultipleTimeframes\n6: \x1b[0;32m[       OK ] \x1b[mStatisticCollectionTest.collectsMaxValueOfMultipleTimeframes (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mStatisticCollectionTest.collectsSumValueOfMultipleTimeframes\n6: \x1b[0;32m[       OK ] \x1b[mStatisticCollectionTest.collectsSumValueOfMultipleTimeframes (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mStatisticCollectionTest.reset\n6: \x1b[0;32m[       OK ] \x1b[mStatisticCollectionTest.reset (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mStatisticCollectionTest.resetSummaries\n6: \x1b[0;32m[       OK ] \x1b[mStatisticCollectionTest.resetSummaries (0 ms)\n6: \x1b[0;32m[----------] \x1b[m7 tests from StatisticCollectionTest (0 ms total)\n6: \n6: \x1b[0;32m[----------] \x1b[m7 tests from StringUtilsTest\n6: \x1b[0;32m[ RUN      ] \x1b[mStringUtilsTest.trimString\n6: \x1b[0;32m[       OK ] \x1b[mStringUtilsTest.trimString (0 ms)\n6: \x1b[0;32m[ RUN      ] \x1b[mStringUtilsTest.tokenizeStringToSet\n'
None
<?xml version="1.0" encoding="UTF-8"?>
<testsuites tests="2440" failures="0" disabled="2" errors="0" timestamp="2020-04-28T17:30:27" time="11.113" name="AllTests">
  <testsuite name="AAppearanceTest" tests="54" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="getsTheSameEffectUsedToCreateIt" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="setGetBlendingFactors" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="setGetDepthWrite" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="setGetDepthFunction" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="setGetScissorTest" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="setGetStencilFunc" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="setGetStencilOperation" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="setGetBlendOperations" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="setGetCullMode" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="setGetDrawMode" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="setGetColorWriteMask" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="reportsErrorWhenGetSetMismatchingInputTypeScalar" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="reportsErrorWhenGetSetMismatchingInputTypeArray" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="reportsErrorWhenGetSetMismatchingInputTypeTexture" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="reportsErrorWhenSetInputTextureFromADifferentScene" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="getsSamplerSetToUniformInput" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="getsNullSamplerIfNoneSetToUniformInput" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="failsToGetSamplerSetToUniformIfInputHasWrongType" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeInt32" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeInt32Array" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeFloat" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeFloatArray" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeVector2i" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeVector2iArray" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeVector3i" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeVector3iArray" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeVector4i" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeVector4iArray" status="run" time="0.001" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeVector2f" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeVector2fArray" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeVector3f" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeVector3fArray" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeVector4f" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeVector4fArray" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeMatrix22f" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeMatrix22fArray" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeMatrix33f" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeMatrix33fArray" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeMatrix44f" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeMatrix44fArray" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeTexture2D" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canHandleUniformInputsOfTypeTextureCube" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="uniformInputIsNotBoundInitially" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="canBindDataObjectToUniformInput" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="failsToSetOrGetValueIfInputBound" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="failsToBindDataObjectToArrayUniformInput" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="failsToBindDataObjectFromADifferentScene" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="failsToBindDataObjectOfMismatchingType" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="unbindingDataObjectFallsBackToPreviouslySetValue" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="failsToUnbindIfInputIsNotBound" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidTextureSampler" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidTexture" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="reportsErrorWhenValidatedWithBoundDataObjectThatWasDestroyed" status="run" time="0" classname="AAppearanceTest" />
    <testcase name="failsWhenWrongBlendingOperationsSet" status="run" time="0" classname="AAppearanceTest" />
  </testsuite>
  <testsuite name="AAppearanceTestWithSemanticUniforms" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="failsToBindDataObjectIfInputHasSemantics" status="run" time="0" classname="AAppearanceTestWithSemanticUniforms" />
  </testsuite>
  <testsuite name="ABlitPass" tests="7" failures="0" disabled="0" errors="0" time="0.037">
    <testcase name="CanGetSourceAndDestinationBuffers" status="run" time="0.005" classname="ABlitPass" />
    <testcase name="BlittingRegionIsSetToCompleteBufferByDefault" status="run" time="0.006" classname="ABlitPass" />
    <testcase name="CanSetAndGetBlittingRegions" status="run" time="0.005" classname="ABlitPass" />
    <testcase name="CannotSetInvalidBlittingRegion" status="run" time="0.005" classname="ABlitPass" />
    <testcase name="canValidate" status="run" time="0.005" classname="ABlitPass" />
    <testcase name="failsValidationIfSourceRenderBufferGetsDestroyed" status="run" time="0.006" classname="ABlitPass" />
    <testcase name="failsValidationIfDestinationRenderBufferGetsDestroyed" status="run" time="0.005" classname="ABlitPass" />
  </testsuite>
  <testsuite name="ACamera/0" tests="21" failures="0" disabled="0" errors="0" time="0.112">
    <testcase name="hasDefaultParams" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="reportsErrorWhenValidatingInitialState" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="canSetItsViewport" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="ACamera/0" />
    <testcase name="validatesWhenAllParamsSet" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="reportsErrorIfTryingToRetrieveProjectionMatrixWithoutBeingInitialized" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="canSetFrustum" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="failsToSetFrustumIfInvalid" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="ACamera/0" />
    <testcase name="failsToSetViewportIfInvalid" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="returnsProjectionMatrix" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="viewportDataNotBoundInitially" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="canBindViewportData" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="ACamera/0" />
    <testcase name="canUnbindViewportData" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="getsReferencedViewportValuesWhenBound" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="getsCorrectViewportValuesWhenBoundFromOneDataObjectToAnother" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="getsReferencedViewportValuesWhenBound_alsoWhenChangedInDataObject" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="canBindDataToTwoCamerasViewports" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="ACamera/0" />
    <testcase name="getsOriginalViewportValuesWhenUnbound" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="viewportValueSetIfBoundOnlyAffectsOriginalValueThatBecomesActiveAfterUnbound" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="doesNotReportValidationErrorWhenViewportNotInitializedButBoundToValidData" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="ACamera/0" />
    <testcase name="reportsValidationErrorWhenViewportNotInitializedAndBoundToValidDataButUnboundAfterwards" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
    <testcase name="reportsValidationErrorWhenViewportNotInitializedAndBoundToInvalidData" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ACamera/0" />
  </testsuite>
  <testsuite name="ACamera/1" tests="21" failures="0" disabled="0" errors="0" time="0.111">
    <testcase name="hasDefaultParams" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="reportsErrorWhenValidatingInitialState" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="canSetItsViewport" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="ACamera/1" />
    <testcase name="validatesWhenAllParamsSet" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="reportsErrorIfTryingToRetrieveProjectionMatrixWithoutBeingInitialized" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="canSetFrustum" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="failsToSetFrustumIfInvalid" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="failsToSetViewportIfInvalid" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="returnsProjectionMatrix" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="viewportDataNotBoundInitially" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="ACamera/1" />
    <testcase name="canBindViewportData" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="canUnbindViewportData" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="getsReferencedViewportValuesWhenBound" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="ACamera/1" />
    <testcase name="getsCorrectViewportValuesWhenBoundFromOneDataObjectToAnother" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="getsReferencedViewportValuesWhenBound_alsoWhenChangedInDataObject" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="canBindDataToTwoCamerasViewports" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="ACamera/1" />
    <testcase name="getsOriginalViewportValuesWhenUnbound" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="viewportValueSetIfBoundOnlyAffectsOriginalValueThatBecomesActiveAfterUnbound" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="doesNotReportValidationErrorWhenViewportNotInitializedButBoundToValidData" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="ACamera/1" />
    <testcase name="reportsValidationErrorWhenViewportNotInitializedAndBoundToValidDataButUnboundAfterwards" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
    <testcase name="reportsValidationErrorWhenViewportNotInitializedAndBoundToInvalidData" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ACamera/1" />
  </testsuite>
  <testsuite name="APerspectiveCamera" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="canSetFrustum" status="run" time="0.006" classname="APerspectiveCamera" />
    <testcase name="failsToSetFrustumIfInvalid" status="run" time="0.005" classname="APerspectiveCamera" />
  </testsuite>
  <testsuite name="AClientApplicationLogic" tests="10" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="sceneDistributionIsDisabledInitially" status="run" time="0" classname="AClientApplicationLogic" />
    <testcase name="canEnableLocalOnlySceneDistribution" status="run" time="0" classname="AClientApplicationLogic" />
    <testcase name="canEnableSceneDistribution" status="run" time="0" classname="AClientApplicationLogic" />
    <testcase name="canDisableLocalOnlySceneDistribution" status="run" time="0" classname="AClientApplicationLogic" />
    <testcase name="canDisableSceneDistribution" status="run" time="0" classname="AClientApplicationLogic" />
    <testcase name="forwardsAddingOfResourceFileToResourceComponent" status="run" time="0" classname="AClientApplicationLogic" />
    <testcase name="triesToGetRequestedResourceFromResourceComponent" status="run" time="0" classname="AClientApplicationLogic" />
    <testcase name="triesToGetHashUsageFromResourceComponent" status="run" time="0" classname="AClientApplicationLogic" />
    <testcase name="triesToGetResourcesFromResourceComponent" status="run" time="0" classname="AClientApplicationLogic" />
    <testcase name="addsAndRemovesResourceFilesFromComponent" status="run" time="0" classname="AClientApplicationLogic" />
  </testsuite>
  <testsuite name="ClientPersistationTest/0" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="canReadWriteResources" type_param="ramses::FloatArray" status="run" time="0.005" classname="ClientPersistationTest/0" />
    <testcase name="canReadWriteResourcesWithMultipleFiles" type_param="ramses::FloatArray" status="run" time="0.006" classname="ClientPersistationTest/0" />
  </testsuite>
  <testsuite name="ClientPersistationTest/1" tests="2" failures="0" disabled="0" errors="0" time="0.012">
    <testcase name="canReadWriteResources" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="ClientPersistationTest/1" />
    <testcase name="canReadWriteResourcesWithMultipleFiles" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="ClientPersistationTest/1" />
  </testsuite>
  <testsuite name="ClientPersistationTest/2" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="canReadWriteResources" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="ClientPersistationTest/2" />
    <testcase name="canReadWriteResourcesWithMultipleFiles" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="ClientPersistationTest/2" />
  </testsuite>
  <testsuite name="ClientPersistationTest/3" tests="2" failures="0" disabled="0" errors="0" time="0.012">
    <testcase name="canReadWriteResources" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="ClientPersistationTest/3" />
    <testcase name="canReadWriteResourcesWithMultipleFiles" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="ClientPersistationTest/3" />
  </testsuite>
  <testsuite name="ClientPersistationTest/4" tests="2" failures="0" disabled="0" errors="0" time="0.012">
    <testcase name="canReadWriteResources" type_param="ramses::Texture2D" status="run" time="0.006" classname="ClientPersistationTest/4" />
    <testcase name="canReadWriteResourcesWithMultipleFiles" type_param="ramses::Texture2D" status="run" time="0.006" classname="ClientPersistationTest/4" />
  </testsuite>
  <testsuite name="ClientPersistationTest/5" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="canReadWriteResources" type_param="ramses::Texture3D" status="run" time="0.006" classname="ClientPersistationTest/5" />
    <testcase name="canReadWriteResourcesWithMultipleFiles" type_param="ramses::Texture3D" status="run" time="0.005" classname="ClientPersistationTest/5" />
  </testsuite>
  <testsuite name="ClientPersistationTest/6" tests="2" failures="0" disabled="0" errors="0" time="0.012">
    <testcase name="canReadWriteResources" type_param="ramses::TextureCube" status="run" time="0.006" classname="ClientPersistationTest/6" />
    <testcase name="canReadWriteResourcesWithMultipleFiles" type_param="ramses::TextureCube" status="run" time="0.006" classname="ClientPersistationTest/6" />
  </testsuite>
  <testsuite name="ClientPersistationTest/7" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="canReadWriteResources" type_param="ramses::UInt16Array" status="run" time="0.006" classname="ClientPersistationTest/7" />
    <testcase name="canReadWriteResourcesWithMultipleFiles" type_param="ramses::UInt16Array" status="run" time="0.005" classname="ClientPersistationTest/7" />
  </testsuite>
  <testsuite name="ClientPersistationTest/8" tests="2" failures="0" disabled="0" errors="0" time="0.012">
    <testcase name="canReadWriteResources" type_param="ramses::UInt32Array" status="run" time="0.006" classname="ClientPersistationTest/8" />
    <testcase name="canReadWriteResourcesWithMultipleFiles" type_param="ramses::UInt32Array" status="run" time="0.006" classname="ClientPersistationTest/8" />
  </testsuite>
  <testsuite name="ClientPersistationTest/9" tests="2" failures="0" disabled="0" errors="0" time="0.016">
    <testcase name="canReadWriteResources" type_param="ramses::Effect" status="run" time="0.006" classname="ClientPersistationTest/9" />
    <testcase name="canReadWriteResourcesWithMultipleFiles" type_param="ramses::Effect" status="run" time="0.009" classname="ClientPersistationTest/9" />
  </testsuite>
  <testsuite name="ClientPersistation" tests="20" failures="0" disabled="0" errors="0" time="0.144">
    <testcase name="canReadSameResourceMultipleTimes" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="canReadWriteIndexArray16" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="canReadWriteTexture2D" status="run" time="0.005" classname="ClientPersistation" />
    <testcase name="canReadWriteTexture2DwithNonDefaultSwizzle" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="canReadWriteTexture3D" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="canReadWriteTextureCube" status="run" time="0.005" classname="ClientPersistation" />
    <testcase name="canReadWriteEffect" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="canLoadFromEffectFileAndSaveOutDirectly" status="run" time="0.007" classname="ClientPersistation" />
    <testcase name="canReadWriteIndexArray32" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="saveResourcesToFile_InvalidFilename" status="run" time="0.005" classname="ClientPersistation" />
    <testcase name="saveResourcesToFile_NoFilename" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="saveResourcesToFile_FileExists" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="loadResourcesFromFile_InvalidFilename" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="loadResourcesFromFile_NoFilename" status="run" time="0.005" classname="ClientPersistation" />
    <testcase name="loadResourcesFromFile_NonexistantFilename" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="storesRamsesVersionToSceneFile" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="shareResourcesBetweenScenes" status="run" time="0.009" classname="ClientPersistation" />
    <testcase name="compressedFileIsSmallerThanUncompressed" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="compressedFileIsSmallerThanUncompressedWhenUsingSaveSceneToFile" status="run" time="0.006" classname="ClientPersistation" />
    <testcase name="savedFilesAreConsistent" status="run" time="0.029" classname="ClientPersistation" />
  </testsuite>
  <testsuite name="ADataBuffer/0" tests="13" failures="0" disabled="0" errors="0" time="0.072">
    <testcase name="IsAllocatedOnInternalSceneAfterCreation" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="ADataBuffer/0" />
    <testcase name="PropagatesDataChangesToInternalScene" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="ADataBuffer/0" />
    <testcase name="CanNotBeUpdatedWhenDataSizeBiggerThanMaximumSize" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="ADataBuffer/0" />
    <testcase name="CanNotBeUpdatdWhenDataSizeAndOffsetBiggerThanMaximumSize" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="ADataBuffer/0" />
    <testcase name="CanBeValidated" type_param="ramses::IndexDataBuffer" status="run" time="0.007" classname="ADataBuffer/0" />
    <testcase name="IsValidIfNotUsedByAnyMeshButUsedByPickableObject" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="ADataBuffer/0" />
    <testcase name="ReportsWarningIfNotUsedInGeometry" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="ADataBuffer/0" />
    <testcase name="ReportsWarningIfUsedInGeometryButNotInitialized" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="ADataBuffer/0" />
    <testcase name="CanGetDataType" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="ADataBuffer/0" />
    <testcase name="CanGetMaximumSize" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="ADataBuffer/0" />
    <testcase name="CanGetUsedSize" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="ADataBuffer/0" />
    <testcase name="CanGetData" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="ADataBuffer/0" />
    <testcase name="CanGetPartialData" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="ADataBuffer/0" />
  </testsuite>
  <testsuite name="ADataBuffer/1" tests="13" failures="0" disabled="0" errors="0" time="0.072">
    <testcase name="IsAllocatedOnInternalSceneAfterCreation" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="ADataBuffer/1" />
    <testcase name="PropagatesDataChangesToInternalScene" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="ADataBuffer/1" />
    <testcase name="CanNotBeUpdatedWhenDataSizeBiggerThanMaximumSize" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="ADataBuffer/1" />
    <testcase name="CanNotBeUpdatdWhenDataSizeAndOffsetBiggerThanMaximumSize" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="ADataBuffer/1" />
    <testcase name="CanBeValidated" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="ADataBuffer/1" />
    <testcase name="IsValidIfNotUsedByAnyMeshButUsedByPickableObject" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="ADataBuffer/1" />
    <testcase name="ReportsWarningIfNotUsedInGeometry" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="ADataBuffer/1" />
    <testcase name="ReportsWarningIfUsedInGeometryButNotInitialized" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="ADataBuffer/1" />
    <testcase name="CanGetDataType" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="ADataBuffer/1" />
    <testcase name="CanGetMaximumSize" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="ADataBuffer/1" />
    <testcase name="CanGetUsedSize" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="ADataBuffer/1" />
    <testcase name="CanGetData" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="ADataBuffer/1" />
    <testcase name="CanGetPartialData" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="ADataBuffer/1" />
  </testsuite>
  <testsuite name="ADataObject" tests="33" failures="0" disabled="0" errors="0" time="0.183">
    <testcase name="isInitializedOnCreationOfDataFloat" status="run" time="0.006" classname="ADataObject" />
    <testcase name="canSetAndGetAFloatValue" status="run" time="0.005" classname="ADataObject" />
    <testcase name="canConvertDataFloatToDataObjectAndBack" status="run" time="0.006" classname="ADataObject" />
    <testcase name="isInitializedOnCreationOfDataVector2f" status="run" time="0.005" classname="ADataObject" />
    <testcase name="canSetAndGetAVector2fValue" status="run" time="0.006" classname="ADataObject" />
    <testcase name="canConvertDataVector2fToDataObjectAndBack" status="run" time="0.005" classname="ADataObject" />
    <testcase name="isInitializedOnCreationOfDataVector3f" status="run" time="0.006" classname="ADataObject" />
    <testcase name="canSetAndGetAVector3fValue" status="run" time="0.005" classname="ADataObject" />
    <testcase name="canConvertDataVector3fToDataObjectAndBack" status="run" time="0.006" classname="ADataObject" />
    <testcase name="isInitializedOnCreationOfDataVector4f" status="run" time="0.006" classname="ADataObject" />
    <testcase name="canSetAndGetAVector4fValue" status="run" time="0.005" classname="ADataObject" />
    <testcase name="canConvertDataVector4fToDataObjectAndBack" status="run" time="0.006" classname="ADataObject" />
    <testcase name="isInitializedOnCreationOfDataMatrix22f" status="run" time="0.005" classname="ADataObject" />
    <testcase name="canSetAndGetAMatrix22fValue" status="run" time="0.006" classname="ADataObject" />
    <testcase name="canConvertDataMatrix22fToDataObjectAndBack" status="run" time="0.005" classname="ADataObject" />
    <testcase name="isInitializedOnCreationOfDataMatrix33f" status="run" time="0.006" classname="ADataObject" />
    <testcase name="canSetAndGetAMatrix33fValue" status="run" time="0.005" classname="ADataObject" />
    <testcase name="canConvertDataMatrix33fToDataObjectAndBack" status="run" time="0.006" classname="ADataObject" />
    <testcase name="isInitializedOnCreationOfDataMatrix44f" status="run" time="0.005" classname="ADataObject" />
    <testcase name="canSetAndGetAMatrix44fValue" status="run" time="0.006" classname="ADataObject" />
    <testcase name="canConvertDataMatrix44fToDataObjectAndBack" status="run" time="0.005" classname="ADataObject" />
    <testcase name="isInitializedOnCreationOfDataInt32" status="run" time="0.006" classname="ADataObject" />
    <testcase name="canSetAndGetAInt32Value" status="run" time="0.005" classname="ADataObject" />
    <testcase name="canConvertDataInt32ToDataObjectAndBack" status="run" time="0.006" classname="ADataObject" />
    <testcase name="isInitializedOnCreationOfDataVector2i" status="run" time="0.005" classname="ADataObject" />
    <testcase name="canSetAndGetAVector2iValue" status="run" time="0.006" classname="ADataObject" />
    <testcase name="canConvertDataVector2iToDataObjectAndBack" status="run" time="0.005" classname="ADataObject" />
    <testcase name="isInitializedOnCreationOfDataVector3i" status="run" time="0.005" classname="ADataObject" />
    <testcase name="canSetAndGetAVector3iValue" status="run" time="0.006" classname="ADataObject" />
    <testcase name="canConvertDataVector3iToDataObjectAndBack" status="run" time="0.005" classname="ADataObject" />
    <testcase name="isInitializedOnCreationOfDataVector4i" status="run" time="0.006" classname="ADataObject" />
    <testcase name="canSetAndGetAVector4iValue" status="run" time="0.005" classname="ADataObject" />
    <testcase name="canConvertDataVector4iToDataObjectAndBack" status="run" time="0.006" classname="ADataObject" />
  </testsuite>
  <testsuite name="EffectDescriptionTest" tests="12" failures="0" disabled="0" errors="0" time="0">
    <testcase name="initialState" status="run" time="0" classname="EffectDescriptionTest" />
    <testcase name="setShaderWithNULLRetrievesEmptyString" status="run" time="0" classname="EffectDescriptionTest" />
    <testcase name="retrievesSetVertexShader" status="run" time="0" classname="EffectDescriptionTest" />
    <testcase name="retrievesSetFragmentShader" status="run" time="0" classname="EffectDescriptionTest" />
    <testcase name="addDefineAsNULLReportsError" status="run" time="0" classname="EffectDescriptionTest" />
    <testcase name="canAddAndRetrieveDefineInOrder" status="run" time="0" classname="EffectDescriptionTest" />
    <testcase name="addSemanticNameAsNULLReportsError" status="run" time="0" classname="EffectDescriptionTest" />
    <testcase name="canAddAndRetrieveSemanticInput" status="run" time="0" classname="EffectDescriptionTest" />
    <testcase name="retrievesUnknownTypeForSemanticNotAdded" status="run" time="0" classname="EffectDescriptionTest" />
    <testcase name="setVertexShaderFromFile" status="run" time="0" classname="EffectDescriptionTest" />
    <testcase name="setFragmentShaderFromFile" status="run" time="0" classname="EffectDescriptionTest" />
    <testcase name="reportsErrorWhenLoadingNonexistingFile" status="run" time="0" classname="EffectDescriptionTest" />
  </testsuite>
  <testsuite name="AnEffectInput" tests="7" failures="0" disabled="0" errors="0" time="0">
    <testcase name="UniformInputIsInitializedToDefaultUponCreation" status="run" time="0" classname="AnEffectInput" />
    <testcase name="AttributeInputIsInitializedToDefaultUponCreation" status="run" time="0" classname="AnEffectInput" />
    <testcase name="UniformInputIsInitializedToGivenValues" status="run" time="0" classname="AnEffectInput" />
    <testcase name="AttributeInputIsInitializedToGivenValues" status="run" time="0" classname="AnEffectInput" />
    <testcase name="CanBeSerialized" status="run" time="0" classname="AnEffectInput" />
    <testcase name="CanBeComparedForEquality" status="run" time="0" classname="AnEffectInput" />
    <testcase name="ReturnsCorrectDataType" status="run" time="0" classname="AnEffectInput" />
  </testsuite>
  <testsuite name="AnEffect" tests="16" failures="0" disabled="0" errors="0" time="0.002">
    <testcase name="hasProperNumberOfInputs" status="run" time="0" classname="AnEffect" />
    <testcase name="reportsErrorWhenAskingForNonExistingUniformInput" status="run" time="0" classname="AnEffect" />
    <testcase name="reportsErrorWhenAskingForNonExistingAttributeInput" status="run" time="0" classname="AnEffect" />
    <testcase name="reportsErrorWhenAskingForNonExistingUniformName" status="run" time="0" classname="AnEffect" />
    <testcase name="reportsErrorWhenAskingForNonExistingAttributeName" status="run" time="0" classname="AnEffect" />
    <testcase name="reportsErrorWhenAskingForNonExistingUniformSemantic" status="run" time="0" classname="AnEffect" />
    <testcase name="reportsErrorWhenAskingForNonExistingAttributeSemantic" status="run" time="0" classname="AnEffect" />
    <testcase name="getsUniformInputByIndex" status="run" time="0" classname="AnEffect" />
    <testcase name="getsAttributeInputByIndex" status="run" time="0" classname="AnEffect" />
    <testcase name="findsUniformInputByName" status="run" time="0" classname="AnEffect" />
    <testcase name="findsAttributeInputByName" status="run" time="0" classname="AnEffect" />
    <testcase name="canNotCreateEffectWhenTextPositionsSemanticsHasWrongType" status="run" time="0.001" classname="AnEffect" />
    <testcase name="canRetrieveGLSLErrorMessageFromClient" status="run" time="0" classname="AnEffect" />
    <testcase name="clientDeletesEffectErrorMessagesOfLastEffect" status="run" time="0" classname="AnEffect" />
    <testcase name="canNotCreateEffectWhenTextTextureCoordinatesSemanticsHasWrongType" status="run" time="0" classname="AnEffect" />
    <testcase name="canNotCreateEffectWhenTextTextureSemanticsHasWrongType" status="run" time="0.001" classname="AnEffect" />
  </testsuite>
  <testsuite name="AnEffectWithSemantics" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="findsUniformInputBySemantic" status="run" time="0" classname="AnEffectWithSemantics" />
    <testcase name="getsAttributeInputByIndex" status="run" time="0" classname="AnEffectWithSemantics" />
    <testcase name="findsAttributeInputBySemantic" status="run" time="0" classname="AnEffectWithSemantics" />
    <testcase name="findsAttributeInputByName" status="run" time="0" classname="AnEffectWithSemantics" />
    <testcase name="findsTextureInputWithSemantics" status="run" time="0" classname="AnEffectWithSemantics" />
  </testsuite>
  <testsuite name="AFontRegistry" tests="14" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="CreatesAndDestroysFreetype2FontInstanceFromFile" status="run" time="0" classname="AFontRegistry" />
    <testcase name="CreatesAndDestroysMultipleFreetype2FontInstancesFromFile" status="run" time="0" classname="AFontRegistry" />
    <testcase name="ReturnsNULLFontInstanceIfNotRegistered" status="run" time="0" classname="AFontRegistry" />
    <testcase name="FailsToCreateFontFromWrongPath" status="run" time="0" classname="AFontRegistry" />
    <testcase name="FailsToCreateFontInstanceFromInvalidFont" status="run" time="0" classname="AFontRegistry" />
    <testcase name="FailsToCreateFontInstanceFromDeletedFont" status="run" time="0" classname="AFontRegistry" />
    <testcase name="FailsToDestroyInvalidFont" status="run" time="0.001" classname="AFontRegistry" />
    <testcase name="FailsToDestroyInvalidFontInstance" status="run" time="0" classname="AFontRegistry" />
    <testcase name="InstantiatesSecondFontRegistryAndCreatesAnotherFontInstance" status="run" time="0" classname="AFontRegistry" />
    <testcase name="CreatesAndDestroysHBFontInstanceFromFile" status="run" time="0" classname="AFontRegistry" />
    <testcase name="CreatesAndDestroysMultipleHBFontInstancesFromFile" status="run" time="0" classname="AFontRegistry" />
    <testcase name="CreatesAndDestroysBothFT2AndHBFontInstancesFromFile" status="run" time="0" classname="AFontRegistry" />
    <testcase name="FailsToCreateHBFontInstanceFromInvalidFont" status="run" time="0" classname="AFontRegistry" />
    <testcase name="FailsToCreateHBFontInstanceFromDeletedFont" status="run" time="0" classname="AFontRegistry" />
  </testsuite>
  <testsuite name="AFreetype2FontInstance" tests="10" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="ComputesHeightFromFontData" status="run" time="0" classname="AFreetype2FontInstance" />
    <testcase name="ComputesAscenderFromFontData" status="run" time="0" classname="AFreetype2FontInstance" />
    <testcase name="ComputesDescenderFromFontData" status="run" time="0" classname="AFreetype2FontInstance" />
    <testcase name="ObtainsGlyphMetrics" status="run" time="0" classname="AFreetype2FontInstance" />
    <testcase name="ObtainsMultipleGlyphMetrics" status="run" time="0" classname="AFreetype2FontInstance" />
    <testcase name="ObtainsMultipleGlyphMetricsFromInstancesWithDifferentSizes" status="run" time="0.001" classname="AFreetype2FontInstance" />
    <testcase name="CanLoadACharacterGlyphBitmapData" status="run" time="0" classname="AFreetype2FontInstance" />
    <testcase name="ReportsSupportedCharCodes" status="run" time="0" classname="AFreetype2FontInstance" />
    <testcase name="ReportsSupportedCharCodesAfterAlreadyLoadedTheirMetrics" status="run" time="0" classname="AFreetype2FontInstance" />
    <testcase name="ReportsUnsupportedCharCode" status="run" time="0" classname="AFreetype2FontInstance" />
  </testsuite>
  <testsuite name="GeometryBindingTest" tests="31" failures="0" disabled="0" errors="0" time="0.004">
    <testcase name="CanGetEffect" status="run" time="0.001" classname="GeometryBindingTest" />
    <testcase name="dataLayoutHasOnlyIndicesForEmptyEffect" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="dataLayoutHasRightEffectHash" status="run" time="0.001" classname="GeometryBindingTest" />
    <testcase name="indicesFieldIsCreatedAtFixedSlot" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="canSetResource" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenSettingResourceToInvalidInput" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenSettingResourceWithMismatchingTypeInEffect" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenSettingVec2ArrayResourceFromAnotherClient" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenSettingVec3ArrayResourceFromAnotherClient" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenSettingVec4ArrayResourceFromAnotherClient" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenSettingIndexDataBufferFromAnotherScene" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenSettingVertexDataBufferFromAnotherScene" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenSettingFloatArrayResourceFromAnotherClient" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenSettingUint16ArrayIndicesFromAnotherClient" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenSettingUint32ArrayIndicesFromAnotherClient" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="canSetIndicesResource16" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="canSetIndicesResource32" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="canSetIndicesDataBuffer16" status="run" time="0.001" classname="GeometryBindingTest" />
    <testcase name="canSetIndicesDataBuffer32" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="canSetAttributeResourceInput" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="canSetAttributeVertexDataBufferInput" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenSettingAttributeResourceInputWithWrongType" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenSettingAttributeVertexDataBufferInputWithWrongType" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidEffectReference" status="run" time="0.001" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidIndicesReference" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidInputFloatArrayResource" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidInputVec2ArrayResource" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidInputVec3ArrayResource" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidInputVec4ArrayResource" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenValidatedWithDestroyedVertexDataBuffer" status="run" time="0" classname="GeometryBindingTest" />
    <testcase name="reportsErrorWhenValidatedWithVertexDataBufferThatHasWrongType" status="run" time="0" classname="GeometryBindingTest" />
  </testsuite>
  <testsuite name="AGlslEffect" tests="37" failures="0" disabled="1" errors="0" time="0.046">
    <testcase name="canParseBasicShaders" status="run" time="0" classname="AGlslEffect" />
    <testcase name="usesPassedName" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="rejectsEmptyVertexShader" status="run" time="0" classname="AGlslEffect" />
    <testcase name="rejectsBrokenVertexShader" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="rejectsEmptyFragmentShader" status="run" time="0" classname="AGlslEffect" />
    <testcase name="rejectsBrokenFragmentShader" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="usesProvidedDefines" status="run" time="0" classname="AGlslEffect" />
    <testcase name="generatedShaderWithDefaultVersionAndDefinesEmbedded" status="run" time="0" classname="AGlslEffect" />
    <testcase name="acceptsGLSLES30Shaders" status="run" time="0.013" classname="AGlslEffect" />
    <testcase name="doesNotAcceptMixedES2VertexAndES3FragmentShaders" status="run" time="0" classname="AGlslEffect" />
    <testcase name="doesNotAcceptMixedES3VertexAndES2FragmentShaders" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="doesNotAcceptOtherGLSLVersionsThan100And300" status="run" time="0.019" classname="AGlslEffect" />
    <testcase name="canParseShaderInputs" status="run" time="0" classname="AGlslEffect" />
    <testcase name="canParseSamplerInputsGLSLES2" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="canParseSamplerInputsGLSLES3" status="run" time="0" classname="AGlslEffect" />
    <testcase name="canParseArrayInputs" status="run" time="0" classname="AGlslEffect" />
    <testcase name="failsWithWrongSemanticForType" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="ignoresNormalGlobalsAndVaryings" status="run" time="0" classname="AGlslEffect" />
    <testcase name="canParseStructUniform" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="canParseArrayOfStructUniform" status="run" time="0" classname="AGlslEffect" />
    <testcase name="canParseNestedStructUniform" status="run" time="0" classname="AGlslEffect" />
    <testcase name="canParseArrayOfNestedStructUniforms" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="UseGlslEffectFromDifferentThread" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="UseGlslEffectFromMainThread" status="run" time="0" classname="AGlslEffect" />
    <testcase name="hasDefaultShaderVersion100" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="isAbleToParseShadersWithVersionString" status="run" time="0" classname="AGlslEffect" />
    <testcase name="rejectsShadersWithVersionStringWithoutNewline" status="run" time="0" classname="AGlslEffect" />
    <testcase name="rejectsShadersWithUnsupportedVersions" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="acceptsReturnStatementsEveryWhere" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="acceptsLoopsInShaders" status="run" time="0" classname="AGlslEffect" />
    <testcase name="doesNotSupportExternalTextureExtension" status="run" time="0" classname="AGlslEffect" />
    <testcase name="doesNotSupportFloatTextureExtension" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="doesNotSupport3DTextureExtension" status="run" time="0" classname="AGlslEffect" />
    <testcase name="treatsUniformDeclaredInBothStagesWithSameNameAsSingleUniform" status="run" time="0.001" classname="AGlslEffect" />
    <testcase name="rejectsEffectWithUniformDeclaredInBothStagesWithSameNameButDifferentDataType" status="run" time="0" classname="AGlslEffect" />
    <testcase name="DISABLED_acceptsActiveAsKeyword" status="notrun" time="0" classname="AGlslEffect" />
    <testcase name="canRetrieveGLSLErrorMessage" status="run" time="0" classname="AGlslEffect" />
  </testsuite>
  <testsuite name="GlslLimitsTest" tests="4" failures="0" disabled="0" errors="0" time="0">
    <testcase name="parseGlslVersionFromString" status="run" time="0" classname="GlslLimitsTest" />
    <testcase name="testLimitsOpenGL_20" status="run" time="0" classname="GlslLimitsTest" />
    <testcase name="testLimitsOpenGL_ES_30" status="run" time="0" classname="GlslLimitsTest" />
    <testcase name="testLimitsOpenGL_42" status="run" time="0" classname="GlslLimitsTest" />
  </testsuite>
  <testsuite name="AGlyphTextureAtlas" tests="17" failures="0" disabled="0" errors="0" time="0.008">
    <testcase name="MapsGlyphWhichFitsEntirelyInOneTextureAndLeavesLotsOfFreeSpace" status="run" time="0.001" classname="AGlyphTextureAtlas" />
    <testcase name="MapsGlyphWhichBarelyFitsInOneTexture" status="run" time="0" classname="AGlyphTextureAtlas" />
    <testcase name="MapsTwoGlyphsWhichFitInOneTextureHorizontally" status="run" time="0" classname="AGlyphTextureAtlas" />
    <testcase name="MapsTwoGlyphsWhichFitInOneTextureButSecondGlyphIsTooWideToFitHorizontally" status="run" time="0" classname="AGlyphTextureAtlas" />
    <testcase name="MapsTwoGlyphsWhichDontFitInASingleTexture" status="run" time="0.001" classname="AGlyphTextureAtlas" />
    <testcase name="MapsZeroAreaGlyphAndDoesNotCreateGeometryForIt" status="run" time="0" classname="AGlyphTextureAtlas" />
    <testcase name="CreatesGeometryForSingleGlyph" status="run" time="0.001" classname="AGlyphTextureAtlas" />
    <testcase name="CreatesGeometryForSingleGlyphWithOffsetNotZero" status="run" time="0" classname="AGlyphTextureAtlas" />
    <testcase name="CreatesMultipleGeometriesForGlyphsInSamePage" status="run" time="0" classname="AGlyphTextureAtlas" />
    <testcase name="CreatesMultipleGeometriesForGlyphsInSamePageWhenOffsetIsNotZero" status="run" time="0" classname="AGlyphTextureAtlas" />
    <testcase name="CreatesGeometryForStringWithSomeEmptyChars" status="run" time="0" classname="AGlyphTextureAtlas" />
    <testcase name="CreatesGeometryForStringWithSomeEmptyCharsWithZeroAdvance" status="run" time="0.001" classname="AGlyphTextureAtlas" />
    <testcase name="ReleasesGlyphFromPageAfterUnmappingAsOftenAsMappingIt" status="run" time="0" classname="AGlyphTextureAtlas" />
    <testcase name="DoesNotReleaseGlyphAfterMappingItMoreThanUnmappingIt" status="run" time="0" classname="AGlyphTextureAtlas" />
    <testcase name="TreatsTheSameCharWithDifferentFontInstancesAsDifferentGlyphs" status="run" time="0.001" classname="AGlyphTextureAtlas" />
    <testcase name="CanMapFourOfTheSameGlyphsToTheSameSpace" status="run" time="0" classname="AGlyphTextureAtlas" />
    <testcase name="MapsNonFittingGlyphsToNewPageAndKeepsSpaceOnFirstPageOpen" status="run" time="0.003" classname="AGlyphTextureAtlas" />
  </testsuite>
  <testsuite name="AGlyphTexturePage" tests="22" failures="0" disabled="0" errors="0" time="0.012">
    <testcase name="CreatesTexture2DBufferAndSamplerWhenConstructed" status="run" time="0.001" classname="AGlyphTexturePage" />
    <testcase name="DestroysTexture2DBufferAndSamplerWhenDestructed" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="CreatesInternalDataCacheWithCorrectSizeAfterConstruction" status="run" time="0.003" classname="AGlyphTexturePage" />
    <testcase name="CopiesSourceDataToTargetQuadAndAddsOnePixelPadding" status="run" time="0.001" classname="AGlyphTexturePage" />
    <testcase name="NewGlyphPageHasOneFreeAreaWithWidthTimesHeightArea" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="claimingAZeroSpaceIsANoop" status="run" time="0.003" classname="AGlyphTexturePage" />
    <testcase name="claimingSpaceOnceIsCorrectAndRevertable" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="claimingSpaceTwiceWithSameWidthOrHeightLeadsToMergeOnRevert" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="claimingSpaceAndOnlyPartiallyReleaseIt_ConnectedToFreeSpace" status="run" time="0.001" classname="AGlyphTexturePage" />
    <testcase name="claimingSpaceAndOnlyPartiallyReleaseIt_DisconnectedToFreeSpace" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="MapsSingleGlyphWhichExactlyFitsPageSize" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="CanNotCreateAnotherGlyphWhenPageIsFull" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="MapsSecondGlyphWhenSpaceStillAvailableInPage" status="run" time="0.001" classname="AGlyphTexturePage" />
    <testcase name="confidence_MapsFourGlyphs_WhichHaveQuarterPageSize_InOnePage" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="confidence_MapsAMosaicOfGlyphsWithHeterogeneousSizes_SoThatNewGlyphDoesNotFitOnPage" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="ReleasesSpaceInPageAndMapsANewGlyph" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="ReleaseFourGlyphsAndMapNewGlyphWhichIsFourTimesBigger" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="FindsFreeSpaceForSizeEqualToPageSizeIfEmpty" status="run" time="0.001" classname="AGlyphTexturePage" />
    <testcase name="FindsNoFreeSpaceForSizeTooBigForLeftoverSpace" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="FindsNoFreeSpaceForSizeTooBigForAllFreespaceQuads" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="ChoosesExactFitFreespaceQuadWithFindFreespace" status="run" time="0" classname="AGlyphTexturePage" />
    <testcase name="ChoosesBestFitFreespaceQuadWithFindFreespace" status="run" time="0" classname="AGlyphTexturePage" />
  </testsuite>
  <testsuite name="AHarfbuzzFontInstance" tests="10" failures="0" disabled="0" errors="0" time="0">
    <testcase name="ComputesHeightFromFontData" status="run" time="0" classname="AHarfbuzzFontInstance" />
    <testcase name="ComputesAscenderFromFontData" status="run" time="0" classname="AHarfbuzzFontInstance" />
    <testcase name="ComputesDescenderFromFontData" status="run" time="0" classname="AHarfbuzzFontInstance" />
    <testcase name="ObtainsGlyphMetrics" status="run" time="0" classname="AHarfbuzzFontInstance" />
    <testcase name="ObtainsMultipleGlyphMetrics" status="run" time="0" classname="AHarfbuzzFontInstance" />
    <testcase name="ObtainsMultipleGlyphMetricsFromInstancesWithDifferentSizes" status="run" time="0" classname="AHarfbuzzFontInstance" />
    <testcase name="CanLoadACharacterGlyphBitmapData" status="run" time="0" classname="AHarfbuzzFontInstance" />
    <testcase name="ReportsUnsupportedCharCode" status="run" time="0" classname="AHarfbuzzFontInstance" />
    <testcase name="ObtainsMultipleGlyphMetricsWithReshaping" status="run" time="0" classname="AHarfbuzzFontInstance" />
    <testcase name="ObtainsMultipleGlyphMetricsWithReshaping2" status="run" time="0" classname="AHarfbuzzFontInstance" />
  </testsuite>
  <testsuite name="IteratorTest" tests="1" failures="0" disabled="0" errors="0" time="0.006">
    <testcase name="iteratesOverAllObjects" status="run" time="0.006" classname="IteratorTest" />
  </testsuite>
  <testsuite name="ALayoutUtils" tests="20" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="EmptyBBoxForEmptyString" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="EmptyBBoxForInvalidRange" status="run" time="0.001" classname="ALayoutUtils" />
    <testcase name="GetsBBoxForString" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="GetsBBoxForStringInReverse" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="GetsBBoxForSubString" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="GetsBBoxForSubStringInReverse" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="FindsNoFittingForEmptyString" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="FindsNoFittingForInvalidRange" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="FindsNoFittingForZeroMaxWidth" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="ReportsWholeGivenStringAsFittingIfMaxWidthEqualsItsWidth" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="ReportsWholeGivenStringAsNOTFittingIfMaxWidthJustBelowItsWidth" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="FindsFittingSubstringForGivenMaxWidth" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="FindsNoFittingIfFirstCharExceedsMaxWidth" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="FindsFittingFirstCharIfItsWidthEqualsMaxWidth" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="EmptyGlyphsAtBeginningContributeToOffsetAndAdvanceOfBoundingBox" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="EmptyGlyphsAtEndContributeOnlyToAdvanceOfBoundingBox" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="StringWithEmptyGlyphsAlwaysFits" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="EmptyGlyphsAtBeginningOfStringAlwaysFit" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="EmptyGlyphsAtBeginningOfStringAffectFittingOfNonEmptyGlyphsDueToAdvancing" status="run" time="0" classname="ALayoutUtils" />
    <testcase name="EmptyGlyphsAtEndOfStringHasNoAffectOnFitting" status="run" time="0" classname="ALayoutUtils" />
  </testsuite>
  <testsuite name="MeshNodeTest" tests="26" failures="0" disabled="0" errors="0" time="0.155">
    <testcase name="canValidate" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="failsValidationIfNoAppearanceWasSet" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="failsValidationIfNoGeometryWasSet" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="failsValidationIfStartIndexExeedsSizeOfIndexArray" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="failsValidationIfIndexCountExeedsSizeOfIndexArray" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="failsValidationIfStartIndexPlusIndexCountExeedsSizeOfIndexArray" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="getsNullPointerForInitalAppearanceAndGeometry" status="run" time="0.005" classname="MeshNodeTest" />
    <testcase name="setsAndGetsSameAppearance" status="run" time="0.005" classname="MeshNodeTest" />
    <testcase name="reportsErrorWhenSetAppearanceFromAnotherScene" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="setsAndGetsSameGeometry" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="reportsErrorWhenSetGeometryFromAnotherScene" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="settingGeometryWithIndicesSetsIndicesCount" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="settingGeometryHavingDifferentEffectFromAppearanceReportsError" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="settingAppearanceHavingDifferentEffectFromGeometryReportsError" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="setsAppearanceMultipleTimesAndChecksInScene" status="run" time="0.007" classname="MeshNodeTest" />
    <testcase name="setsGeometryMultipleTimesAndChecksInScene" status="run" time="0.007" classname="MeshNodeTest" />
    <testcase name="removeAppearanceAndGeometryRemovesTheseFromMeshNode" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="canSetNewAppearanceAndGeometryWhichAreIncompatibleWithThePrevious" status="run" time="0.005" classname="MeshNodeTest" />
    <testcase name="checksIfMeshNodeIsInitiallyVisible" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="setsAndGetsSameStartIndex" status="run" time="0.005" classname="MeshNodeTest" />
    <testcase name="setsAndGetsSameStartVertex" status="run" time="0.006" classname="MeshNodeTest" />
    <testcase name="setsAndGetsSameIndexCount" status="run" time="0.005" classname="MeshNodeTest" />
    <testcase name="setsAndGetsSameInstanceCount" status="run" time="0.005" classname="MeshNodeTest" />
    <testcase name="doesNotAllowNoInstances" status="run" time="0.005" classname="MeshNodeTest" />
    <testcase name="succeedsValidationIfNotUsingIndexArray" status="run" time="0.007" classname="MeshNodeTest" />
    <testcase name="failsValidationIfNotUsingIndexArrayAndIndexCountNotSet" status="run" time="0.007" classname="MeshNodeTest" />
  </testsuite>
  <testsuite name="NodeLazyTransformTest/0" tests="10" failures="0" disabled="0" errors="0" time="0.055">
    <testcase name="instantiationCreatesNoTransform" type_param="ramses::Node" status="run" time="0.005" classname="NodeLazyTransformTest/0" />
    <testcase name="callingSetterWithIdentityCreatesNoTransform" type_param="ramses::Node" status="run" time="0.005" classname="NodeLazyTransformTest/0" />
    <testcase name="callingGettersWithoutTransformReturnIdentity" type_param="ramses::Node" status="run" time="0.006" classname="NodeLazyTransformTest/0" />
    <testcase name="callingSetTranslationWithValueCreatesTransform" type_param="ramses::Node" status="run" time="0.005" classname="NodeLazyTransformTest/0" />
    <testcase name="callingTranslateWithValueCreatesTransform" type_param="ramses::Node" status="run" time="0.006" classname="NodeLazyTransformTest/0" />
    <testcase name="callingSetRotationWithValueCreatesTransform" type_param="ramses::Node" status="run" time="0.005" classname="NodeLazyTransformTest/0" />
    <testcase name="callingRotateWithValueCreatesTransform" type_param="ramses::Node" status="run" time="0.006" classname="NodeLazyTransformTest/0" />
    <testcase name="callingSetScalingWithValueCreatesTransform" type_param="ramses::Node" status="run" time="0.005" classname="NodeLazyTransformTest/0" />
    <testcase name="callingScaleWithValueCreatesTransform" type_param="ramses::Node" status="run" time="0.006" classname="NodeLazyTransformTest/0" />
    <testcase name="destructionDestroysTransform" type_param="ramses::Node" status="run" time="0.005" classname="NodeLazyTransformTest/0" />
  </testsuite>
  <testsuite name="NodeLazyTransformTest/1" tests="10" failures="0" disabled="0" errors="0" time="0.055">
    <testcase name="instantiationCreatesNoTransform" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeLazyTransformTest/1" />
    <testcase name="callingSetterWithIdentityCreatesNoTransform" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeLazyTransformTest/1" />
    <testcase name="callingGettersWithoutTransformReturnIdentity" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeLazyTransformTest/1" />
    <testcase name="callingSetTranslationWithValueCreatesTransform" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeLazyTransformTest/1" />
    <testcase name="callingTranslateWithValueCreatesTransform" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeLazyTransformTest/1" />
    <testcase name="callingSetRotationWithValueCreatesTransform" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeLazyTransformTest/1" />
    <testcase name="callingRotateWithValueCreatesTransform" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeLazyTransformTest/1" />
    <testcase name="callingSetScalingWithValueCreatesTransform" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeLazyTransformTest/1" />
    <testcase name="callingScaleWithValueCreatesTransform" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeLazyTransformTest/1" />
    <testcase name="destructionDestroysTransform" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeLazyTransformTest/1" />
  </testsuite>
  <testsuite name="NodeLazyTransformTest/2" tests="10" failures="0" disabled="0" errors="0" time="0.056">
    <testcase name="instantiationCreatesNoTransform" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeLazyTransformTest/2" />
    <testcase name="callingSetterWithIdentityCreatesNoTransform" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeLazyTransformTest/2" />
    <testcase name="callingGettersWithoutTransformReturnIdentity" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeLazyTransformTest/2" />
    <testcase name="callingSetTranslationWithValueCreatesTransform" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeLazyTransformTest/2" />
    <testcase name="callingTranslateWithValueCreatesTransform" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeLazyTransformTest/2" />
    <testcase name="callingSetRotationWithValueCreatesTransform" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeLazyTransformTest/2" />
    <testcase name="callingRotateWithValueCreatesTransform" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeLazyTransformTest/2" />
    <testcase name="callingSetScalingWithValueCreatesTransform" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeLazyTransformTest/2" />
    <testcase name="callingScaleWithValueCreatesTransform" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeLazyTransformTest/2" />
    <testcase name="destructionDestroysTransform" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeLazyTransformTest/2" />
  </testsuite>
  <testsuite name="NodeLazyTransformTest/3" tests="10" failures="0" disabled="0" errors="0" time="0.055">
    <testcase name="instantiationCreatesNoTransform" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeLazyTransformTest/3" />
    <testcase name="callingSetterWithIdentityCreatesNoTransform" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeLazyTransformTest/3" />
    <testcase name="callingGettersWithoutTransformReturnIdentity" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeLazyTransformTest/3" />
    <testcase name="callingSetTranslationWithValueCreatesTransform" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeLazyTransformTest/3" />
    <testcase name="callingTranslateWithValueCreatesTransform" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeLazyTransformTest/3" />
    <testcase name="callingSetRotationWithValueCreatesTransform" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeLazyTransformTest/3" />
    <testcase name="callingRotateWithValueCreatesTransform" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeLazyTransformTest/3" />
    <testcase name="callingSetScalingWithValueCreatesTransform" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeLazyTransformTest/3" />
    <testcase name="callingScaleWithValueCreatesTransform" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeLazyTransformTest/3" />
    <testcase name="destructionDestroysTransform" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeLazyTransformTest/3" />
  </testsuite>
  <testsuite name="NodeLazyTransformTest/4" tests="10" failures="0" disabled="0" errors="0" time="0.054">
    <testcase name="instantiationCreatesNoTransform" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeLazyTransformTest/4" />
    <testcase name="callingSetterWithIdentityCreatesNoTransform" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeLazyTransformTest/4" />
    <testcase name="callingGettersWithoutTransformReturnIdentity" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeLazyTransformTest/4" />
    <testcase name="callingSetTranslationWithValueCreatesTransform" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeLazyTransformTest/4" />
    <testcase name="callingTranslateWithValueCreatesTransform" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeLazyTransformTest/4" />
    <testcase name="callingSetRotationWithValueCreatesTransform" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeLazyTransformTest/4" />
    <testcase name="callingRotateWithValueCreatesTransform" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeLazyTransformTest/4" />
    <testcase name="callingSetScalingWithValueCreatesTransform" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeLazyTransformTest/4" />
    <testcase name="callingScaleWithValueCreatesTransform" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeLazyTransformTest/4" />
    <testcase name="destructionDestroysTransform" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeLazyTransformTest/4" />
  </testsuite>
  <testsuite name="NodeLazyTransformTest/5" tests="10" failures="0" disabled="0" errors="0" time="0.055">
    <testcase name="instantiationCreatesNoTransform" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeLazyTransformTest/5" />
    <testcase name="callingSetterWithIdentityCreatesNoTransform" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeLazyTransformTest/5" />
    <testcase name="callingGettersWithoutTransformReturnIdentity" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeLazyTransformTest/5" />
    <testcase name="callingSetTranslationWithValueCreatesTransform" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeLazyTransformTest/5" />
    <testcase name="callingTranslateWithValueCreatesTransform" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeLazyTransformTest/5" />
    <testcase name="callingSetRotationWithValueCreatesTransform" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeLazyTransformTest/5" />
    <testcase name="callingRotateWithValueCreatesTransform" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeLazyTransformTest/5" />
    <testcase name="callingSetScalingWithValueCreatesTransform" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeLazyTransformTest/5" />
    <testcase name="callingScaleWithValueCreatesTransform" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeLazyTransformTest/5" />
    <testcase name="destructionDestroysTransform" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeLazyTransformTest/5" />
  </testsuite>
  <testsuite name="NodeTest/0" tests="35" failures="0" disabled="0" errors="0" time="0.193">
    <testcase name="hasChild" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="hasParent" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="shouldAddChildrenToNodeAndCountThemCorrectly" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="shouldNotAddNodeFromOneSceneAsChildToNodeInOtherScene" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="shouldAddChildToNodeAndGetParent" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="constGetChildAndGetParentBehaveAsNonConstVersion" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="shouldRemoveChildOnDestruction" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="shouldRemoveParentOnItsDestruction" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="shouldRemoveChild" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="shouldAddParentToNodeAndGetChild" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="shouldRemoveParent" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="confidenceTest_shouldRemoveAllChildren" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="reportsErrorWhenRemovinNonExistingParent" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="shouldReplaceParentWithaddChild" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="shouldReplaceParentWithSetParent" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="shouldOrderChildrenAccordingToTheirAddingToTheirParent" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="shouldAdaptChildOrderWhenChildrenAreRemovedFromParent" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="canBeConvertedToNode" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="reportsErrorWhenSettingParentToItself" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="reportsErrorWhenSettingParaentFromAnotherScene" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="reportsErrorWhenSettingChildToItself" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="isNotDirtyInitially" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="canBeMarkedDirty" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="isMarkedDirtyWhenSettingParent" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="isMarkedDirtyWhenAddingToParent" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="isMarkedDirtyWhenRemovedFromParent" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="staysCleanWhenSettingChild" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="isMarkedDirtyWhenParentDestroyed" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="staysCleanWhenRemovingNonExistingParent" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="getsIdentityModelMatrixInitially" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="getsIdentityInverseModelMatrixInitially" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="getsModelMatrixComputedFromTransformationChain" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="getsInverseModelMatrixComputedFromTransformationChain" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
    <testcase name="instantiationDoesNotCreateMultipleLLNodes" type_param="ramses::Node" status="run" time="0.006" classname="NodeTest/0" />
    <testcase name="destructionDestroysLLNode" type_param="ramses::Node" status="run" time="0.005" classname="NodeTest/0" />
  </testsuite>
  <testsuite name="NodeTest/1" tests="35" failures="0" disabled="0" errors="0" time="0.193">
    <testcase name="hasChild" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="hasParent" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="shouldAddChildrenToNodeAndCountThemCorrectly" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="shouldNotAddNodeFromOneSceneAsChildToNodeInOtherScene" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="shouldAddChildToNodeAndGetParent" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="constGetChildAndGetParentBehaveAsNonConstVersion" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="shouldRemoveChildOnDestruction" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="shouldRemoveParentOnItsDestruction" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="shouldRemoveChild" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="shouldAddParentToNodeAndGetChild" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="shouldRemoveParent" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="confidenceTest_shouldRemoveAllChildren" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="reportsErrorWhenRemovinNonExistingParent" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="shouldReplaceParentWithaddChild" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="shouldReplaceParentWithSetParent" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="shouldOrderChildrenAccordingToTheirAddingToTheirParent" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="shouldAdaptChildOrderWhenChildrenAreRemovedFromParent" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="canBeConvertedToNode" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="reportsErrorWhenSettingParentToItself" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="reportsErrorWhenSettingParaentFromAnotherScene" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="reportsErrorWhenSettingChildToItself" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="isNotDirtyInitially" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="canBeMarkedDirty" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="isMarkedDirtyWhenSettingParent" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="isMarkedDirtyWhenAddingToParent" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="isMarkedDirtyWhenRemovedFromParent" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="staysCleanWhenSettingChild" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="isMarkedDirtyWhenParentDestroyed" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="staysCleanWhenRemovingNonExistingParent" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="getsIdentityModelMatrixInitially" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="getsIdentityInverseModelMatrixInitially" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="getsModelMatrixComputedFromTransformationChain" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="getsInverseModelMatrixComputedFromTransformationChain" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
    <testcase name="instantiationDoesNotCreateMultipleLLNodes" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTest/1" />
    <testcase name="destructionDestroysLLNode" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTest/1" />
  </testsuite>
  <testsuite name="NodeTest/2" tests="35" failures="0" disabled="0" errors="0" time="0.189">
    <testcase name="hasChild" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="hasParent" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="shouldAddChildrenToNodeAndCountThemCorrectly" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="shouldNotAddNodeFromOneSceneAsChildToNodeInOtherScene" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="shouldAddChildToNodeAndGetParent" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="constGetChildAndGetParentBehaveAsNonConstVersion" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="shouldRemoveChildOnDestruction" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="shouldRemoveParentOnItsDestruction" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="shouldRemoveChild" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="shouldAddParentToNodeAndGetChild" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="shouldRemoveParent" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="confidenceTest_shouldRemoveAllChildren" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="reportsErrorWhenRemovinNonExistingParent" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="shouldReplaceParentWithaddChild" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="shouldReplaceParentWithSetParent" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="shouldOrderChildrenAccordingToTheirAddingToTheirParent" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="shouldAdaptChildOrderWhenChildrenAreRemovedFromParent" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="canBeConvertedToNode" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="reportsErrorWhenSettingParentToItself" type_param="ramses::RemoteCamera" status="run" time="0" classname="NodeTest/2" />
    <testcase name="reportsErrorWhenSettingParaentFromAnotherScene" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="reportsErrorWhenSettingChildToItself" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="isNotDirtyInitially" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="canBeMarkedDirty" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="isMarkedDirtyWhenSettingParent" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="isMarkedDirtyWhenAddingToParent" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="isMarkedDirtyWhenRemovedFromParent" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="staysCleanWhenSettingChild" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="isMarkedDirtyWhenParentDestroyed" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="staysCleanWhenRemovingNonExistingParent" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="getsIdentityModelMatrixInitially" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="getsIdentityInverseModelMatrixInitially" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="getsModelMatrixComputedFromTransformationChain" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="getsInverseModelMatrixComputedFromTransformationChain" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTest/2" />
    <testcase name="instantiationDoesNotCreateMultipleLLNodes" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
    <testcase name="destructionDestroysLLNode" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTest/2" />
  </testsuite>
  <testsuite name="NodeTest/3" tests="35" failures="0" disabled="0" errors="0" time="0.194">
    <testcase name="hasChild" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="hasParent" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="shouldAddChildrenToNodeAndCountThemCorrectly" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="shouldNotAddNodeFromOneSceneAsChildToNodeInOtherScene" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="shouldAddChildToNodeAndGetParent" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="constGetChildAndGetParentBehaveAsNonConstVersion" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="shouldRemoveChildOnDestruction" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="shouldRemoveParentOnItsDestruction" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="shouldRemoveChild" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="shouldAddParentToNodeAndGetChild" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="shouldRemoveParent" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="confidenceTest_shouldRemoveAllChildren" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="reportsErrorWhenRemovinNonExistingParent" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="shouldReplaceParentWithaddChild" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="shouldReplaceParentWithSetParent" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="shouldOrderChildrenAccordingToTheirAddingToTheirParent" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="shouldAdaptChildOrderWhenChildrenAreRemovedFromParent" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="canBeConvertedToNode" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="reportsErrorWhenSettingParentToItself" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="reportsErrorWhenSettingParaentFromAnotherScene" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="reportsErrorWhenSettingChildToItself" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="isNotDirtyInitially" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="canBeMarkedDirty" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="isMarkedDirtyWhenSettingParent" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="isMarkedDirtyWhenAddingToParent" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="isMarkedDirtyWhenRemovedFromParent" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="staysCleanWhenSettingChild" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="isMarkedDirtyWhenParentDestroyed" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="staysCleanWhenRemovingNonExistingParent" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="getsIdentityModelMatrixInitially" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="getsIdentityInverseModelMatrixInitially" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="getsModelMatrixComputedFromTransformationChain" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="getsInverseModelMatrixComputedFromTransformationChain" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
    <testcase name="instantiationDoesNotCreateMultipleLLNodes" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTest/3" />
    <testcase name="destructionDestroysLLNode" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTest/3" />
  </testsuite>
  <testsuite name="NodeTest/4" tests="35" failures="0" disabled="0" errors="0" time="0.198">
    <testcase name="hasChild" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="hasParent" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="shouldAddChildrenToNodeAndCountThemCorrectly" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="shouldNotAddNodeFromOneSceneAsChildToNodeInOtherScene" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="shouldAddChildToNodeAndGetParent" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="constGetChildAndGetParentBehaveAsNonConstVersion" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="shouldRemoveChildOnDestruction" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="shouldRemoveParentOnItsDestruction" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="shouldRemoveChild" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="shouldAddParentToNodeAndGetChild" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="shouldRemoveParent" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="confidenceTest_shouldRemoveAllChildren" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="reportsErrorWhenRemovinNonExistingParent" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="shouldReplaceParentWithaddChild" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="shouldReplaceParentWithSetParent" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="shouldOrderChildrenAccordingToTheirAddingToTheirParent" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="shouldAdaptChildOrderWhenChildrenAreRemovedFromParent" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="canBeConvertedToNode" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="reportsErrorWhenSettingParentToItself" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="reportsErrorWhenSettingParaentFromAnotherScene" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="reportsErrorWhenSettingChildToItself" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="isNotDirtyInitially" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="canBeMarkedDirty" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="isMarkedDirtyWhenSettingParent" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="isMarkedDirtyWhenAddingToParent" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="isMarkedDirtyWhenRemovedFromParent" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="staysCleanWhenSettingChild" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="isMarkedDirtyWhenParentDestroyed" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="staysCleanWhenRemovingNonExistingParent" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="getsIdentityModelMatrixInitially" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="getsIdentityInverseModelMatrixInitially" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="getsModelMatrixComputedFromTransformationChain" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTest/4" />
    <testcase name="getsInverseModelMatrixComputedFromTransformationChain" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
    <testcase name="instantiationDoesNotCreateMultipleLLNodes" type_param="ramses::OrthographicCamera" status="run" time="0.012" classname="NodeTest/4" />
    <testcase name="destructionDestroysLLNode" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTest/4" />
  </testsuite>
  <testsuite name="NodeTest/5" tests="35" failures="0" disabled="0" errors="0" time="0.195">
    <testcase name="hasChild" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="hasParent" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="shouldAddChildrenToNodeAndCountThemCorrectly" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="shouldNotAddNodeFromOneSceneAsChildToNodeInOtherScene" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="shouldAddChildToNodeAndGetParent" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="constGetChildAndGetParentBehaveAsNonConstVersion" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="shouldRemoveChildOnDestruction" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="shouldRemoveParentOnItsDestruction" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="shouldRemoveChild" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="shouldAddParentToNodeAndGetChild" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="shouldRemoveParent" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="confidenceTest_shouldRemoveAllChildren" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="reportsErrorWhenRemovinNonExistingParent" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="shouldReplaceParentWithaddChild" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="shouldReplaceParentWithSetParent" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="shouldOrderChildrenAccordingToTheirAddingToTheirParent" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="shouldAdaptChildOrderWhenChildrenAreRemovedFromParent" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="canBeConvertedToNode" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="reportsErrorWhenSettingParentToItself" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="reportsErrorWhenSettingParaentFromAnotherScene" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="reportsErrorWhenSettingChildToItself" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="isNotDirtyInitially" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="canBeMarkedDirty" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="isMarkedDirtyWhenSettingParent" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="isMarkedDirtyWhenAddingToParent" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="isMarkedDirtyWhenRemovedFromParent" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="staysCleanWhenSettingChild" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="isMarkedDirtyWhenParentDestroyed" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="staysCleanWhenRemovingNonExistingParent" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="getsIdentityModelMatrixInitially" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="getsIdentityInverseModelMatrixInitially" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="getsModelMatrixComputedFromTransformationChain" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="getsInverseModelMatrixComputedFromTransformationChain" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
    <testcase name="instantiationDoesNotCreateMultipleLLNodes" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTest/5" />
    <testcase name="destructionDestroysLLNode" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTest/5" />
  </testsuite>
  <testsuite name="NodeTransformationTest/0" tests="6" failures="0" disabled="0" errors="0" time="0.033">
    <testcase name="setTranslate" type_param="ramses::Node" status="run" time="0.005" classname="NodeTransformationTest/0" />
    <testcase name="translate" type_param="ramses::Node" status="run" time="0.006" classname="NodeTransformationTest/0" />
    <testcase name="setRotation" type_param="ramses::Node" status="run" time="0.005" classname="NodeTransformationTest/0" />
    <testcase name="rotate" type_param="ramses::Node" status="run" time="0.006" classname="NodeTransformationTest/0" />
    <testcase name="setScaling" type_param="ramses::Node" status="run" time="0.006" classname="NodeTransformationTest/0" />
    <testcase name="scale" type_param="ramses::Node" status="run" time="0.005" classname="NodeTransformationTest/0" />
  </testsuite>
  <testsuite name="NodeTransformationTest/1" tests="6" failures="0" disabled="0" errors="0" time="0.032">
    <testcase name="setTranslate" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTransformationTest/1" />
    <testcase name="translate" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTransformationTest/1" />
    <testcase name="setRotation" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTransformationTest/1" />
    <testcase name="rotate" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTransformationTest/1" />
    <testcase name="setScaling" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTransformationTest/1" />
    <testcase name="scale" type_param="ramses::MeshNode" status="run" time="0.005" classname="NodeTransformationTest/1" />
  </testsuite>
  <testsuite name="NodeTransformationTest/2" tests="6" failures="0" disabled="0" errors="0" time="0.032">
    <testcase name="setTranslate" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTransformationTest/2" />
    <testcase name="translate" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTransformationTest/2" />
    <testcase name="setRotation" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTransformationTest/2" />
    <testcase name="rotate" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTransformationTest/2" />
    <testcase name="setScaling" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTransformationTest/2" />
    <testcase name="scale" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="NodeTransformationTest/2" />
  </testsuite>
  <testsuite name="NodeTransformationTest/3" tests="6" failures="0" disabled="0" errors="0" time="0.036">
    <testcase name="setTranslate" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTransformationTest/3" />
    <testcase name="translate" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTransformationTest/3" />
    <testcase name="setRotation" type_param="ramses::PerspectiveCamera" status="run" time="0.008" classname="NodeTransformationTest/3" />
    <testcase name="rotate" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTransformationTest/3" />
    <testcase name="setScaling" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTransformationTest/3" />
    <testcase name="scale" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTransformationTest/3" />
  </testsuite>
  <testsuite name="NodeTransformationTest/4" tests="6" failures="0" disabled="0" errors="0" time="0.032">
    <testcase name="setTranslate" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTransformationTest/4" />
    <testcase name="translate" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTransformationTest/4" />
    <testcase name="setRotation" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTransformationTest/4" />
    <testcase name="rotate" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTransformationTest/4" />
    <testcase name="setScaling" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTransformationTest/4" />
    <testcase name="scale" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTransformationTest/4" />
  </testsuite>
  <testsuite name="NodeTransformationTest/5" tests="6" failures="0" disabled="0" errors="0" time="0.034">
    <testcase name="setTranslate" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTransformationTest/5" />
    <testcase name="translate" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTransformationTest/5" />
    <testcase name="setRotation" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTransformationTest/5" />
    <testcase name="rotate" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTransformationTest/5" />
    <testcase name="setScaling" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTransformationTest/5" />
    <testcase name="scale" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTransformationTest/5" />
  </testsuite>
  <testsuite name="NodeTransformationTestWithPublishedScene/0" tests="3" failures="0" disabled="0" errors="0" time="0.006">
    <testcase name="setTranslateWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::Node" status="run" time="0" classname="NodeTransformationTestWithPublishedScene/0" />
    <testcase name="setRotationWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::Node" status="run" time="0.001" classname="NodeTransformationTestWithPublishedScene/0" />
    <testcase name="setScalingWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::Node" status="run" time="0.005" classname="NodeTransformationTestWithPublishedScene/0" />
  </testsuite>
  <testsuite name="NodeTransformationTestWithPublishedScene/1" tests="3" failures="0" disabled="0" errors="0" time="0.012">
    <testcase name="setTranslateWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTransformationTestWithPublishedScene/1" />
    <testcase name="setRotationWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::MeshNode" status="run" time="0.006" classname="NodeTransformationTestWithPublishedScene/1" />
    <testcase name="setScalingWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::MeshNode" status="run" time="0" classname="NodeTransformationTestWithPublishedScene/1" />
  </testsuite>
  <testsuite name="NodeTransformationTestWithPublishedScene/2" tests="3" failures="0" disabled="0" errors="0" time="0.012">
    <testcase name="setTranslateWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTransformationTestWithPublishedScene/2" />
    <testcase name="setRotationWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="NodeTransformationTestWithPublishedScene/2" />
    <testcase name="setScalingWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::RemoteCamera" status="run" time="0" classname="NodeTransformationTestWithPublishedScene/2" />
  </testsuite>
  <testsuite name="NodeTransformationTestWithPublishedScene/3" tests="3" failures="0" disabled="0" errors="0" time="0.017">
    <testcase name="setTranslateWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="NodeTransformationTestWithPublishedScene/3" />
    <testcase name="setRotationWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTransformationTestWithPublishedScene/3" />
    <testcase name="setScalingWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="NodeTransformationTestWithPublishedScene/3" />
  </testsuite>
  <testsuite name="NodeTransformationTestWithPublishedScene/4" tests="3" failures="0" disabled="0" errors="0" time="0.017">
    <testcase name="setTranslateWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTransformationTestWithPublishedScene/4" />
    <testcase name="setRotationWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="NodeTransformationTestWithPublishedScene/4" />
    <testcase name="setScalingWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="NodeTransformationTestWithPublishedScene/4" />
  </testsuite>
  <testsuite name="NodeTransformationTestWithPublishedScene/5" tests="3" failures="0" disabled="0" errors="0" time="0.017">
    <testcase name="setTranslateWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTransformationTestWithPublishedScene/5" />
    <testcase name="setRotationWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::PickableObject" status="run" time="0.006" classname="NodeTransformationTestWithPublishedScene/5" />
    <testcase name="setScalingWithValuesEqualToCurrentValuesDoesNotCreateSceneActions" type_param="ramses::PickableObject" status="run" time="0.005" classname="NodeTransformationTestWithPublishedScene/5" />
  </testsuite>
  <testsuite name="ANodeVisibilityTest/0" tests="12" failures="0" disabled="0" errors="0" time="0.067">
    <testcase name="isVisibleInitially" type_param="ramses::Node" status="run" time="0.006" classname="ANodeVisibilityTest/0" />
    <testcase name="canChangeVisibility" type_param="ramses::Node" status="run" time="0.006" classname="ANodeVisibilityTest/0" />
    <testcase name="isMarkedDirtyWhenChangingVisibility" type_param="ramses::Node" status="run" time="0.005" classname="ANodeVisibilityTest/0" />
    <testcase name="staysCleanWhenSettingTheSameVisibility" type_param="ramses::Node" status="run" time="0.006" classname="ANodeVisibilityTest/0" />
    <testcase name="confidenceTest_isMarkedDirtyWhenChangingVisibilityMultipleTimes" type_param="ramses::Node" status="run" time="0.005" classname="ANodeVisibilityTest/0" />
    <testcase name="hasFlattenedVisibilitySetInitially" type_param="ramses::Node" status="run" time="0.006" classname="ANodeVisibilityTest/0" />
    <testcase name="visibilityPropagatesFromParentToChildrenOnFlush" type_param="ramses::Node" status="run" time="0.005" classname="ANodeVisibilityTest/0" />
    <testcase name="offVisibilityPropagatesFromParentToChildrenOnFlush" type_param="ramses::Node" status="run" time="0.006" classname="ANodeVisibilityTest/0" />
    <testcase name="visibilityPropagatesFromGrandParentToChildrenOnFlush" type_param="ramses::Node" status="run" time="0.005" classname="ANodeVisibilityTest/0" />
    <testcase name="offVisibilityPropagatesFromGrandParentToChildrenOnFlush" type_param="ramses::Node" status="run" time="0.006" classname="ANodeVisibilityTest/0" />
    <testcase name="offWinsAgainstInvisibleWhenPropagatingDownwards" type_param="ramses::Node" status="run" time="0.005" classname="ANodeVisibilityTest/0" />
    <testcase name="visibilityIsFlattenedToMeshNodeItself" type_param="ramses::Node" status="run" time="0.006" classname="ANodeVisibilityTest/0" />
  </testsuite>
  <testsuite name="ANodeVisibilityTest/1" tests="12" failures="0" disabled="0" errors="0" time="0.065">
    <testcase name="isVisibleInitially" type_param="ramses::MeshNode" status="run" time="0.006" classname="ANodeVisibilityTest/1" />
    <testcase name="canChangeVisibility" type_param="ramses::MeshNode" status="run" time="0.005" classname="ANodeVisibilityTest/1" />
    <testcase name="isMarkedDirtyWhenChangingVisibility" type_param="ramses::MeshNode" status="run" time="0.006" classname="ANodeVisibilityTest/1" />
    <testcase name="staysCleanWhenSettingTheSameVisibility" type_param="ramses::MeshNode" status="run" time="0.005" classname="ANodeVisibilityTest/1" />
    <testcase name="confidenceTest_isMarkedDirtyWhenChangingVisibilityMultipleTimes" type_param="ramses::MeshNode" status="run" time="0.005" classname="ANodeVisibilityTest/1" />
    <testcase name="hasFlattenedVisibilitySetInitially" type_param="ramses::MeshNode" status="run" time="0.006" classname="ANodeVisibilityTest/1" />
    <testcase name="visibilityPropagatesFromParentToChildrenOnFlush" type_param="ramses::MeshNode" status="run" time="0.005" classname="ANodeVisibilityTest/1" />
    <testcase name="offVisibilityPropagatesFromParentToChildrenOnFlush" type_param="ramses::MeshNode" status="run" time="0.005" classname="ANodeVisibilityTest/1" />
    <testcase name="visibilityPropagatesFromGrandParentToChildrenOnFlush" type_param="ramses::MeshNode" status="run" time="0.006" classname="ANodeVisibilityTest/1" />
    <testcase name="offVisibilityPropagatesFromGrandParentToChildrenOnFlush" type_param="ramses::MeshNode" status="run" time="0.005" classname="ANodeVisibilityTest/1" />
    <testcase name="offWinsAgainstInvisibleWhenPropagatingDownwards" type_param="ramses::MeshNode" status="run" time="0.005" classname="ANodeVisibilityTest/1" />
    <testcase name="visibilityIsFlattenedToMeshNodeItself" type_param="ramses::MeshNode" status="run" time="0.005" classname="ANodeVisibilityTest/1" />
  </testsuite>
  <testsuite name="ANodeVisibilityTest/2" tests="12" failures="0" disabled="0" errors="0" time="0.065">
    <testcase name="isVisibleInitially" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="ANodeVisibilityTest/2" />
    <testcase name="canChangeVisibility" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="ANodeVisibilityTest/2" />
    <testcase name="isMarkedDirtyWhenChangingVisibility" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="ANodeVisibilityTest/2" />
    <testcase name="staysCleanWhenSettingTheSameVisibility" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="ANodeVisibilityTest/2" />
    <testcase name="confidenceTest_isMarkedDirtyWhenChangingVisibilityMultipleTimes" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="ANodeVisibilityTest/2" />
    <testcase name="hasFlattenedVisibilitySetInitially" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="ANodeVisibilityTest/2" />
    <testcase name="visibilityPropagatesFromParentToChildrenOnFlush" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="ANodeVisibilityTest/2" />
    <testcase name="offVisibilityPropagatesFromParentToChildrenOnFlush" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="ANodeVisibilityTest/2" />
    <testcase name="visibilityPropagatesFromGrandParentToChildrenOnFlush" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="ANodeVisibilityTest/2" />
    <testcase name="offVisibilityPropagatesFromGrandParentToChildrenOnFlush" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="ANodeVisibilityTest/2" />
    <testcase name="offWinsAgainstInvisibleWhenPropagatingDownwards" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="ANodeVisibilityTest/2" />
    <testcase name="visibilityIsFlattenedToMeshNodeItself" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="ANodeVisibilityTest/2" />
  </testsuite>
  <testsuite name="ANodeVisibilityTest/3" tests="12" failures="0" disabled="0" errors="0" time="0.074">
    <testcase name="isVisibleInitially" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ANodeVisibilityTest/3" />
    <testcase name="canChangeVisibility" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="ANodeVisibilityTest/3" />
    <testcase name="isMarkedDirtyWhenChangingVisibility" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ANodeVisibilityTest/3" />
    <testcase name="staysCleanWhenSettingTheSameVisibility" type_param="ramses::PerspectiveCamera" status="run" time="0.013" classname="ANodeVisibilityTest/3" />
    <testcase name="confidenceTest_isMarkedDirtyWhenChangingVisibilityMultipleTimes" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ANodeVisibilityTest/3" />
    <testcase name="hasFlattenedVisibilitySetInitially" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="ANodeVisibilityTest/3" />
    <testcase name="visibilityPropagatesFromParentToChildrenOnFlush" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="ANodeVisibilityTest/3" />
    <testcase name="offVisibilityPropagatesFromParentToChildrenOnFlush" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ANodeVisibilityTest/3" />
    <testcase name="visibilityPropagatesFromGrandParentToChildrenOnFlush" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="ANodeVisibilityTest/3" />
    <testcase name="offVisibilityPropagatesFromGrandParentToChildrenOnFlush" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ANodeVisibilityTest/3" />
    <testcase name="offWinsAgainstInvisibleWhenPropagatingDownwards" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="ANodeVisibilityTest/3" />
    <testcase name="visibilityIsFlattenedToMeshNodeItself" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="ANodeVisibilityTest/3" />
  </testsuite>
  <testsuite name="ANodeVisibilityTest/4" tests="12" failures="0" disabled="0" errors="0" time="0.066">
    <testcase name="isVisibleInitially" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ANodeVisibilityTest/4" />
    <testcase name="canChangeVisibility" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="ANodeVisibilityTest/4" />
    <testcase name="isMarkedDirtyWhenChangingVisibility" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ANodeVisibilityTest/4" />
    <testcase name="staysCleanWhenSettingTheSameVisibility" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="ANodeVisibilityTest/4" />
    <testcase name="confidenceTest_isMarkedDirtyWhenChangingVisibilityMultipleTimes" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ANodeVisibilityTest/4" />
    <testcase name="hasFlattenedVisibilitySetInitially" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="ANodeVisibilityTest/4" />
    <testcase name="visibilityPropagatesFromParentToChildrenOnFlush" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ANodeVisibilityTest/4" />
    <testcase name="offVisibilityPropagatesFromParentToChildrenOnFlush" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="ANodeVisibilityTest/4" />
    <testcase name="visibilityPropagatesFromGrandParentToChildrenOnFlush" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="ANodeVisibilityTest/4" />
    <testcase name="offVisibilityPropagatesFromGrandParentToChildrenOnFlush" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ANodeVisibilityTest/4" />
    <testcase name="offWinsAgainstInvisibleWhenPropagatingDownwards" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="ANodeVisibilityTest/4" />
    <testcase name="visibilityIsFlattenedToMeshNodeItself" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="ANodeVisibilityTest/4" />
  </testsuite>
  <testsuite name="ANodeVisibilityTest/5" tests="12" failures="0" disabled="0" errors="0" time="0.067">
    <testcase name="isVisibleInitially" type_param="ramses::PickableObject" status="run" time="0.006" classname="ANodeVisibilityTest/5" />
    <testcase name="canChangeVisibility" type_param="ramses::PickableObject" status="run" time="0.005" classname="ANodeVisibilityTest/5" />
    <testcase name="isMarkedDirtyWhenChangingVisibility" type_param="ramses::PickableObject" status="run" time="0.006" classname="ANodeVisibilityTest/5" />
    <testcase name="staysCleanWhenSettingTheSameVisibility" type_param="ramses::PickableObject" status="run" time="0.005" classname="ANodeVisibilityTest/5" />
    <testcase name="confidenceTest_isMarkedDirtyWhenChangingVisibilityMultipleTimes" type_param="ramses::PickableObject" status="run" time="0.005" classname="ANodeVisibilityTest/5" />
    <testcase name="hasFlattenedVisibilitySetInitially" type_param="ramses::PickableObject" status="run" time="0.006" classname="ANodeVisibilityTest/5" />
    <testcase name="visibilityPropagatesFromParentToChildrenOnFlush" type_param="ramses::PickableObject" status="run" time="0.005" classname="ANodeVisibilityTest/5" />
    <testcase name="offVisibilityPropagatesFromParentToChildrenOnFlush" type_param="ramses::PickableObject" status="run" time="0.006" classname="ANodeVisibilityTest/5" />
    <testcase name="visibilityPropagatesFromGrandParentToChildrenOnFlush" type_param="ramses::PickableObject" status="run" time="0.005" classname="ANodeVisibilityTest/5" />
    <testcase name="offVisibilityPropagatesFromGrandParentToChildrenOnFlush" type_param="ramses::PickableObject" status="run" time="0.006" classname="ANodeVisibilityTest/5" />
    <testcase name="offWinsAgainstInvisibleWhenPropagatingDownwards" type_param="ramses::PickableObject" status="run" time="0.006" classname="ANodeVisibilityTest/5" />
    <testcase name="visibilityIsFlattenedToMeshNodeItself" type_param="ramses::PickableObject" status="run" time="0.005" classname="ANodeVisibilityTest/5" />
  </testsuite>
  <testsuite name="APickableObject" tests="12" failures="0" disabled="0" errors="0" time="0.067">
    <testcase name="CanSetAndGetPickableCamera" status="run" time="0.006" classname="APickableObject" />
    <testcase name="CannotSetPickableCameraFromAnotherScene" status="run" time="0.005" classname="APickableObject" />
    <testcase name="CannotSetInvalidPickableCamera" status="run" time="0.006" classname="APickableObject" />
    <testcase name="CanGetGeometryBufferOfPickableObject" status="run" time="0.005" classname="APickableObject" />
    <testcase name="CanSetAndGetPickableObjectId" status="run" time="0.006" classname="APickableObject" />
    <testcase name="PickableObjectIsEnabledByDefault" status="run" time="0.006" classname="APickableObject" />
    <testcase name="CanEnableAndDisablePickableObject" status="run" time="0.005" classname="APickableObject" />
    <testcase name="CanValidatePickableObject" status="run" time="0.006" classname="APickableObject" />
    <testcase name="CannotValidatePickableObjectWhenReferencingDeletedGeometryBuffer" status="run" time="0.005" classname="APickableObject" />
    <testcase name="CannotValidatePickableObjectWhenReferencingInvalidGeometryBuffer" status="run" time="0.006" classname="APickableObject" />
    <testcase name="CannotValidatePickableObjectWithoutSettingCamera" status="run" time="0.005" classname="APickableObject" />
    <testcase name="CannotValidatePickableObjectWhenReferencingDeletedCamera" status="run" time="0.006" classname="APickableObject" />
  </testsuite>
  <testsuite name="AQuadSize" tests="3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="KeepsParametersProvidedToConstructor" status="run" time="0" classname="AQuadSize" />
    <testcase name="IsEqualToOtherQuadSizeIFFSizeValuesAreEqual" status="run" time="0" classname="AQuadSize" />
    <testcase name="ComputesAreaWhichIsEqualToWidthTimesHeight" status="run" time="0" classname="AQuadSize" />
  </testsuite>
  <testsuite name="AQuadOffset" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="KeepsParametersProvidedToConstructor" status="run" time="0" classname="AQuadOffset" />
    <testcase name="IsEqualToOtherQuadSizeIFFPositionValuesAreEqual" status="run" time="0" classname="AQuadOffset" />
  </testsuite>
  <testsuite name="QuadConfidenceTest" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="QuadHasCommonEdgeReturnsFalseForIntersectingQuads_mergeDoesNothing_intersectSucceeds" status="run" time="0" classname="QuadConfidenceTest" />
    <testcase name="QuadHasCommonEdgeReturnsFalseForQuadsTooFarApart_mergeDoesNothing_intersectFails" status="run" time="0" classname="QuadConfidenceTest" />
    <testcase name="QuadHasCommonEdgeReturnsFalseForQuadsTouchingButOff_mergeDoesNothing_intersectFails" status="run" time="0" classname="QuadConfidenceTest" />
    <testcase name="QuadHasCommonEdgeReturnsFalseForQuadsDifferentEdgeSize_mergeDoesNothing_intersectFails" status="run" time="0" classname="QuadConfidenceTest" />
    <testcase name="QuadHasCommonEdgeReturnsTrueInCaseEdgeIsCommon_mergeMerges_intersectFails" status="run" time="0" classname="QuadConfidenceTest" />
  </testsuite>
  <testsuite name="ARamsesClient" tests="10" failures="0" disabled="0" errors="0" time="0.005">
    <testcase name="canBeValidated" status="run" time="0" classname="ARamsesClient" />
    <testcase name="failsValidationWhenContainsSceneWithInvalidRenderPass" status="run" time="0.001" classname="ARamsesClient" />
    <testcase name="failsValidationWhenContainsSceneWithInvalidCamera" status="run" time="0" classname="ARamsesClient" />
    <testcase name="isNotConnectedInitially" status="run" time="0.001" classname="ARamsesClient" />
    <testcase name="connectLifeCycleOK" status="run" time="0" classname="ARamsesClient" />
    <testcase name="reportsErrorWhenConnectingSecondTime" status="run" time="0.001" classname="ARamsesClient" />
    <testcase name="disconnectsViaApplication" status="run" time="0" classname="ARamsesClient" />
    <testcase name="reportsErrorWhenDisconnectingSecondTime" status="run" time="0.001" classname="ARamsesClient" />
    <testcase name="noEventHandlerCallbacksIfNoEvents" status="run" time="0" classname="ARamsesClient" />
    <testcase name="canLiveParallelToAnotherClientUsingTheSameFramework" status="run" time="0.001" classname="ARamsesClient" />
  </testsuite>
  <testsuite name="ALocalRamsesClient" tests="26" failures="0" disabled="0" errors="0" time="0.023">
    <testcase name="canGetResourceByID" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="returnsNULLWhenResourceWithIDCannotBeFound" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="returnsNULLWhenTryingToFindDeletedResource" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="disconnectingWhenDisconnectedGivesError" status="run" time="0" classname="ALocalRamsesClient" />
    <testcase name="connectingTwiceGivesError" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="requestNonexistantStatusMessage" status="run" time="0" classname="ALocalRamsesClient" />
    <testcase name="createsSceneWithGivenId" status="run" time="0" classname="ALocalRamsesClient" />
    <testcase name="createsSceneFailsWithInvalidId" status="run" time="0" classname="ALocalRamsesClient" />
    <testcase name="simpleSceneGetsDestroyedProperlyWithoutExplicitDestroyCall" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSLString_withName" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSLString_withDefines" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSLString_invalidVertexShader" status="run" time="0" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSLString_emptyVertexShader" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSLString_invalidFragmentShader" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSLString_emptyFragmentShader" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSLString_invalidDefines" status="run" time="0" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSLString_withInputSemantics" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSLString_withInputSemanticsOfWrongType" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSL_withName" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSL_nonExistantVertexShader" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSL_nonExistantFragmentShader" status="run" time="0" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSL_NULLVertexShader" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="createEffectFromGLSL_NULLFragmentShader" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="verifyHLAPILogCanHandleNullPtrReturnWhenEnabled" status="run" time="0.001" classname="ALocalRamsesClient" />
    <testcase name="requestValidStatusMessage" status="run" time="0" classname="ALocalRamsesClient" />
    <testcase name="isUnpublishedOnDestroy" status="run" time="0.005" classname="ALocalRamsesClient" />
  </testsuite>
  <testsuite name="RamsesClient" tests="2" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="canCreateClientWithNULLNameAndCmdLineArguments" status="run" time="0" classname="RamsesClient" />
    <testcase name="canCreateClientWithoutCmdLineArguments" status="run" time="0.001" classname="RamsesClient" />
  </testsuite>
  <testsuite name="ARamsesFrameworkImplInAClientLib" tests="6" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="canCreateAClient" status="run" time="0" classname="ARamsesFrameworkImplInAClientLib" />
    <testcase name="canCreateMultipleClients" status="run" time="0" classname="ARamsesFrameworkImplInAClientLib" />
    <testcase name="acceptsLocallyCreatedClientsForDestruction" status="run" time="0" classname="ARamsesFrameworkImplInAClientLib" />
    <testcase name="doesNotAcceptForeignCreatedClientsForDestruction" status="run" time="0.001" classname="ARamsesFrameworkImplInAClientLib" />
    <testcase name="doesNotAcceptSameClientTwiceForDestruction" status="run" time="0" classname="ARamsesFrameworkImplInAClientLib" />
    <testcase name="canCreateDestroyAndRecreateAClient" status="run" time="0" classname="ARamsesFrameworkImplInAClientLib" />
  </testsuite>
  <testsuite name="ARamsesHmiUtils" tests="6" failures="0" disabled="0" errors="0" time="0.003">
    <testcase name="notAllResourcesKnownWhenLoadingNoResources" status="run" time="0.001" classname="ARamsesHmiUtils" />
    <testcase name="notAllResourcesKnownWhenLoadingOnlySomeResources" status="run" time="0" classname="ARamsesHmiUtils" />
    <testcase name="notAllResourcesKnownWhenLoadingCorrectNumberButDifferentResources" status="run" time="0.001" classname="ARamsesHmiUtils" />
    <testcase name="allResourcesKnownWhenLoadingAllNeededResourcesWithScene" status="run" time="0" classname="ARamsesHmiUtils" />
    <testcase name="allResourcesKnownWhenLoadingMissingResourcesLater" status="run" time="0.001" classname="ARamsesHmiUtils" />
    <testcase name="allResourcesKnownWhenCompletedWithNewlyCreatedResource" status="run" time="0" classname="ARamsesHmiUtils" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/0" tests="7" failures="0" disabled="0" errors="0" time="0.038">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::Node" status="run" time="0.006" classname="SceneOwnershipTest/0" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::Node" status="run" time="0.005" classname="SceneOwnershipTest/0" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::Node" status="run" time="0.005" classname="SceneOwnershipTest/0" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::Node" status="run" time="0.006" classname="SceneOwnershipTest/0" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::Node" status="run" time="0.005" classname="SceneOwnershipTest/0" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::Node" status="run" time="0.005" classname="SceneOwnershipTest/0" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::Node" status="run" time="0.006" classname="SceneOwnershipTest/0" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/1" tests="7" failures="0" disabled="0" errors="0" time="0.04">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::MeshNode" status="run" time="0.007" classname="SceneOwnershipTest/1" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::MeshNode" status="run" time="0.005" classname="SceneOwnershipTest/1" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::MeshNode" status="run" time="0.006" classname="SceneOwnershipTest/1" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::MeshNode" status="run" time="0.005" classname="SceneOwnershipTest/1" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::MeshNode" status="run" time="0.006" classname="SceneOwnershipTest/1" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::MeshNode" status="run" time="0.005" classname="SceneOwnershipTest/1" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::MeshNode" status="run" time="0.006" classname="SceneOwnershipTest/1" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/2" tests="7" failures="0" disabled="0" errors="0" time="0.038">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="SceneOwnershipTest/2" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="SceneOwnershipTest/2" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="SceneOwnershipTest/2" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="SceneOwnershipTest/2" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="SceneOwnershipTest/2" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="SceneOwnershipTest/2" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="SceneOwnershipTest/2" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/3" tests="7" failures="0" disabled="0" errors="0" time="0.039">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="SceneOwnershipTest/3" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="SceneOwnershipTest/3" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="SceneOwnershipTest/3" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="SceneOwnershipTest/3" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="SceneOwnershipTest/3" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="SceneOwnershipTest/3" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="SceneOwnershipTest/3" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/4" tests="7" failures="0" disabled="0" errors="0" time="0.037">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="SceneOwnershipTest/4" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="SceneOwnershipTest/4" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="SceneOwnershipTest/4" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="SceneOwnershipTest/4" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="SceneOwnershipTest/4" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="SceneOwnershipTest/4" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="SceneOwnershipTest/4" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/5" tests="7" failures="0" disabled="0" errors="0" time="0.04">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::Appearance" status="run" time="0.006" classname="SceneOwnershipTest/5" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::Appearance" status="run" time="0.006" classname="SceneOwnershipTest/5" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::Appearance" status="run" time="0.005" classname="SceneOwnershipTest/5" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::Appearance" status="run" time="0.006" classname="SceneOwnershipTest/5" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::Appearance" status="run" time="0.006" classname="SceneOwnershipTest/5" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::Appearance" status="run" time="0.005" classname="SceneOwnershipTest/5" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::Appearance" status="run" time="0.006" classname="SceneOwnershipTest/5" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/6" tests="7" failures="0" disabled="0" errors="0" time="0.039">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="SceneOwnershipTest/6" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::GeometryBinding" status="run" time="0.005" classname="SceneOwnershipTest/6" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="SceneOwnershipTest/6" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::GeometryBinding" status="run" time="0.005" classname="SceneOwnershipTest/6" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="SceneOwnershipTest/6" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="SceneOwnershipTest/6" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::GeometryBinding" status="run" time="0.005" classname="SceneOwnershipTest/6" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/7" tests="7" failures="0" disabled="0" errors="0" time="0.037">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::RenderGroup" status="run" time="0.005" classname="SceneOwnershipTest/7" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::RenderGroup" status="run" time="0.006" classname="SceneOwnershipTest/7" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::RenderGroup" status="run" time="0.005" classname="SceneOwnershipTest/7" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::RenderGroup" status="run" time="0.005" classname="SceneOwnershipTest/7" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::RenderGroup" status="run" time="0.006" classname="SceneOwnershipTest/7" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::RenderGroup" status="run" time="0.005" classname="SceneOwnershipTest/7" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::RenderGroup" status="run" time="0.005" classname="SceneOwnershipTest/7" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/8" tests="7" failures="0" disabled="0" errors="0" time="0.038">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::RenderPass" status="run" time="0.005" classname="SceneOwnershipTest/8" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::RenderPass" status="run" time="0.006" classname="SceneOwnershipTest/8" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::RenderPass" status="run" time="0.005" classname="SceneOwnershipTest/8" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::RenderPass" status="run" time="0.005" classname="SceneOwnershipTest/8" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::RenderPass" status="run" time="0.006" classname="SceneOwnershipTest/8" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::RenderPass" status="run" time="0.005" classname="SceneOwnershipTest/8" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::RenderPass" status="run" time="0.006" classname="SceneOwnershipTest/8" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/9" tests="7" failures="0" disabled="0" errors="0" time="0.039">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::BlitPass" status="run" time="0.005" classname="SceneOwnershipTest/9" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::BlitPass" status="run" time="0.006" classname="SceneOwnershipTest/9" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::BlitPass" status="run" time="0.005" classname="SceneOwnershipTest/9" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::BlitPass" status="run" time="0.006" classname="SceneOwnershipTest/9" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::BlitPass" status="run" time="0.006" classname="SceneOwnershipTest/9" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::BlitPass" status="run" time="0.005" classname="SceneOwnershipTest/9" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::BlitPass" status="run" time="0.006" classname="SceneOwnershipTest/9" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/10" tests="7" failures="0" disabled="0" errors="0" time="0.038">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::TextureSampler" status="run" time="0.005" classname="SceneOwnershipTest/10" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::TextureSampler" status="run" time="0.006" classname="SceneOwnershipTest/10" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::TextureSampler" status="run" time="0.005" classname="SceneOwnershipTest/10" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::TextureSampler" status="run" time="0.006" classname="SceneOwnershipTest/10" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::TextureSampler" status="run" time="0.005" classname="SceneOwnershipTest/10" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::TextureSampler" status="run" time="0.006" classname="SceneOwnershipTest/10" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::TextureSampler" status="run" time="0.005" classname="SceneOwnershipTest/10" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/11" tests="7" failures="0" disabled="0" errors="0" time="0.039">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="SceneOwnershipTest/11" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="SceneOwnershipTest/11" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::RenderBuffer" status="run" time="0.005" classname="SceneOwnershipTest/11" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="SceneOwnershipTest/11" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::RenderBuffer" status="run" time="0.005" classname="SceneOwnershipTest/11" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="SceneOwnershipTest/11" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::RenderBuffer" status="run" time="0.005" classname="SceneOwnershipTest/11" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/12" tests="7" failures="0" disabled="0" errors="0" time="0.037">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::RenderTarget" status="run" time="0.006" classname="SceneOwnershipTest/12" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::RenderTarget" status="run" time="0.005" classname="SceneOwnershipTest/12" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::RenderTarget" status="run" time="0.005" classname="SceneOwnershipTest/12" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::RenderTarget" status="run" time="0.006" classname="SceneOwnershipTest/12" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::RenderTarget" status="run" time="0.005" classname="SceneOwnershipTest/12" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::RenderTarget" status="run" time="0.005" classname="SceneOwnershipTest/12" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::RenderTarget" status="run" time="0.005" classname="SceneOwnershipTest/12" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/13" tests="7" failures="0" disabled="0" errors="0" time="0.037">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::DataFloat" status="run" time="0.006" classname="SceneOwnershipTest/13" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::DataFloat" status="run" time="0.005" classname="SceneOwnershipTest/13" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::DataFloat" status="run" time="0.005" classname="SceneOwnershipTest/13" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::DataFloat" status="run" time="0.006" classname="SceneOwnershipTest/13" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::DataFloat" status="run" time="0.005" classname="SceneOwnershipTest/13" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::DataFloat" status="run" time="0.005" classname="SceneOwnershipTest/13" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::DataFloat" status="run" time="0.005" classname="SceneOwnershipTest/13" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/14" tests="7" failures="0" disabled="0" errors="0" time="0.037">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::DataVector2f" status="run" time="0.006" classname="SceneOwnershipTest/14" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::DataVector2f" status="run" time="0.005" classname="SceneOwnershipTest/14" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::DataVector2f" status="run" time="0.005" classname="SceneOwnershipTest/14" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::DataVector2f" status="run" time="0.005" classname="SceneOwnershipTest/14" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::DataVector2f" status="run" time="0.006" classname="SceneOwnershipTest/14" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::DataVector2f" status="run" time="0.005" classname="SceneOwnershipTest/14" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::DataVector2f" status="run" time="0.005" classname="SceneOwnershipTest/14" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/15" tests="7" failures="0" disabled="0" errors="0" time="0.038">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::DataVector3f" status="run" time="0.005" classname="SceneOwnershipTest/15" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::DataVector3f" status="run" time="0.006" classname="SceneOwnershipTest/15" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::DataVector3f" status="run" time="0.005" classname="SceneOwnershipTest/15" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::DataVector3f" status="run" time="0.005" classname="SceneOwnershipTest/15" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::DataVector3f" status="run" time="0.006" classname="SceneOwnershipTest/15" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::DataVector3f" status="run" time="0.005" classname="SceneOwnershipTest/15" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::DataVector3f" status="run" time="0.006" classname="SceneOwnershipTest/15" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/16" tests="7" failures="0" disabled="0" errors="0" time="0.038">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::DataVector4f" status="run" time="0.005" classname="SceneOwnershipTest/16" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::DataVector4f" status="run" time="0.006" classname="SceneOwnershipTest/16" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::DataVector4f" status="run" time="0.005" classname="SceneOwnershipTest/16" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::DataVector4f" status="run" time="0.006" classname="SceneOwnershipTest/16" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::DataVector4f" status="run" time="0.005" classname="SceneOwnershipTest/16" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::DataVector4f" status="run" time="0.006" classname="SceneOwnershipTest/16" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::DataVector4f" status="run" time="0.005" classname="SceneOwnershipTest/16" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/17" tests="7" failures="0" disabled="0" errors="0" time="0.039">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::DataMatrix22f" status="run" time="0.006" classname="SceneOwnershipTest/17" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::DataMatrix22f" status="run" time="0.005" classname="SceneOwnershipTest/17" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::DataMatrix22f" status="run" time="0.006" classname="SceneOwnershipTest/17" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::DataMatrix22f" status="run" time="0.005" classname="SceneOwnershipTest/17" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::DataMatrix22f" status="run" time="0.006" classname="SceneOwnershipTest/17" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::DataMatrix22f" status="run" time="0.005" classname="SceneOwnershipTest/17" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::DataMatrix22f" status="run" time="0.006" classname="SceneOwnershipTest/17" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/18" tests="7" failures="0" disabled="0" errors="0" time="0.039">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::DataMatrix33f" status="run" time="0.005" classname="SceneOwnershipTest/18" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::DataMatrix33f" status="run" time="0.006" classname="SceneOwnershipTest/18" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::DataMatrix33f" status="run" time="0.006" classname="SceneOwnershipTest/18" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::DataMatrix33f" status="run" time="0.005" classname="SceneOwnershipTest/18" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::DataMatrix33f" status="run" time="0.006" classname="SceneOwnershipTest/18" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::DataMatrix33f" status="run" time="0.005" classname="SceneOwnershipTest/18" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::DataMatrix33f" status="run" time="0.006" classname="SceneOwnershipTest/18" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/19" tests="7" failures="0" disabled="0" errors="0" time="0.038">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::DataMatrix44f" status="run" time="0.005" classname="SceneOwnershipTest/19" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::DataMatrix44f" status="run" time="0.006" classname="SceneOwnershipTest/19" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::DataMatrix44f" status="run" time="0.005" classname="SceneOwnershipTest/19" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::DataMatrix44f" status="run" time="0.006" classname="SceneOwnershipTest/19" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::DataMatrix44f" status="run" time="0.005" classname="SceneOwnershipTest/19" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::DataMatrix44f" status="run" time="0.006" classname="SceneOwnershipTest/19" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::DataMatrix44f" status="run" time="0.005" classname="SceneOwnershipTest/19" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/20" tests="7" failures="0" disabled="0" errors="0" time="0.039">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::DataInt32" status="run" time="0.006" classname="SceneOwnershipTest/20" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::DataInt32" status="run" time="0.005" classname="SceneOwnershipTest/20" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::DataInt32" status="run" time="0.006" classname="SceneOwnershipTest/20" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::DataInt32" status="run" time="0.005" classname="SceneOwnershipTest/20" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::DataInt32" status="run" time="0.006" classname="SceneOwnershipTest/20" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::DataInt32" status="run" time="0.005" classname="SceneOwnershipTest/20" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::DataInt32" status="run" time="0.006" classname="SceneOwnershipTest/20" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/21" tests="7" failures="0" disabled="0" errors="0" time="0.039">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::DataVector2i" status="run" time="0.005" classname="SceneOwnershipTest/21" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::DataVector2i" status="run" time="0.005" classname="SceneOwnershipTest/21" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::DataVector2i" status="run" time="0.006" classname="SceneOwnershipTest/21" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::DataVector2i" status="run" time="0.005" classname="SceneOwnershipTest/21" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::DataVector2i" status="run" time="0.006" classname="SceneOwnershipTest/21" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::DataVector2i" status="run" time="0.005" classname="SceneOwnershipTest/21" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::DataVector2i" status="run" time="0.006" classname="SceneOwnershipTest/21" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/22" tests="7" failures="0" disabled="0" errors="0" time="0.038">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::DataVector3i" status="run" time="0.005" classname="SceneOwnershipTest/22" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::DataVector3i" status="run" time="0.006" classname="SceneOwnershipTest/22" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::DataVector3i" status="run" time="0.005" classname="SceneOwnershipTest/22" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::DataVector3i" status="run" time="0.006" classname="SceneOwnershipTest/22" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::DataVector3i" status="run" time="0.005" classname="SceneOwnershipTest/22" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::DataVector3i" status="run" time="0.006" classname="SceneOwnershipTest/22" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::DataVector3i" status="run" time="0.005" classname="SceneOwnershipTest/22" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/23" tests="7" failures="0" disabled="0" errors="0" time="0.039">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::DataVector4i" status="run" time="0.006" classname="SceneOwnershipTest/23" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::DataVector4i" status="run" time="0.005" classname="SceneOwnershipTest/23" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::DataVector4i" status="run" time="0.006" classname="SceneOwnershipTest/23" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::DataVector4i" status="run" time="0.005" classname="SceneOwnershipTest/23" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::DataVector4i" status="run" time="0.006" classname="SceneOwnershipTest/23" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::DataVector4i" status="run" time="0.005" classname="SceneOwnershipTest/23" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::DataVector4i" status="run" time="0.006" classname="SceneOwnershipTest/23" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/24" tests="7" failures="0" disabled="0" errors="0" time="0.039">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::StreamTexture" status="run" time="0.005" classname="SceneOwnershipTest/24" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::StreamTexture" status="run" time="0.006" classname="SceneOwnershipTest/24" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::StreamTexture" status="run" time="0.005" classname="SceneOwnershipTest/24" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::StreamTexture" status="run" time="0.006" classname="SceneOwnershipTest/24" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::StreamTexture" status="run" time="0.005" classname="SceneOwnershipTest/24" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::StreamTexture" status="run" time="0.006" classname="SceneOwnershipTest/24" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::StreamTexture" status="run" time="0.006" classname="SceneOwnershipTest/24" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/25" tests="7" failures="0" disabled="0" errors="0" time="0.038">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="SceneOwnershipTest/25" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="SceneOwnershipTest/25" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="SceneOwnershipTest/25" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="SceneOwnershipTest/25" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="SceneOwnershipTest/25" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="SceneOwnershipTest/25" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="SceneOwnershipTest/25" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/26" tests="7" failures="0" disabled="0" errors="0" time="0.039">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="SceneOwnershipTest/26" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="SceneOwnershipTest/26" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="SceneOwnershipTest/26" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="SceneOwnershipTest/26" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="SceneOwnershipTest/26" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="SceneOwnershipTest/26" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="SceneOwnershipTest/26" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/27" tests="7" failures="0" disabled="0" errors="0" time="0.038">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="SceneOwnershipTest/27" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::Texture2DBuffer" status="run" time="0.006" classname="SceneOwnershipTest/27" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="SceneOwnershipTest/27" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::Texture2DBuffer" status="run" time="0.006" classname="SceneOwnershipTest/27" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="SceneOwnershipTest/27" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::Texture2DBuffer" status="run" time="0.006" classname="SceneOwnershipTest/27" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="SceneOwnershipTest/27" />
  </testsuite>
  <testsuite name="SceneOwnershipTest/28" tests="7" failures="0" disabled="0" errors="0" time="0.039">
    <testcase name="sceneObjectsAreOfTypeSceneObject" type_param="ramses::PickableObject" status="run" time="0.006" classname="SceneOwnershipTest/28" />
    <testcase name="sceneObjectsHaveReferenceToTheirScene" type_param="ramses::PickableObject" status="run" time="0.005" classname="SceneOwnershipTest/28" />
    <testcase name="sceneContainsCreatedObject" type_param="ramses::PickableObject" status="run" time="0.005" classname="SceneOwnershipTest/28" />
    <testcase name="sceneDoesNotContainDestroyedObject" type_param="ramses::PickableObject" status="run" time="0.006" classname="SceneOwnershipTest/28" />
    <testcase name="creatingAndDestroyingObjectsUpdatesStatisticCounter" type_param="ramses::PickableObject" status="run" time="0.005" classname="SceneOwnershipTest/28" />
    <testcase name="sceneObjectNameChanged" type_param="ramses::PickableObject" status="run" time="0.006" classname="SceneOwnershipTest/28" />
    <testcase name="sceneNotContainsDestroyedObject" type_param="ramses::PickableObject" status="run" time="0.005" classname="SceneOwnershipTest/28" />
  </testsuite>
  <testsuite name="ClientOwnershipTest/0" tests="6" failures="0" disabled="0" errors="0" time="0.034">
    <testcase name="clientContainsCreatedObject" type_param="ramses::Scene" status="run" time="0.006" classname="ClientOwnershipTest/0" />
    <testcase name="clientDoesNotContainDestroyedObject" type_param="ramses::Scene" status="run" time="0.005" classname="ClientOwnershipTest/0" />
    <testcase name="clientObjectsAreOfTypeClientObject" type_param="ramses::Scene" status="run" time="0.006" classname="ClientOwnershipTest/0" />
    <testcase name="clientObjectsHaveReferenceToTheirClient" type_param="ramses::Scene" status="run" time="0.006" classname="ClientOwnershipTest/0" />
    <testcase name="clinetObjectNameChanged" type_param="ramses::Scene" status="run" time="0.005" classname="ClientOwnershipTest/0" />
    <testcase name="clientNotContainsDestroyedObject" type_param="ramses::Scene" status="run" time="0.006" classname="ClientOwnershipTest/0" />
  </testsuite>
  <testsuite name="ClientOwnershipTest/1" tests="6" failures="0" disabled="0" errors="0" time="0.033">
    <testcase name="clientContainsCreatedObject" type_param="ramses::Texture2D" status="run" time="0.005" classname="ClientOwnershipTest/1" />
    <testcase name="clientDoesNotContainDestroyedObject" type_param="ramses::Texture2D" status="run" time="0.006" classname="ClientOwnershipTest/1" />
    <testcase name="clientObjectsAreOfTypeClientObject" type_param="ramses::Texture2D" status="run" time="0.005" classname="ClientOwnershipTest/1" />
    <testcase name="clientObjectsHaveReferenceToTheirClient" type_param="ramses::Texture2D" status="run" time="0.006" classname="ClientOwnershipTest/1" />
    <testcase name="clinetObjectNameChanged" type_param="ramses::Texture2D" status="run" time="0.005" classname="ClientOwnershipTest/1" />
    <testcase name="clientNotContainsDestroyedObject" type_param="ramses::Texture2D" status="run" time="0.006" classname="ClientOwnershipTest/1" />
  </testsuite>
  <testsuite name="ClientOwnershipTest/2" tests="6" failures="0" disabled="0" errors="0" time="0.033">
    <testcase name="clientContainsCreatedObject" type_param="ramses::Texture3D" status="run" time="0.005" classname="ClientOwnershipTest/2" />
    <testcase name="clientDoesNotContainDestroyedObject" type_param="ramses::Texture3D" status="run" time="0.006" classname="ClientOwnershipTest/2" />
    <testcase name="clientObjectsAreOfTypeClientObject" type_param="ramses::Texture3D" status="run" time="0.006" classname="ClientOwnershipTest/2" />
    <testcase name="clientObjectsHaveReferenceToTheirClient" type_param="ramses::Texture3D" status="run" time="0.005" classname="ClientOwnershipTest/2" />
    <testcase name="clinetObjectNameChanged" type_param="ramses::Texture3D" status="run" time="0.006" classname="ClientOwnershipTest/2" />
    <testcase name="clientNotContainsDestroyedObject" type_param="ramses::Texture3D" status="run" time="0.005" classname="ClientOwnershipTest/2" />
  </testsuite>
  <testsuite name="ClientOwnershipTest/3" tests="6" failures="0" disabled="0" errors="0" time="0.033">
    <testcase name="clientContainsCreatedObject" type_param="ramses::TextureCube" status="run" time="0.006" classname="ClientOwnershipTest/3" />
    <testcase name="clientDoesNotContainDestroyedObject" type_param="ramses::TextureCube" status="run" time="0.005" classname="ClientOwnershipTest/3" />
    <testcase name="clientObjectsAreOfTypeClientObject" type_param="ramses::TextureCube" status="run" time="0.006" classname="ClientOwnershipTest/3" />
    <testcase name="clientObjectsHaveReferenceToTheirClient" type_param="ramses::TextureCube" status="run" time="0.005" classname="ClientOwnershipTest/3" />
    <testcase name="clinetObjectNameChanged" type_param="ramses::TextureCube" status="run" time="0.006" classname="ClientOwnershipTest/3" />
    <testcase name="clientNotContainsDestroyedObject" type_param="ramses::TextureCube" status="run" time="0.005" classname="ClientOwnershipTest/3" />
  </testsuite>
  <testsuite name="ClientOwnershipTest/4" tests="6" failures="0" disabled="0" errors="0" time="0.034">
    <testcase name="clientContainsCreatedObject" type_param="ramses::UInt16Array" status="run" time="0.006" classname="ClientOwnershipTest/4" />
    <testcase name="clientDoesNotContainDestroyedObject" type_param="ramses::UInt16Array" status="run" time="0.005" classname="ClientOwnershipTest/4" />
    <testcase name="clientObjectsAreOfTypeClientObject" type_param="ramses::UInt16Array" status="run" time="0.006" classname="ClientOwnershipTest/4" />
    <testcase name="clientObjectsHaveReferenceToTheirClient" type_param="ramses::UInt16Array" status="run" time="0.006" classname="ClientOwnershipTest/4" />
    <testcase name="clinetObjectNameChanged" type_param="ramses::UInt16Array" status="run" time="0.005" classname="ClientOwnershipTest/4" />
    <testcase name="clientNotContainsDestroyedObject" type_param="ramses::UInt16Array" status="run" time="0.006" classname="ClientOwnershipTest/4" />
  </testsuite>
  <testsuite name="ClientOwnershipTest/5" tests="6" failures="0" disabled="0" errors="0" time="0.033">
    <testcase name="clientContainsCreatedObject" type_param="ramses::FloatArray" status="run" time="0.005" classname="ClientOwnershipTest/5" />
    <testcase name="clientDoesNotContainDestroyedObject" type_param="ramses::FloatArray" status="run" time="0.006" classname="ClientOwnershipTest/5" />
    <testcase name="clientObjectsAreOfTypeClientObject" type_param="ramses::FloatArray" status="run" time="0.005" classname="ClientOwnershipTest/5" />
    <testcase name="clientObjectsHaveReferenceToTheirClient" type_param="ramses::FloatArray" status="run" time="0.006" classname="ClientOwnershipTest/5" />
    <testcase name="clinetObjectNameChanged" type_param="ramses::FloatArray" status="run" time="0.005" classname="ClientOwnershipTest/5" />
    <testcase name="clientNotContainsDestroyedObject" type_param="ramses::FloatArray" status="run" time="0.006" classname="ClientOwnershipTest/5" />
  </testsuite>
  <testsuite name="ClientOwnershipTest/6" tests="6" failures="0" disabled="0" errors="0" time="0.033">
    <testcase name="clientContainsCreatedObject" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="ClientOwnershipTest/6" />
    <testcase name="clientDoesNotContainDestroyedObject" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="ClientOwnershipTest/6" />
    <testcase name="clientObjectsAreOfTypeClientObject" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="ClientOwnershipTest/6" />
    <testcase name="clientObjectsHaveReferenceToTheirClient" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="ClientOwnershipTest/6" />
    <testcase name="clinetObjectNameChanged" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="ClientOwnershipTest/6" />
    <testcase name="clientNotContainsDestroyedObject" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="ClientOwnershipTest/6" />
  </testsuite>
  <testsuite name="ClientOwnershipTest/7" tests="6" failures="0" disabled="0" errors="0" time="0.033">
    <testcase name="clientContainsCreatedObject" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="ClientOwnershipTest/7" />
    <testcase name="clientDoesNotContainDestroyedObject" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="ClientOwnershipTest/7" />
    <testcase name="clientObjectsAreOfTypeClientObject" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="ClientOwnershipTest/7" />
    <testcase name="clientObjectsHaveReferenceToTheirClient" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="ClientOwnershipTest/7" />
    <testcase name="clinetObjectNameChanged" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="ClientOwnershipTest/7" />
    <testcase name="clientNotContainsDestroyedObject" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="ClientOwnershipTest/7" />
  </testsuite>
  <testsuite name="ClientOwnershipTest/8" tests="6" failures="0" disabled="0" errors="0" time="0.033">
    <testcase name="clientContainsCreatedObject" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="ClientOwnershipTest/8" />
    <testcase name="clientDoesNotContainDestroyedObject" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="ClientOwnershipTest/8" />
    <testcase name="clientObjectsAreOfTypeClientObject" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="ClientOwnershipTest/8" />
    <testcase name="clientObjectsHaveReferenceToTheirClient" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="ClientOwnershipTest/8" />
    <testcase name="clinetObjectNameChanged" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="ClientOwnershipTest/8" />
    <testcase name="clientNotContainsDestroyedObject" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="ClientOwnershipTest/8" />
  </testsuite>
  <testsuite name="ARamsesObjectRegistry" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="isEmptyUponCreation" status="run" time="0.006" classname="ARamsesObjectRegistry" />
    <testcase name="canAddObject" status="run" time="0.005" classname="ARamsesObjectRegistry" />
    <testcase name="canRemoveObject" status="run" time="0.006" classname="ARamsesObjectRegistry" />
    <testcase name="canAddAndRetrieveObjectInfo" status="run" time="0.005" classname="ARamsesObjectRegistry" />
    <testcase name="cannotRetrieveObjectInfoAfterObjectDeleted" status="run" time="0.006" classname="ARamsesObjectRegistry" />
    <testcase name="cannotFindObjectByOldNameWhenNameUpdatedAfterAdding" status="run" time="0.005" classname="ARamsesObjectRegistry" />
    <testcase name="canAddAndRetrieveObjectInfoWhenUpdatedAfterAdding" status="run" time="0.006" classname="ARamsesObjectRegistry" />
    <testcase name="canRetrieveObjectFromImpl" status="run" time="0.005" classname="ARamsesObjectRegistry" />
    <testcase name="hasNoDirtyNodesAfterInitialization" status="run" time="0.006" classname="ARamsesObjectRegistry" />
    <testcase name="marksNodeDirty" status="run" time="0.005" classname="ARamsesObjectRegistry" />
    <testcase name="marksNodeClean" status="run" time="0.006" classname="ARamsesObjectRegistry" />
    <testcase name="clearsDirtyNodes" status="run" time="0.005" classname="ARamsesObjectRegistry" />
    <testcase name="marksNodeCleanWhenDeleted" status="run" time="0.006" classname="ARamsesObjectRegistry" />
    <testcase name="nodeAppearsInDirtyListAfterMarkedDirty" status="run" time="0.005" classname="ARamsesObjectRegistry" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/0" tests="14" failures="0" disabled="0" errors="0" time="0.012">
    <testcase name="getType" type_param="ramses::RamsesClient" status="run" time="0" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::RamsesClient" status="run" time="0.001" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="getName" type_param="ramses::RamsesClient" status="run" time="0.001" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="setName" type_param="ramses::RamsesClient" status="run" time="0.001" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="convertToConcreteType" type_param="ramses::RamsesClient" status="run" time="0" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="convertToRamsesObject" type_param="ramses::RamsesClient" status="run" time="0" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::RamsesClient" status="run" time="0.001" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="convertToWrongType" type_param="ramses::RamsesClient" status="run" time="0.001" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::RamsesClient" status="run" time="0.001" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::RamsesClient" status="run" time="0" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::RamsesClient" status="run" time="0.001" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::RamsesClient" status="run" time="0.001" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::RamsesClient" status="run" time="0.001" classname="RamsesObjectTest1/RamsesObjectTest/0" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::RamsesClient" status="run" time="0.002" classname="RamsesObjectTest1/RamsesObjectTest/0" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/1" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::Scene" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::Scene" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="getName" type_param="ramses::Scene" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="setName" type_param="ramses::Scene" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="convertToConcreteType" type_param="ramses::Scene" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="convertToRamsesObject" type_param="ramses::Scene" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::Scene" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="convertToWrongType" type_param="ramses::Scene" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::Scene" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::Scene" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::Scene" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::Scene" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::Scene" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/1" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::Scene" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/1" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/2" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::Node" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::Node" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="getName" type_param="ramses::Node" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="setName" type_param="ramses::Node" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="convertToConcreteType" type_param="ramses::Node" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="convertToRamsesObject" type_param="ramses::Node" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::Node" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="convertToWrongType" type_param="ramses::Node" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::Node" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::Node" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::Node" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::Node" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::Node" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/2" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::Node" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/2" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/3" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::MeshNode" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::MeshNode" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="getName" type_param="ramses::MeshNode" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="setName" type_param="ramses::MeshNode" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="convertToConcreteType" type_param="ramses::MeshNode" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="convertToRamsesObject" type_param="ramses::MeshNode" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::MeshNode" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="convertToWrongType" type_param="ramses::MeshNode" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::MeshNode" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::MeshNode" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::MeshNode" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::MeshNode" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::MeshNode" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/3" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::MeshNode" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/3" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/4" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="getName" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="setName" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="convertToConcreteType" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="convertToRamsesObject" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="convertToWrongType" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/4" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/4" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/5" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="getName" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="setName" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="convertToConcreteType" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="convertToRamsesObject" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="convertToWrongType" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/5" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/5" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/6" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="getName" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="setName" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="convertToConcreteType" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="convertToRamsesObject" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="convertToWrongType" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/6" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/6" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/7" tests="14" failures="0" disabled="0" errors="0" time="0.087">
    <testcase name="getType" type_param="ramses::Effect" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::Effect" status="run" time="0.007" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="getName" type_param="ramses::Effect" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="setName" type_param="ramses::Effect" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="convertToConcreteType" type_param="ramses::Effect" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="convertToRamsesObject" type_param="ramses::Effect" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::Effect" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="convertToWrongType" type_param="ramses::Effect" status="run" time="0.007" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::Effect" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::Effect" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::Effect" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::Effect" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::Effect" status="run" time="0.007" classname="RamsesObjectTest1/RamsesObjectTest/7" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::Effect" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/7" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/8" tests="14" failures="0" disabled="0" errors="0" time="0.087">
    <testcase name="getType" type_param="ramses::Appearance" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::Appearance" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="getName" type_param="ramses::Appearance" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="setName" type_param="ramses::Appearance" status="run" time="0.007" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="convertToConcreteType" type_param="ramses::Appearance" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="convertToRamsesObject" type_param="ramses::Appearance" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::Appearance" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="convertToWrongType" type_param="ramses::Appearance" status="run" time="0.007" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::Appearance" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::Appearance" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::Appearance" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::Appearance" status="run" time="0.007" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::Appearance" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/8" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::Appearance" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/8" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/9" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::Texture2D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::Texture2D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="getName" type_param="ramses::Texture2D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="setName" type_param="ramses::Texture2D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="convertToConcreteType" type_param="ramses::Texture2D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="convertToRamsesObject" type_param="ramses::Texture2D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::Texture2D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="convertToWrongType" type_param="ramses::Texture2D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::Texture2D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::Texture2D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::Texture2D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::Texture2D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::Texture2D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/9" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::Texture2D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/9" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/10" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::Texture3D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::Texture3D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="getName" type_param="ramses::Texture3D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="setName" type_param="ramses::Texture3D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="convertToConcreteType" type_param="ramses::Texture3D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="convertToRamsesObject" type_param="ramses::Texture3D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::Texture3D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="convertToWrongType" type_param="ramses::Texture3D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::Texture3D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::Texture3D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::Texture3D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::Texture3D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::Texture3D" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/10" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::Texture3D" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/10" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/11" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::TextureCube" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::TextureCube" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="getName" type_param="ramses::TextureCube" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="setName" type_param="ramses::TextureCube" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="convertToConcreteType" type_param="ramses::TextureCube" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="convertToRamsesObject" type_param="ramses::TextureCube" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::TextureCube" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="convertToWrongType" type_param="ramses::TextureCube" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::TextureCube" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::TextureCube" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::TextureCube" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::TextureCube" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::TextureCube" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/11" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::TextureCube" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/11" />
  </testsuite>
  <testsuite name="RamsesObjectTest1/RamsesObjectTest/12" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::StreamTexture" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::StreamTexture" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="getName" type_param="ramses::StreamTexture" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="setName" type_param="ramses::StreamTexture" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="convertToConcreteType" type_param="ramses::StreamTexture" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="convertToRamsesObject" type_param="ramses::StreamTexture" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::StreamTexture" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="convertToWrongType" type_param="ramses::StreamTexture" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::StreamTexture" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::StreamTexture" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::StreamTexture" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::StreamTexture" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::StreamTexture" status="run" time="0.005" classname="RamsesObjectTest1/RamsesObjectTest/12" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::StreamTexture" status="run" time="0.006" classname="RamsesObjectTest1/RamsesObjectTest/12" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/0" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::UInt16Array" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::UInt16Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="getName" type_param="ramses::UInt16Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="setName" type_param="ramses::UInt16Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="convertToConcreteType" type_param="ramses::UInt16Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="convertToRamsesObject" type_param="ramses::UInt16Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::UInt16Array" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="convertToWrongType" type_param="ramses::UInt16Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::UInt16Array" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::UInt16Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::UInt16Array" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::UInt16Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::UInt16Array" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/0" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::UInt16Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/0" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/1" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::UInt32Array" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::UInt32Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="getName" type_param="ramses::UInt32Array" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="setName" type_param="ramses::UInt32Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="convertToConcreteType" type_param="ramses::UInt32Array" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="convertToRamsesObject" type_param="ramses::UInt32Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::UInt32Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="convertToWrongType" type_param="ramses::UInt32Array" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::UInt32Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::UInt32Array" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::UInt32Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::UInt32Array" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::UInt32Array" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/1" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::UInt32Array" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/1" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/2" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::FloatArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::FloatArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="getName" type_param="ramses::FloatArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="setName" type_param="ramses::FloatArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="convertToConcreteType" type_param="ramses::FloatArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="convertToRamsesObject" type_param="ramses::FloatArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::FloatArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="convertToWrongType" type_param="ramses::FloatArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::FloatArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::FloatArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::FloatArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::FloatArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::FloatArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/2" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::FloatArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/2" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/3" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="getName" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="setName" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="convertToConcreteType" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="convertToRamsesObject" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="convertToWrongType" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/3" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/3" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/4" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="getName" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="setName" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="convertToConcreteType" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="convertToRamsesObject" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="convertToWrongType" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/4" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/4" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/5" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="getName" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="setName" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="convertToConcreteType" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="convertToRamsesObject" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="convertToWrongType" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/5" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/5" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/6" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::RenderGroup" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::RenderGroup" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="getName" type_param="ramses::RenderGroup" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="setName" type_param="ramses::RenderGroup" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="convertToConcreteType" type_param="ramses::RenderGroup" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="convertToRamsesObject" type_param="ramses::RenderGroup" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::RenderGroup" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="convertToWrongType" type_param="ramses::RenderGroup" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::RenderGroup" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::RenderGroup" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::RenderGroup" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::RenderGroup" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::RenderGroup" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/6" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::RenderGroup" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/6" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/7" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::RenderPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::RenderPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="getName" type_param="ramses::RenderPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="setName" type_param="ramses::RenderPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="convertToConcreteType" type_param="ramses::RenderPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="convertToRamsesObject" type_param="ramses::RenderPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::RenderPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="convertToWrongType" type_param="ramses::RenderPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::RenderPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::RenderPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::RenderPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::RenderPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::RenderPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/7" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::RenderPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/7" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/8" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::BlitPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::BlitPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="getName" type_param="ramses::BlitPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="setName" type_param="ramses::BlitPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="convertToConcreteType" type_param="ramses::BlitPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="convertToRamsesObject" type_param="ramses::BlitPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::BlitPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="convertToWrongType" type_param="ramses::BlitPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::BlitPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::BlitPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::BlitPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::BlitPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::BlitPass" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/8" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::BlitPass" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/8" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/9" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::TextureSampler" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::TextureSampler" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="getName" type_param="ramses::TextureSampler" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="setName" type_param="ramses::TextureSampler" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="convertToConcreteType" type_param="ramses::TextureSampler" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="convertToRamsesObject" type_param="ramses::TextureSampler" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::TextureSampler" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="convertToWrongType" type_param="ramses::TextureSampler" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::TextureSampler" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::TextureSampler" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::TextureSampler" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::TextureSampler" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::TextureSampler" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/9" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::TextureSampler" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/9" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/10" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::RenderBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="getName" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="setName" type_param="ramses::RenderBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="convertToConcreteType" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="convertToRamsesObject" type_param="ramses::RenderBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="convertToWrongType" type_param="ramses::RenderBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::RenderBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::RenderBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/10" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/10" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/11" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::RenderTarget" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::RenderTarget" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="getName" type_param="ramses::RenderTarget" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="setName" type_param="ramses::RenderTarget" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="convertToConcreteType" type_param="ramses::RenderTarget" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="convertToRamsesObject" type_param="ramses::RenderTarget" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::RenderTarget" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="convertToWrongType" type_param="ramses::RenderTarget" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::RenderTarget" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::RenderTarget" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::RenderTarget" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::RenderTarget" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::RenderTarget" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/11" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::RenderTarget" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/11" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/12" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="getName" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="setName" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="convertToConcreteType" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="convertToRamsesObject" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="convertToWrongType" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/12" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/12" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/13" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="getName" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="setName" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="convertToConcreteType" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="convertToRamsesObject" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="convertToWrongType" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/13" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/13" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/14" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::Texture2DBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="getName" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="setName" type_param="ramses::Texture2DBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="convertToConcreteType" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="convertToRamsesObject" type_param="ramses::Texture2DBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="convertToWrongType" type_param="ramses::Texture2DBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::Texture2DBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::Texture2DBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/14" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::Texture2DBuffer" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/14" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/15" tests="14" failures="0" disabled="0" errors="0" time="0.087">
    <testcase name="getType" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="getName" type_param="ramses::GeometryBinding" status="run" time="0.007" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="setName" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="convertToConcreteType" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="convertToRamsesObject" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::GeometryBinding" status="run" time="0.007" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="convertToWrongType" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/15" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::GeometryBinding" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/15" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/16" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::DataFloat" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::DataFloat" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="getName" type_param="ramses::DataFloat" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="setName" type_param="ramses::DataFloat" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="convertToConcreteType" type_param="ramses::DataFloat" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="convertToRamsesObject" type_param="ramses::DataFloat" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::DataFloat" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="convertToWrongType" type_param="ramses::DataFloat" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::DataFloat" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::DataFloat" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::DataFloat" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::DataFloat" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::DataFloat" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/16" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::DataFloat" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/16" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/17" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::DataVector2f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::DataVector2f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="getName" type_param="ramses::DataVector2f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="setName" type_param="ramses::DataVector2f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="convertToConcreteType" type_param="ramses::DataVector2f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="convertToRamsesObject" type_param="ramses::DataVector2f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::DataVector2f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="convertToWrongType" type_param="ramses::DataVector2f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::DataVector2f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::DataVector2f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::DataVector2f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::DataVector2f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::DataVector2f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/17" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::DataVector2f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/17" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/18" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::DataVector3f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::DataVector3f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="getName" type_param="ramses::DataVector3f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="setName" type_param="ramses::DataVector3f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="convertToConcreteType" type_param="ramses::DataVector3f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="convertToRamsesObject" type_param="ramses::DataVector3f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::DataVector3f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="convertToWrongType" type_param="ramses::DataVector3f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::DataVector3f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::DataVector3f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::DataVector3f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::DataVector3f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::DataVector3f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/18" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::DataVector3f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/18" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/19" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::DataVector4f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::DataVector4f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="getName" type_param="ramses::DataVector4f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="setName" type_param="ramses::DataVector4f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="convertToConcreteType" type_param="ramses::DataVector4f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="convertToRamsesObject" type_param="ramses::DataVector4f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::DataVector4f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="convertToWrongType" type_param="ramses::DataVector4f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::DataVector4f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::DataVector4f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::DataVector4f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::DataVector4f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::DataVector4f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/19" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::DataVector4f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/19" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/20" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::DataMatrix22f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::DataMatrix22f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="getName" type_param="ramses::DataMatrix22f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="setName" type_param="ramses::DataMatrix22f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="convertToConcreteType" type_param="ramses::DataMatrix22f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="convertToRamsesObject" type_param="ramses::DataMatrix22f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::DataMatrix22f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="convertToWrongType" type_param="ramses::DataMatrix22f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::DataMatrix22f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::DataMatrix22f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::DataMatrix22f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::DataMatrix22f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::DataMatrix22f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/20" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::DataMatrix22f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/20" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/21" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::DataMatrix33f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::DataMatrix33f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="getName" type_param="ramses::DataMatrix33f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="setName" type_param="ramses::DataMatrix33f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="convertToConcreteType" type_param="ramses::DataMatrix33f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="convertToRamsesObject" type_param="ramses::DataMatrix33f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::DataMatrix33f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="convertToWrongType" type_param="ramses::DataMatrix33f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::DataMatrix33f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::DataMatrix33f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::DataMatrix33f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::DataMatrix33f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::DataMatrix33f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/21" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::DataMatrix33f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/21" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/22" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::DataMatrix44f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::DataMatrix44f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="getName" type_param="ramses::DataMatrix44f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="setName" type_param="ramses::DataMatrix44f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="convertToConcreteType" type_param="ramses::DataMatrix44f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="convertToRamsesObject" type_param="ramses::DataMatrix44f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::DataMatrix44f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="convertToWrongType" type_param="ramses::DataMatrix44f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::DataMatrix44f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::DataMatrix44f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::DataMatrix44f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::DataMatrix44f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::DataMatrix44f" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/22" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::DataMatrix44f" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/22" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/23" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::DataInt32" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::DataInt32" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="getName" type_param="ramses::DataInt32" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="setName" type_param="ramses::DataInt32" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="convertToConcreteType" type_param="ramses::DataInt32" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="convertToRamsesObject" type_param="ramses::DataInt32" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::DataInt32" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="convertToWrongType" type_param="ramses::DataInt32" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::DataInt32" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::DataInt32" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::DataInt32" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::DataInt32" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::DataInt32" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/23" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::DataInt32" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/23" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/24" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::DataVector2i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::DataVector2i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="getName" type_param="ramses::DataVector2i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="setName" type_param="ramses::DataVector2i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="convertToConcreteType" type_param="ramses::DataVector2i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="convertToRamsesObject" type_param="ramses::DataVector2i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::DataVector2i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="convertToWrongType" type_param="ramses::DataVector2i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::DataVector2i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::DataVector2i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::DataVector2i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::DataVector2i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::DataVector2i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/24" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::DataVector2i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/24" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/25" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::DataVector3i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::DataVector3i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="getName" type_param="ramses::DataVector3i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="setName" type_param="ramses::DataVector3i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="convertToConcreteType" type_param="ramses::DataVector3i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="convertToRamsesObject" type_param="ramses::DataVector3i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::DataVector3i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="convertToWrongType" type_param="ramses::DataVector3i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::DataVector3i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::DataVector3i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::DataVector3i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::DataVector3i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::DataVector3i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/25" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::DataVector3i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/25" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/26" tests="14" failures="0" disabled="0" errors="0" time="0.077">
    <testcase name="getType" type_param="ramses::DataVector4i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::DataVector4i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="getName" type_param="ramses::DataVector4i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="setName" type_param="ramses::DataVector4i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="convertToConcreteType" type_param="ramses::DataVector4i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="convertToRamsesObject" type_param="ramses::DataVector4i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::DataVector4i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="convertToWrongType" type_param="ramses::DataVector4i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::DataVector4i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::DataVector4i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::DataVector4i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::DataVector4i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::DataVector4i" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/26" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::DataVector4i" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/26" />
  </testsuite>
  <testsuite name="RamsesObjectTest2/RamsesObjectTest/27" tests="14" failures="0" disabled="0" errors="0" time="0.078">
    <testcase name="getType" type_param="ramses::PickableObject" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="isOfTypeForAllDefinedBaseClasses" type_param="ramses::PickableObject" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="getName" type_param="ramses::PickableObject" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="setName" type_param="ramses::PickableObject" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="convertToConcreteType" type_param="ramses::PickableObject" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="convertToRamsesObject" type_param="ramses::PickableObject" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="convertToItsClosestBaseClass" type_param="ramses::PickableObject" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="convertToWrongType" type_param="ramses::PickableObject" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="getRamsesObjectFromImpl" type_param="ramses::PickableObject" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="validationStringIsEmptyIfNotCalledValidate" type_param="ramses::PickableObject" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="validationStringIsNotNULL" type_param="ramses::PickableObject" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="validationStringContainsObjectTypeAndName" type_param="ramses::PickableObject" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="validationFailsIfThereWasAnyWrongAPIUsage" type_param="ramses::PickableObject" status="run" time="0.005" classname="RamsesObjectTest2/RamsesObjectTest/27" />
    <testcase name="failedValidationAfterWrongAPIUsageResetAfterValidatedAgain" type_param="ramses::PickableObject" status="run" time="0.006" classname="RamsesObjectTest2/RamsesObjectTest/27" />
  </testsuite>
  <testsuite name="ARamsesUtilsTest" tests="14" failures="0" disabled="0" errors="0" time="0.005">
    <testcase name="createTextureResourceFromPng" status="run" time="0" classname="ARamsesUtilsTest" />
    <testcase name="createTextureResourceFromPng_withName" status="run" time="0.001" classname="ARamsesUtilsTest" />
    <testcase name="createTextureResourceFromPng_withSwizzle" status="run" time="0" classname="ARamsesUtilsTest" />
    <testcase name="createTextureResourceFromPngBuffer" status="run" time="0.001" classname="ARamsesUtilsTest" />
    <testcase name="createTextureResourceFromPngBuffer_withSwizzle" status="run" time="0" classname="ARamsesUtilsTest" />
    <testcase name="createTextureResourceFromPngBuffer_withName" status="run" time="0.001" classname="ARamsesUtilsTest" />
    <testcase name="createTextureResourceFromPng_invalidFileFormat" status="run" time="0" classname="ARamsesUtilsTest" />
    <testcase name="createTextureResourceFromPng_nonexistantFile" status="run" time="0" classname="ARamsesUtilsTest" />
    <testcase name="createTextureResourceFromPng_NULLFile" status="run" time="0.001" classname="ARamsesUtilsTest" />
    <testcase name="createTextureResourceFromPngBuffer_EmptyBuffer" status="run" time="0" classname="ARamsesUtilsTest" />
    <testcase name="createTextureResourceFromPngBuffer_InvalidBuffer" status="run" time="0" classname="ARamsesUtilsTest" />
    <testcase name="generateMipMapsForTexture2D" status="run" time="0" classname="ARamsesUtilsTest" />
    <testcase name="generateMipMapsForTexture2DWithMultipleChannels" status="run" time="0.001" classname="ARamsesUtilsTest" />
    <testcase name="generateMipMapsForTextureCube" status="run" time="0" classname="ARamsesUtilsTest" />
  </testsuite>
  <testsuite name="ARamsesVersion" tests="28" failures="0" disabled="0" errors="0" time="0">
    <testcase name="canParseCurrentVersion" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="canParseCurrentVersionFromFile" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="canParseReleaseVersion" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="canParseMasterVersion" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="canParseOtherVersionSuffix" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="canParseVersionNumbersInCorrectOrder" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="canParseLongVersionNumbers" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="canParseUnknownAsHashValue" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="canParseFullHashValue" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="canParseMajorMinorPatchTweak" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="canParseDifferentSuffix" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="canParseRandomStringAfterMajorMinor" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="canParseHandCraftedVersionInformation" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="failsWhenHashEntryKeywordWrong" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="failsWhenHashEntryCharactersAreWrong" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="failsWhenHashMissing" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="failsWhenVersionMissing" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="failsWhenVersionTruncated" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="failsWhenVersionNotNumbers" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="failsWhenStreamInvalid" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="failsWhenNoNewlineFoundWithinReasonableDistanceFromStart" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="failsWhenStreamNotLongEnoughToMatchVersionIndicator" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="failsWhenVersionNumberNegative" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="MatchesCurrentMajorMinorMatchesCurrentExactVersion" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="AcceptsMasterVersionZeroZeroAlways" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="AcceptsAnyFileVersionWithMasterZeroZero" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="MatchesCurrentMajorMinorFailsIfMajorDiffers" status="run" time="0" classname="ARamsesVersion" />
    <testcase name="MatchesCurrentMajorMinorFailsIfMinorDiffers" status="run" time="0" classname="ARamsesVersion" />
  </testsuite>
  <testsuite name="RenderBufferTest" tests="11" failures="0" disabled="0" errors="0" time="0.06">
    <testcase name="canCreateRenderBuffer" status="run" time="0.005" classname="RenderBufferTest" />
    <testcase name="failsToCreateRenderBufferWithZeroWidthOrHeight" status="run" time="0.006" classname="RenderBufferTest" />
    <testcase name="failsToCreateRenderBufferOfIncompatibleTypeAndFormat" status="run" time="0.005" classname="RenderBufferTest" />
    <testcase name="canNotCreateReadWriteMSAARenderBuffer" status="run" time="0.005" classname="RenderBufferTest" />
    <testcase name="reportsErrorIfNotUsedInAnyRenderPassNorBlitPass" status="run" time="0.006" classname="RenderBufferTest" />
    <testcase name="reportsErrorIfUsedInRenderPassButNotReferencedByAnySamplerNorUsedAsBlitPassSource" status="run" time="0.005" classname="RenderBufferTest" />
    <testcase name="reportsErrorIfReferencedBySamplerButNotUsedInAnyRenderPassNorUsedAsBlitPassDestination" status="run" time="0.006" classname="RenderBufferTest" />
    <testcase name="validatesWhenUsedInRenderPassAndReferencedBySampler" status="run" time="0.005" classname="RenderBufferTest" />
    <testcase name="validatesWhenUsedAsBlitPassDestinationAndReferencedBySampler" status="run" time="0.006" classname="RenderBufferTest" />
    <testcase name="validatesWhenNOTReferencedBySamplerButUsedAsBlitPassSource" status="run" time="0.005" classname="RenderBufferTest" />
    <testcase name="doesNotReportsErrorIfUsedInRenderPassButNotReferencedByAnySampler_DepthBufferType" status="run" time="0.006" classname="RenderBufferTest" />
  </testsuite>
  <testsuite name="ARenderGroupMeshIterator" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="returnsNextNULLWhenRenderGroupEmpty" status="run" time="0.005" classname="ARenderGroupMeshIterator" />
    <testcase name="canIterateOverAddedMeshNodes" status="run" time="0.006" classname="ARenderGroupMeshIterator" />
  </testsuite>
  <testsuite name="ARenderGroup" tests="34" failures="0" disabled="0" errors="0" time="0.191">
    <testcase name="canValidate" status="run" time="0.007" classname="ARenderGroup" />
    <testcase name="validationGivesWarningIfRenderGroupIsEmpty" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="validationGivesWarningIfNestedRenderGroupIsEmpty" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="validationGivesWarningIfRenderGroupContainsInvalidMesh" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="validationGivesWarningIfNestedRenderGroupContainsInvalidMesh" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="canAddMeshNodes" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="canAddRenderGroups" status="run" time="0.007" classname="ARenderGroup" />
    <testcase name="reportsErrorWhenAddMeshNodeFromAnotherScene" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="reportsErrorWhenAddRenderGroupFromAnotherScene" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="canCheckContainmentOfMeshes" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="canCheckContainmentOfNestedRenderGroups" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="doesNotDirectlyContainRenderablesOfNestedRenderGroups" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="canRemoveMesh" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="canRemoveRenderGroup" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="removingMeshDoesNotAffectOtherMeshes" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="removingRenderGroupDoesNotAffectOtherRenderGroups" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="doesNotContainMeshWhichWasDestroyed" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="doesNotContainRenderGroupWhichWasDestroyed" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="destroyingMeshDoesNotAffectOtherMeshes" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="destroyingRenderGroupDoesNotAffectOtherRenderGroups" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="canRemoveAllMeshes" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="canRemoveAllRenderGroups" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="reportsErrorWhenTryingToRemoveMeshWhichWasNotAdded" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="reportsErrorWhenTryingToRemoveRenderGroupWhichWasNotAdded" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="canChangeMeshOrderByReaddingIt" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="canChangeRenderGroupOrderByReaddingIt" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="canChangeMeshOrderByRemovingItAndAddingAgain" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="canChangeRenderGroupOrderByRemovingItAndAddingAgain" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="meshCanBeAddedToTwoGroupsWithDifferentOrder" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="renderGroupCanBeAddedToTwoGroupsWithDifferentOrder" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="removingMeshFromGroupDoesNotAffectItsPlaceInAnotherGroup" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="removingRenderGroupFromGroupDoesNotAffectItsPlaceInAnotherGroup" status="run" time="0.005" classname="ARenderGroup" />
    <testcase name="destroyedMeshIsRemovedFromAllItsGroups" status="run" time="0.006" classname="ARenderGroup" />
    <testcase name="destroyedNestedRenderGroupIsRemovedFromAllItsGroups" status="run" time="0.005" classname="ARenderGroup" />
  </testsuite>
  <testsuite name="ARenderPassGroupIterator" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="getNextNULLForEmptyRenderGroup" status="run" time="0.006" classname="ARenderPassGroupIterator" />
    <testcase name="canIterateOverAddedMeshNodes" status="run" time="0.005" classname="ARenderPassGroupIterator" />
  </testsuite>
  <testsuite name="ARenderPass" tests="49" failures="0" disabled="0" errors="0" time="0.286">
    <testcase name="canValidate" status="run" time="0.007" classname="ARenderPass" />
    <testcase name="failsValidationIfNoCameraWasSet" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="failsValidationIfNoRenderGroupWasAdded" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="validatesIfClearAllAndRenderTargetIsSet" status="run" time="0.007" classname="ARenderPass" />
    <testcase name="validatesIfClearStencilAndRenderTargetIsSet" status="run" time="0.007" classname="ARenderPass" />
    <testcase name="validatesIfClearDepthAndRenderTargetIsSet" status="run" time="0.007" classname="ARenderPass" />
    <testcase name="validatesIfClearColorAndRenderTargetIsSet" status="run" time="0.007" classname="ARenderPass" />
    <testcase name="validatesIfClearNoneAndRenderTargetIsSet" status="run" time="0.007" classname="ARenderPass" />
    <testcase name="validatesIfClearNoneIsSetWithoutRenderTarget" status="run" time="0.007" classname="ARenderPass" />
    <testcase name="failsValidationIfClearStencilIsSetWithoutRenderTarget" status="run" time="0.007" classname="ARenderPass" />
    <testcase name="failsValidationIfClearDepthIsSetWithoutRenderTarget" status="run" time="0.007" classname="ARenderPass" />
    <testcase name="failsValidationIfClearColorIsSetWithoutRenderTarget" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="failsValidationIfClearAllIsSetWithoutRenderTarget" status="run" time="0.007" classname="ARenderPass" />
    <testcase name="hasNoCameraByDefaultWhichIsInterpretedAsIdentityViewMatrix" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="returnsTheSameCameraWhichWasSet" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="reportsErrorWhenSetCameraFromAnotherScene" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="canBeAssignedCustomOrthoCameraOnlyWhenAllParametersAreValid" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="canBeAssignedCustomPerspectiveCameraOnlyWhenAllParametersAreValid" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="confidence_setsCameraMulitpleTimesAndChecksInScene" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="hasFrameBufferAsDefaultRenderTarget" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="canBeAssignedFrameBufferAsRenderTarget" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="canSwitchFromRenderTargetBackToFramebuffer" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="reportsErrorWhenSetRenderTargetFromAnotherScene" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="canNotBeAssignedRenderTargetIfCameraIsNotSetFirst" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="canNotBeAssignedRenderTargetIfCameraIsRemoteCamera" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="canBeAssignedRenderTargetWithOrthoCamera" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="canBeAssignedRenderTargetWithPerspectiveCamera" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="reportsErrorWhenDestroyingRenderTargetIfAssignedToRenderPass" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="isEnabledByDefault" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="canBeDisabled" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="setsItsClearColor" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="setsItsClearFlag" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="canAddRenderGroups" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="reportsErrorWhenAddRenderGroupFromAnotherScene" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="canCheckContainmentOfRenderGroups" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="canRemoveRenderGroup" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="removingRenderGroupDoesNotAffectOtherRenderGroups" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="doesNotContainRenderGroupWhichWasDestroyed" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="destroyingRenderGroupDoesNotAffectOtherRenderGroups" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="reportsErrorWhenTryingToRemoveRenderGroupWhichWasNotAddedToPass" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="canChangeRenderGroupOrderByReaddingIt" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="groupCanBeAddedToTwoPassesWithDifferentOrder" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="removingRenderGroupFromPassDoesNotAffectItsPlaceInAnotherPass" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="destroyedRenderGroupIsRemovedFromAllItsPasses" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="canRemoveAllRenderGroups" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="isNotRenderOnceInitially" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="canBeSetAndUnsetAsRenderOnce" status="run" time="0.005" classname="ARenderPass" />
    <testcase name="canRetriggerRenderOnce" status="run" time="0.006" classname="ARenderPass" />
    <testcase name="failsToRetriggerRenderOnceIfNotRenderOnce" status="run" time="0.005" classname="ARenderPass" />
  </testsuite>
  <testsuite name="RenderTargetDescriptionTest" tests="12" failures="0" disabled="0" errors="0" time="0.067">
    <testcase name="initialState" status="run" time="0.006" classname="RenderTargetDescriptionTest" />
    <testcase name="validatesAsWarningIfEmpty" status="run" time="0.005" classname="RenderTargetDescriptionTest" />
    <testcase name="canAddRenderBuffer" status="run" time="0.006" classname="RenderTargetDescriptionTest" />
    <testcase name="canAddMultipleColorRenderBuffers" status="run" time="0.005" classname="RenderTargetDescriptionTest" />
    <testcase name="canAddMultipleColorRenderBuffersWithDepthBuffer" status="run" time="0.006" classname="RenderTargetDescriptionTest" />
    <testcase name="failsToAddSameRenderBufferTwice" status="run" time="0.006" classname="RenderTargetDescriptionTest" />
    <testcase name="failsToAddRenderBufferFromAnotherScene" status="run" time="0.005" classname="RenderTargetDescriptionTest" />
    <testcase name="failsToAddRenderBufferWithDifferentResolution" status="run" time="0.006" classname="RenderTargetDescriptionTest" />
    <testcase name="failsToAddMoreThanOneDepthBuffer" status="run" time="0.005" classname="RenderTargetDescriptionTest" />
    <testcase name="failsToValidateAfterAddedRenderBufferDestroyed" status="run" time="0.006" classname="RenderTargetDescriptionTest" />
    <testcase name="canAddRenderBuffersWithMsaaSampleCountNotZero" status="run" time="0.005" classname="RenderTargetDescriptionTest" />
    <testcase name="canNotAddRenderBuffersWithDifferentMsaaSampleCount" status="run" time="0.006" classname="RenderTargetDescriptionTest" />
  </testsuite>
  <testsuite name="ARenderTarget" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="canBeCreated" status="run" time="0.005" classname="ARenderTarget" />
    <testcase name="failsToCreateUsingInvalidRenderTargetDescription" status="run" time="0.006" classname="ARenderTarget" />
  </testsuite>
  <testsuite name="AResourceFileDescriptionTest" tests="3" failures="0" disabled="0" errors="0" time="0.016">
    <testcase name="FilenameIsSet" status="run" time="0.005" classname="AResourceFileDescriptionTest" />
    <testcase name="emptyDescriptionUtilsTest" status="run" time="0.006" classname="AResourceFileDescriptionTest" />
    <testcase name="emptySetMultiResourceDescriptionUtilsTest" status="run" time="0.005" classname="AResourceFileDescriptionTest" />
  </testsuite>
  <testsuite name="AResourceFileDescriptionTestTyped/0" tests="5" failures="0" disabled="0" errors="0" time="0.028">
    <testcase name="CanAddResources" type_param="ramses::FloatArray" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/0" />
    <testcase name="ContainsChecksForResources" type_param="ramses::FloatArray" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/0" />
    <testcase name="multiResourceDescriptionUtilsTest" type_param="ramses::FloatArray" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/0" />
    <testcase name="multiEntrySetMultiResourceDescriptionUtilsTest" type_param="ramses::FloatArray" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/0" />
    <testcase name="DuplicateResourcesAreNotAddedTwice" type_param="ramses::FloatArray" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/0" />
  </testsuite>
  <testsuite name="AResourceFileDescriptionTestTyped/1" tests="5" failures="0" disabled="0" errors="0" time="0.028">
    <testcase name="CanAddResources" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/1" />
    <testcase name="ContainsChecksForResources" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/1" />
    <testcase name="multiResourceDescriptionUtilsTest" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/1" />
    <testcase name="multiEntrySetMultiResourceDescriptionUtilsTest" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/1" />
    <testcase name="DuplicateResourcesAreNotAddedTwice" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/1" />
  </testsuite>
  <testsuite name="AResourceFileDescriptionTestTyped/2" tests="5" failures="0" disabled="0" errors="0" time="0.027">
    <testcase name="CanAddResources" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/2" />
    <testcase name="ContainsChecksForResources" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/2" />
    <testcase name="multiResourceDescriptionUtilsTest" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/2" />
    <testcase name="multiEntrySetMultiResourceDescriptionUtilsTest" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/2" />
    <testcase name="DuplicateResourcesAreNotAddedTwice" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/2" />
  </testsuite>
  <testsuite name="AResourceFileDescriptionTestTyped/3" tests="5" failures="0" disabled="0" errors="0" time="0.028">
    <testcase name="CanAddResources" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/3" />
    <testcase name="ContainsChecksForResources" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/3" />
    <testcase name="multiResourceDescriptionUtilsTest" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/3" />
    <testcase name="multiEntrySetMultiResourceDescriptionUtilsTest" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/3" />
    <testcase name="DuplicateResourcesAreNotAddedTwice" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/3" />
  </testsuite>
  <testsuite name="AResourceFileDescriptionTestTyped/4" tests="5" failures="0" disabled="0" errors="0" time="0.028">
    <testcase name="CanAddResources" type_param="ramses::Texture2D" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/4" />
    <testcase name="ContainsChecksForResources" type_param="ramses::Texture2D" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/4" />
    <testcase name="multiResourceDescriptionUtilsTest" type_param="ramses::Texture2D" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/4" />
    <testcase name="multiEntrySetMultiResourceDescriptionUtilsTest" type_param="ramses::Texture2D" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/4" />
    <testcase name="DuplicateResourcesAreNotAddedTwice" type_param="ramses::Texture2D" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/4" />
  </testsuite>
  <testsuite name="AResourceFileDescriptionTestTyped/5" tests="5" failures="0" disabled="0" errors="0" time="0.027">
    <testcase name="CanAddResources" type_param="ramses::Texture3D" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/5" />
    <testcase name="ContainsChecksForResources" type_param="ramses::Texture3D" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/5" />
    <testcase name="multiResourceDescriptionUtilsTest" type_param="ramses::Texture3D" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/5" />
    <testcase name="multiEntrySetMultiResourceDescriptionUtilsTest" type_param="ramses::Texture3D" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/5" />
    <testcase name="DuplicateResourcesAreNotAddedTwice" type_param="ramses::Texture3D" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/5" />
  </testsuite>
  <testsuite name="AResourceFileDescriptionTestTyped/6" tests="5" failures="0" disabled="0" errors="0" time="0.028">
    <testcase name="CanAddResources" type_param="ramses::TextureCube" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/6" />
    <testcase name="ContainsChecksForResources" type_param="ramses::TextureCube" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/6" />
    <testcase name="multiResourceDescriptionUtilsTest" type_param="ramses::TextureCube" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/6" />
    <testcase name="multiEntrySetMultiResourceDescriptionUtilsTest" type_param="ramses::TextureCube" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/6" />
    <testcase name="DuplicateResourcesAreNotAddedTwice" type_param="ramses::TextureCube" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/6" />
  </testsuite>
  <testsuite name="AResourceFileDescriptionTestTyped/7" tests="5" failures="0" disabled="0" errors="0" time="0.027">
    <testcase name="CanAddResources" type_param="ramses::UInt16Array" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/7" />
    <testcase name="ContainsChecksForResources" type_param="ramses::UInt16Array" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/7" />
    <testcase name="multiResourceDescriptionUtilsTest" type_param="ramses::UInt16Array" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/7" />
    <testcase name="multiEntrySetMultiResourceDescriptionUtilsTest" type_param="ramses::UInt16Array" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/7" />
    <testcase name="DuplicateResourcesAreNotAddedTwice" type_param="ramses::UInt16Array" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/7" />
  </testsuite>
  <testsuite name="AResourceFileDescriptionTestTyped/8" tests="5" failures="0" disabled="0" errors="0" time="0.03">
    <testcase name="CanAddResources" type_param="ramses::UInt32Array" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/8" />
    <testcase name="ContainsChecksForResources" type_param="ramses::UInt32Array" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/8" />
    <testcase name="multiResourceDescriptionUtilsTest" type_param="ramses::UInt32Array" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/8" />
    <testcase name="multiEntrySetMultiResourceDescriptionUtilsTest" type_param="ramses::UInt32Array" status="run" time="0.007" classname="AResourceFileDescriptionTestTyped/8" />
    <testcase name="DuplicateResourcesAreNotAddedTwice" type_param="ramses::UInt32Array" status="run" time="0.006" classname="AResourceFileDescriptionTestTyped/8" />
  </testsuite>
  <testsuite name="AResourceFileDescriptionTestTyped/9" tests="5" failures="0" disabled="0" errors="0" time="0.033">
    <testcase name="CanAddResources" type_param="ramses::Effect" status="run" time="0.005" classname="AResourceFileDescriptionTestTyped/9" />
    <testcase name="ContainsChecksForResources" type_param="ramses::Effect" status="run" time="0.007" classname="AResourceFileDescriptionTestTyped/9" />
    <testcase name="multiResourceDescriptionUtilsTest" type_param="ramses::Effect" status="run" time="0.007" classname="AResourceFileDescriptionTestTyped/9" />
    <testcase name="multiEntrySetMultiResourceDescriptionUtilsTest" type_param="ramses::Effect" status="run" time="0.007" classname="AResourceFileDescriptionTestTyped/9" />
    <testcase name="DuplicateResourcesAreNotAddedTwice" type_param="ramses::Effect" status="run" time="0.007" classname="AResourceFileDescriptionTestTyped/9" />
  </testsuite>
  <testsuite name="SimpleResourceIDStreamOperatorTest" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="Zeros" status="run" time="0" classname="SimpleResourceIDStreamOperatorTest" />
    <testcase name="Values" status="run" time="0" classname="SimpleResourceIDStreamOperatorTest" />
  </testsuite>
  <testsuite name="RamsesClientResourceIteratorTest/0" tests="3" failures="0" disabled="0" errors="0" time="0.003">
    <testcase name="getResourceIteratorEmpty" type_param="ramses::FloatArray" status="run" time="0" classname="RamsesClientResourceIteratorTest/0" />
    <testcase name="SkipsOtherTypes" type_param="ramses::FloatArray" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/0" />
    <testcase name="ReturnsMultipleIfAvailable" type_param="ramses::FloatArray" status="run" time="0.002" classname="RamsesClientResourceIteratorTest/0" />
  </testsuite>
  <testsuite name="RamsesClientResourceIteratorTest/1" tests="3" failures="0" disabled="0" errors="0" time="0.003">
    <testcase name="getResourceIteratorEmpty" type_param="ramses::Vector2fArray" status="run" time="0" classname="RamsesClientResourceIteratorTest/1" />
    <testcase name="SkipsOtherTypes" type_param="ramses::Vector2fArray" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/1" />
    <testcase name="ReturnsMultipleIfAvailable" type_param="ramses::Vector2fArray" status="run" time="0.002" classname="RamsesClientResourceIteratorTest/1" />
  </testsuite>
  <testsuite name="RamsesClientResourceIteratorTest/2" tests="3" failures="0" disabled="0" errors="0" time="0.002">
    <testcase name="getResourceIteratorEmpty" type_param="ramses::Vector3fArray" status="run" time="0" classname="RamsesClientResourceIteratorTest/2" />
    <testcase name="SkipsOtherTypes" type_param="ramses::Vector3fArray" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/2" />
    <testcase name="ReturnsMultipleIfAvailable" type_param="ramses::Vector3fArray" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/2" />
  </testsuite>
  <testsuite name="RamsesClientResourceIteratorTest/3" tests="3" failures="0" disabled="0" errors="0" time="0.003">
    <testcase name="getResourceIteratorEmpty" type_param="ramses::Vector4fArray" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/3" />
    <testcase name="SkipsOtherTypes" type_param="ramses::Vector4fArray" status="run" time="0" classname="RamsesClientResourceIteratorTest/3" />
    <testcase name="ReturnsMultipleIfAvailable" type_param="ramses::Vector4fArray" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/3" />
  </testsuite>
  <testsuite name="RamsesClientResourceIteratorTest/4" tests="3" failures="0" disabled="0" errors="0" time="0.003">
    <testcase name="getResourceIteratorEmpty" type_param="ramses::Texture2D" status="run" time="0" classname="RamsesClientResourceIteratorTest/4" />
    <testcase name="SkipsOtherTypes" type_param="ramses::Texture2D" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/4" />
    <testcase name="ReturnsMultipleIfAvailable" type_param="ramses::Texture2D" status="run" time="0.002" classname="RamsesClientResourceIteratorTest/4" />
  </testsuite>
  <testsuite name="RamsesClientResourceIteratorTest/5" tests="3" failures="0" disabled="0" errors="0" time="0.002">
    <testcase name="getResourceIteratorEmpty" type_param="ramses::Texture3D" status="run" time="0" classname="RamsesClientResourceIteratorTest/5" />
    <testcase name="SkipsOtherTypes" type_param="ramses::Texture3D" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/5" />
    <testcase name="ReturnsMultipleIfAvailable" type_param="ramses::Texture3D" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/5" />
  </testsuite>
  <testsuite name="RamsesClientResourceIteratorTest/6" tests="3" failures="0" disabled="0" errors="0" time="0.002">
    <testcase name="getResourceIteratorEmpty" type_param="ramses::TextureCube" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/6" />
    <testcase name="SkipsOtherTypes" type_param="ramses::TextureCube" status="run" time="0" classname="RamsesClientResourceIteratorTest/6" />
    <testcase name="ReturnsMultipleIfAvailable" type_param="ramses::TextureCube" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/6" />
  </testsuite>
  <testsuite name="RamsesClientResourceIteratorTest/7" tests="3" failures="0" disabled="0" errors="0" time="0.003">
    <testcase name="getResourceIteratorEmpty" type_param="ramses::UInt16Array" status="run" time="0" classname="RamsesClientResourceIteratorTest/7" />
    <testcase name="SkipsOtherTypes" type_param="ramses::UInt16Array" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/7" />
    <testcase name="ReturnsMultipleIfAvailable" type_param="ramses::UInt16Array" status="run" time="0.002" classname="RamsesClientResourceIteratorTest/7" />
  </testsuite>
  <testsuite name="RamsesClientResourceIteratorTest/8" tests="3" failures="0" disabled="0" errors="0" time="0.003">
    <testcase name="getResourceIteratorEmpty" type_param="ramses::UInt32Array" status="run" time="0" classname="RamsesClientResourceIteratorTest/8" />
    <testcase name="SkipsOtherTypes" type_param="ramses::UInt32Array" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/8" />
    <testcase name="ReturnsMultipleIfAvailable" type_param="ramses::UInt32Array" status="run" time="0.002" classname="RamsesClientResourceIteratorTest/8" />
  </testsuite>
  <testsuite name="RamsesClientResourceIteratorTest/9" tests="3" failures="0" disabled="0" errors="0" time="0.002">
    <testcase name="getResourceIteratorEmpty" type_param="ramses::Effect" status="run" time="0" classname="RamsesClientResourceIteratorTest/9" />
    <testcase name="SkipsOtherTypes" type_param="ramses::Effect" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/9" />
    <testcase name="ReturnsMultipleIfAvailable" type_param="ramses::Effect" status="run" time="0.001" classname="RamsesClientResourceIteratorTest/9" />
  </testsuite>
  <testsuite name="AResourceTestClient" tests="85" failures="0" disabled="0" errors="0" time="0.04">
    <testcase name="createTextureAndDestroyManually" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureWithMipMaps" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureAndCheckWidthHeight" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureAndCheckFormat" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createsTextureWithDefaultSwizzle" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createsTextureWithNonDefaultSwizzle" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureWithProvidedMipsButNotFullChain" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureWithMoreMipsThanExpected" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureWithNullMipMapData" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createTextureWithZeroSizeMipMapData" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureWithNullOrZeroSizeLowerMipMapData" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureWithWrongSizeOfLowerMipMapData" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createTextureOfZeroSize" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureWithNoMipData" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureWithoutName" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureCheckHashIsValid" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createTextureCheckHashIsUnique" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureRGBA_AndCheckTexels" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureRGB_AndCheckTexels" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureRGBWithMips_AndCheckTexels" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createCubeTextureAndDestroyManually" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createCubeTextureWithMipMaps" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createCubeTextureAndCheckWidthHeight" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createCubeTextureAndCheckFormat" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createCubeTextureOfZeroSize" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createCubeTextureOfZeroDataSize" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createCubeTextureWithNoMipData" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createCubeTextureWithoutName" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createCubeTextureRGBA_AndCheckTexels" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createCubeTextureRGB_AndCheckTexels" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createCubeTextureRGBWithPerFaceDataAndMips_AndCheckTexels" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createTextureCubeWithProvidedMipsButNotFullChain" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureCubeWithMoreMipsThanExpected" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureCubeWithNullMipMapData" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureCubeWithZeroSizeMipMapData" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createTextureCubeWithNullOrZeroSizeLowerMipMapData" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTextureCubeWithWrongSizeOfLowerMipMapData" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="create3DTextureAndDestroyManually" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="create3DTextureWithMipMaps" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="create3DTextureAndCheckWidthHeightDepth" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="create3DTextureAndCheckFormat" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="create3DTextureOfZeroSize" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="create3DTextureWithNoMipData" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="create3DTextureWithoutName" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="create3DTextureCheckHashIsValid" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="create3DTextureCheckHashIsUnique" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="create3DTextureRGBA_AndCheckTexels" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="create3DTextureRGB_AndCheckTexels" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="create3DTextureRGBWithMips_AndCheckTexels" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createTexture3DWithProvidedMipsButNotFullChain" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createTexture3DWithMoreMipsThanExpected" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="create3DTextureWithNullMipMapData" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="create3DTextureWithZeroSizeMipMapData" status="run" time="0.002" classname="AResourceTestClient" />
    <testcase name="create3DTextureWithNullOrZeroSizeLowerMipMapData" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="create3DTextureWithWrongSizeOfLowerMipMapData" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="create3DTextureWithCompressedFormatCanBeCreatedWithArbitraryNonZeroDataSize" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="creatingResourcesWithSameDataInternallyRefersToSameResourceHash" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="creatingResourcesWithSameDataInternallySharesData" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="creatingResourcesWithSameDataContentInternallySharesData" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="destroyingDuplicateResourceDoesNotDeleteData" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createVector2fArray" status="run" time="0.002" classname="AResourceTestClient" />
    <testcase name="createVector2fArrayHashIsValid" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createVector2fArrayHashIsUnique" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createEmptyVector2fArrayFails" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createVector3fArray" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createVector3fArrayHashIsValid" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createVector3fArrayHashIsUnique" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createEmptyVector3fArrayFails" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createVector4fArray" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createVector4fArrayHashIsValid" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createVector4fArrayHashIsUnique" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createEmptyVector4fArrayFails" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createUInt16Array" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createUInt16ArrayHashIsValid" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createUInt16ArrayHashIsUnique" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createEmptyUInt16ArrayFails" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createUInt32Array" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createUInt32ArrayHashIsValid" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createUInt32ArrayHashIsUnique" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="createEmptyUInt32ArrayFails" status="run" time="0" classname="AResourceTestClient" />
    <testcase name="createAndDestroyEffect" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="effectCreatedTwiceWithSameHashCanBeCreatedAndDestroyed" status="run" time="0.002" classname="AResourceTestClient" />
    <testcase name="effectCreatedTwiceWithDifferentNameProducesSameHash" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="statisticCounterIsUpdatedWhenLoadingFromFile" status="run" time="0.001" classname="AResourceTestClient" />
    <testcase name="destroyedResourceKeptInCache" status="run" time="0.01" classname="AResourceTestClient" />
  </testsuite>
  <testsuite name="ResourceTest/0" tests="3" failures="0" disabled="0" errors="0" time="0.017">
    <testcase name="canBeConvertedToResource" type_param="ramses::FloatArray" status="run" time="0.005" classname="ResourceTest/0" />
    <testcase name="sameResourcesWithDifferentNamesShareSameHash" type_param="ramses::FloatArray" status="run" time="0.006" classname="ResourceTest/0" />
    <testcase name="statisticCounterIsUpdated" type_param="ramses::FloatArray" status="run" time="0.006" classname="ResourceTest/0" />
  </testsuite>
  <testsuite name="ResourceTest/1" tests="3" failures="0" disabled="0" errors="0" time="0.016">
    <testcase name="canBeConvertedToResource" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="ResourceTest/1" />
    <testcase name="sameResourcesWithDifferentNamesShareSameHash" type_param="ramses::Vector2fArray" status="run" time="0.006" classname="ResourceTest/1" />
    <testcase name="statisticCounterIsUpdated" type_param="ramses::Vector2fArray" status="run" time="0.005" classname="ResourceTest/1" />
  </testsuite>
  <testsuite name="ResourceTest/2" tests="3" failures="0" disabled="0" errors="0" time="0.017">
    <testcase name="canBeConvertedToResource" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="ResourceTest/2" />
    <testcase name="sameResourcesWithDifferentNamesShareSameHash" type_param="ramses::Vector3fArray" status="run" time="0.005" classname="ResourceTest/2" />
    <testcase name="statisticCounterIsUpdated" type_param="ramses::Vector3fArray" status="run" time="0.006" classname="ResourceTest/2" />
  </testsuite>
  <testsuite name="ResourceTest/3" tests="3" failures="0" disabled="0" errors="0" time="0.016">
    <testcase name="canBeConvertedToResource" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="ResourceTest/3" />
    <testcase name="sameResourcesWithDifferentNamesShareSameHash" type_param="ramses::Vector4fArray" status="run" time="0.006" classname="ResourceTest/3" />
    <testcase name="statisticCounterIsUpdated" type_param="ramses::Vector4fArray" status="run" time="0.005" classname="ResourceTest/3" />
  </testsuite>
  <testsuite name="ResourceTest/4" tests="3" failures="0" disabled="0" errors="0" time="0.017">
    <testcase name="canBeConvertedToResource" type_param="ramses::Texture2D" status="run" time="0.006" classname="ResourceTest/4" />
    <testcase name="sameResourcesWithDifferentNamesShareSameHash" type_param="ramses::Texture2D" status="run" time="0.005" classname="ResourceTest/4" />
    <testcase name="statisticCounterIsUpdated" type_param="ramses::Texture2D" status="run" time="0.006" classname="ResourceTest/4" />
  </testsuite>
  <testsuite name="ResourceTest/5" tests="3" failures="0" disabled="0" errors="0" time="0.017">
    <testcase name="canBeConvertedToResource" type_param="ramses::Texture3D" status="run" time="0.006" classname="ResourceTest/5" />
    <testcase name="sameResourcesWithDifferentNamesShareSameHash" type_param="ramses::Texture3D" status="run" time="0.005" classname="ResourceTest/5" />
    <testcase name="statisticCounterIsUpdated" type_param="ramses::Texture3D" status="run" time="0.006" classname="ResourceTest/5" />
  </testsuite>
  <testsuite name="ResourceTest/6" tests="3" failures="0" disabled="0" errors="0" time="0.016">
    <testcase name="canBeConvertedToResource" type_param="ramses::TextureCube" status="run" time="0.005" classname="ResourceTest/6" />
    <testcase name="sameResourcesWithDifferentNamesShareSameHash" type_param="ramses::TextureCube" status="run" time="0.006" classname="ResourceTest/6" />
    <testcase name="statisticCounterIsUpdated" type_param="ramses::TextureCube" status="run" time="0.005" classname="ResourceTest/6" />
  </testsuite>
  <testsuite name="ResourceTest/7" tests="3" failures="0" disabled="0" errors="0" time="0.017">
    <testcase name="canBeConvertedToResource" type_param="ramses::UInt16Array" status="run" time="0.006" classname="ResourceTest/7" />
    <testcase name="sameResourcesWithDifferentNamesShareSameHash" type_param="ramses::UInt16Array" status="run" time="0.005" classname="ResourceTest/7" />
    <testcase name="statisticCounterIsUpdated" type_param="ramses::UInt16Array" status="run" time="0.005" classname="ResourceTest/7" />
  </testsuite>
  <testsuite name="ResourceTest/8" tests="3" failures="0" disabled="0" errors="0" time="0.017">
    <testcase name="canBeConvertedToResource" type_param="ramses::UInt32Array" status="run" time="0.006" classname="ResourceTest/8" />
    <testcase name="sameResourcesWithDifferentNamesShareSameHash" type_param="ramses::UInt32Array" status="run" time="0.005" classname="ResourceTest/8" />
    <testcase name="statisticCounterIsUpdated" type_param="ramses::UInt32Array" status="run" time="0.006" classname="ResourceTest/8" />
  </testsuite>
  <testsuite name="ResourceTest/9" tests="3" failures="0" disabled="0" errors="0" time="0.019">
    <testcase name="canBeConvertedToResource" type_param="ramses::Effect" status="run" time="0.006" classname="ResourceTest/9" />
    <testcase name="sameResourcesWithDifferentNamesShareSameHash" type_param="ramses::Effect" status="run" time="0.006" classname="ResourceTest/9" />
    <testcase name="statisticCounterIsUpdated" type_param="ramses::Effect" status="run" time="0.007" classname="ResourceTest/9" />
  </testsuite>
  <testsuite name="ADistributedScene" tests="5" failures="0" disabled="0" errors="0" time="0.028">
    <testcase name="flushProducesSingleActionList" status="run" time="0.005" classname="ADistributedScene" />
    <testcase name="publishCausesSceneToBeSentToImplicitSubscriberInLocalCase" status="run" time="0.006" classname="ADistributedScene" />
    <testcase name="unpublishingSceneResetsPendingActions" status="run" time="0.005" classname="ADistributedScene" />
    <testcase name="destroyingSceneCausesUnpublish" status="run" time="0.005" classname="ADistributedScene" />
    <testcase name="confidence_emptyFlushDoesNotCollectAnySceneActions" status="run" time="0.006" classname="ADistributedScene" />
  </testsuite>
  <testsuite name="ASceneFactory" tests="3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="createsAndDeletesScene" status="run" time="0" classname="ASceneFactory" />
    <testcase name="cannotCreateTwoScenesWithTheSameId" status="run" time="0" classname="ASceneFactory" />
    <testcase name="createsSceneWithProvidedOptions" status="run" time="0" classname="ASceneFactory" />
  </testsuite>
  <testsuite name="SceneGraphIteratorTest" tests="4" failures="0" disabled="0" errors="0" time="0.022">
    <testcase name="traversesSceneGraph_DepthFirst" status="run" time="0.005" classname="SceneGraphIteratorTest" />
    <testcase name="traversesSceneGraph_BreadthFirst" status="run" time="0.006" classname="SceneGraphIteratorTest" />
    <testcase name="traverseOnlyOneLeaf_DepthFirst" status="run" time="0.006" classname="SceneGraphIteratorTest" />
    <testcase name="traverseOnlyOneLeaf_BreathFirst" status="run" time="0.005" classname="SceneGraphIteratorTest" />
  </testsuite>
  <testsuite name="ASceneIterator" tests="3" failures="0" disabled="0" errors="0" time="0.017">
    <testcase name="returnsCorrectSceneWhenDereferenced" status="run" time="0.006" classname="ASceneIterator" />
    <testcase name="returnsCorrectSceneWhenDereferenced_WithSeveralScenes" status="run" time="0.005" classname="ASceneIterator" />
    <testcase name="doesNotReturnDestroyedScene" status="run" time="0.006" classname="ASceneIterator" />
  </testsuite>
  <testsuite name="ASceneIteratorWithoutAvailableScenes" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="returnsNullOnGetNext" status="run" time="0" classname="ASceneIteratorWithoutAvailableScenes" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/0" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::Node" status="run" time="0.005" classname="SceneObjectIteratorTest/0" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::Node" status="run" time="0.006" classname="SceneObjectIteratorTest/0" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/1" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::MeshNode" status="run" time="0.005" classname="SceneObjectIteratorTest/1" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::MeshNode" status="run" time="0.005" classname="SceneObjectIteratorTest/1" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/2" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::RemoteCamera" status="run" time="0.006" classname="SceneObjectIteratorTest/2" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::RemoteCamera" status="run" time="0.005" classname="SceneObjectIteratorTest/2" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/3" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="SceneObjectIteratorTest/3" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::PerspectiveCamera" status="run" time="0.005" classname="SceneObjectIteratorTest/3" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/4" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="SceneObjectIteratorTest/4" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::OrthographicCamera" status="run" time="0.005" classname="SceneObjectIteratorTest/4" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/5" tests="2" failures="0" disabled="0" errors="0" time="0.013">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::Appearance" status="run" time="0.007" classname="SceneObjectIteratorTest/5" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::Appearance" status="run" time="0.006" classname="SceneObjectIteratorTest/5" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/6" tests="2" failures="0" disabled="0" errors="0" time="0.012">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::GeometryBinding" status="run" time="0.007" classname="SceneObjectIteratorTest/6" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::GeometryBinding" status="run" time="0.005" classname="SceneObjectIteratorTest/6" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/7" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::RenderGroup" status="run" time="0.006" classname="SceneObjectIteratorTest/7" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::RenderGroup" status="run" time="0.005" classname="SceneObjectIteratorTest/7" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/8" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::RenderPass" status="run" time="0.006" classname="SceneObjectIteratorTest/8" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::RenderPass" status="run" time="0.005" classname="SceneObjectIteratorTest/8" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/9" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::BlitPass" status="run" time="0.006" classname="SceneObjectIteratorTest/9" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::BlitPass" status="run" time="0.005" classname="SceneObjectIteratorTest/9" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/10" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::TextureSampler" status="run" time="0.006" classname="SceneObjectIteratorTest/10" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::TextureSampler" status="run" time="0.005" classname="SceneObjectIteratorTest/10" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/11" tests="2" failures="0" disabled="0" errors="0" time="0.012">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="SceneObjectIteratorTest/11" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::RenderBuffer" status="run" time="0.006" classname="SceneObjectIteratorTest/11" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/12" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::RenderTarget" status="run" time="0.005" classname="SceneObjectIteratorTest/12" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::RenderTarget" status="run" time="0.006" classname="SceneObjectIteratorTest/12" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/13" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::DataFloat" status="run" time="0.005" classname="SceneObjectIteratorTest/13" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::DataFloat" status="run" time="0.006" classname="SceneObjectIteratorTest/13" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/14" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::DataVector2f" status="run" time="0.005" classname="SceneObjectIteratorTest/14" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::DataVector2f" status="run" time="0.006" classname="SceneObjectIteratorTest/14" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/15" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::DataVector3f" status="run" time="0.005" classname="SceneObjectIteratorTest/15" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::DataVector3f" status="run" time="0.006" classname="SceneObjectIteratorTest/15" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/16" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::DataVector4f" status="run" time="0.005" classname="SceneObjectIteratorTest/16" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::DataVector4f" status="run" time="0.006" classname="SceneObjectIteratorTest/16" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/17" tests="2" failures="0" disabled="0" errors="0" time="0.005">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::DataMatrix22f" status="run" time="0.005" classname="SceneObjectIteratorTest/17" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::DataMatrix22f" status="run" time="0" classname="SceneObjectIteratorTest/17" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/18" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::DataMatrix33f" status="run" time="0.005" classname="SceneObjectIteratorTest/18" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::DataMatrix33f" status="run" time="0.005" classname="SceneObjectIteratorTest/18" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/19" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::DataMatrix44f" status="run" time="0.006" classname="SceneObjectIteratorTest/19" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::DataMatrix44f" status="run" time="0.005" classname="SceneObjectIteratorTest/19" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/20" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::DataInt32" status="run" time="0.005" classname="SceneObjectIteratorTest/20" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::DataInt32" status="run" time="0.006" classname="SceneObjectIteratorTest/20" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/21" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::DataVector2i" status="run" time="0.005" classname="SceneObjectIteratorTest/21" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::DataVector2i" status="run" time="0.006" classname="SceneObjectIteratorTest/21" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/22" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::DataVector3i" status="run" time="0.005" classname="SceneObjectIteratorTest/22" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::DataVector3i" status="run" time="0.006" classname="SceneObjectIteratorTest/22" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/23" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::DataVector4i" status="run" time="0.006" classname="SceneObjectIteratorTest/23" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::DataVector4i" status="run" time="0.005" classname="SceneObjectIteratorTest/23" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/24" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::StreamTexture" status="run" time="0.006" classname="SceneObjectIteratorTest/24" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::StreamTexture" status="run" time="0.005" classname="SceneObjectIteratorTest/24" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/25" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::IndexDataBuffer" status="run" time="0.006" classname="SceneObjectIteratorTest/25" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::IndexDataBuffer" status="run" time="0.005" classname="SceneObjectIteratorTest/25" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/26" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::VertexDataBuffer" status="run" time="0.005" classname="SceneObjectIteratorTest/26" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::VertexDataBuffer" status="run" time="0.006" classname="SceneObjectIteratorTest/26" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/27" tests="2" failures="0" disabled="0" errors="0" time="0.01">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="SceneObjectIteratorTest/27" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::Texture2DBuffer" status="run" time="0.005" classname="SceneObjectIteratorTest/27" />
  </testsuite>
  <testsuite name="SceneObjectIteratorTest/28" tests="2" failures="0" disabled="0" errors="0" time="0.011">
    <testcase name="ObjectIteratorReturnsMultipleObjects" type_param="ramses::PickableObject" status="run" time="0.006" classname="SceneObjectIteratorTest/28" />
    <testcase name="ObjectIteratorDirectlyReturnsNullIfNoObjectsAvailable" type_param="ramses::PickableObject" status="run" time="0.005" classname="SceneObjectIteratorTest/28" />
  </testsuite>
  <testsuite name="ASceneLoadedFromFile" tests="58" failures="0" disabled="1" errors="0" time="0.374">
    <testcase name="canReadWriteAScene" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteARemoteCamera" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteAPerspectiveCamera" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteStreamTexture" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteAnOrthographicCamera" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteAnAppearance" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteAnAppearanceWithUniformValuesSetOrBound" status="run" time="0.008" classname="ASceneLoadedFromFile" />
    <testcase name="multipleAppearancesSharingSameEffectAreCorrectlyWrittenAndLoaded" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteGeometryBinding" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteAMeshNode" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteAMeshNode_withVisibilityParent" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteAMeshNode_withVisibilityParentOff" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteAMeshNode_withValues" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteANodeWithVisibility" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteARenderGroup" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteANestedRenderGroup" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteABasicRenderPass" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteARenderPassWithACamera" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteARenderPassWhichHasRenderGroups" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteBlitPass" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWritePickableObject" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteRenderBuffer" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteARenderPassWithARenderTargetAndCamera" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteRenderTarget" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteIndexDataBuffer" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteTexture2DBuffer" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteANode" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteANodeWithTranslation" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteANodeWithRotation" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteANodeWithScaling" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteATextureSampler" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteSceneId" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="defaultsToLocalAndRemotePublicationMode" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="DISABLED_respectsPublicationModeSetOnCreatingFileBeforeSave" status="notrun" time="0" classname="ASceneLoadedFromFile" />
    <testcase name="canOverwritePublicationModeForLoadedFiles" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="overwritingPublicationModeOnlyAffectsScenesWithGivenSceneIds" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="reportsErrorWhenSavingASceneIfItDoesNotBelongToTheClient" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="reportsErrorWhenSavingSceneToFileWithInvalidFileName" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="reportsErrorWhenSavingSceneToFileWithNoFileName" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="overwritesExistingFileWhenSavingSceneToIt" status="run" time="0.018" classname="ASceneLoadedFromFile" />
    <testcase name="doesNotLoadSceneFromFileWithInvalidFileName" status="run" time="0.005" classname="ASceneLoadedFromFile" />
    <testcase name="doesNotLoadSceneFromFileWithoutFileName" status="run" time="0.005" classname="ASceneLoadedFromFile" />
    <testcase name="doesNotLoadSceneFromUnexistingFile" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canHandleAllZeroFileOnSceneLoad" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canHandleAllZeroFileOnResourceLoad" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="confidenceTestCanReadWriteSceneWithSharedResources" status="run" time="0.008" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteTransformDataSlot" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteDataFloat" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteDataVector2f" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteDataVector3f" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteDataVector4f" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteDataMatrix22f" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteDataMatrix33f" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteDataMatrix44f" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteDataInt32" status="run" time="0.007" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteDataVector2i" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteDataVector3i" status="run" time="0.006" classname="ASceneLoadedFromFile" />
    <testcase name="canReadWriteDataVector4i" status="run" time="0.006" classname="ASceneLoadedFromFile" />
  </testsuite>
  <testsuite name="ASceneLoadedFromFileTemplated/0" tests="1" failures="0" disabled="0" errors="0" time="0.007">
    <testcase name="canReadWriteAllNodes" type_param="ramses::Node" status="run" time="0.007" classname="ASceneLoadedFromFileTemplated/0" />
  </testsuite>
  <testsuite name="ASceneLoadedFromFileTemplated/1" tests="1" failures="0" disabled="0" errors="0" time="0.006">
    <testcase name="canReadWriteAllNodes" type_param="ramses::MeshNode" status="run" time="0.006" classname="ASceneLoadedFromFileTemplated/1" />
  </testsuite>
  <testsuite name="ASceneLoadedFromFileTemplated/2" tests="1" failures="0" disabled="0" errors="0" time="0.007">
    <testcase name="canReadWriteAllNodes" type_param="ramses::RemoteCamera" status="run" time="0.007" classname="ASceneLoadedFromFileTemplated/2" />
  </testsuite>
  <testsuite name="ASceneLoadedFromFileTemplated/3" tests="1" failures="0" disabled="0" errors="0" time="0.006">
    <testcase name="canReadWriteAllNodes" type_param="ramses::PerspectiveCamera" status="run" time="0.006" classname="ASceneLoadedFromFileTemplated/3" />
  </testsuite>
  <testsuite name="ASceneLoadedFromFileTemplated/4" tests="1" failures="0" disabled="0" errors="0" time="0.006">
    <testcase name="canReadWriteAllNodes" type_param="ramses::OrthographicCamera" status="run" time="0.006" classname="ASceneLoadedFromFileTemplated/4" />
  </testsuite>
  <testsuite name="ASceneLoadedFromFileTemplated/5" tests="1" failures="0" disabled="0" errors="0" time="0.007">
    <testcase name="canReadWriteAllNodes" type_param="ramses::PickableObject" status="run" time="0.007" classname="ASceneLoadedFromFileTemplated/5" />
  </testsuite>
  <testsuite name="ARamsesFileLoadedInSeveralThread" tests="10" failures="0" disabled="0" errors="0" time="0.407">
    <testcase name="loadingANonExistingResourceFileAsyncTriggersLoadFailedEvent" status="run" time="0.05" classname="ARamsesFileLoadedInSeveralThread" />
    <testcase name="canAsyncLoadResourceFile" status="run" time="0.051" classname="ARamsesFileLoadedInSeveralThread" />
    <testcase name="canAsyncLoadMultipleResourceFiles" status="run" time="0.051" classname="ARamsesFileLoadedInSeveralThread" />
    <testcase name="canAsyncLoadResourcesParallelToSynchronousResourceLoad" status="run" time="0.05" classname="ARamsesFileLoadedInSeveralThread" />
    <testcase name="loadingANonExistingSceneFileAsyncTriggersLoadFailedEvent" status="run" time="0.051" classname="ARamsesFileLoadedInSeveralThread" />
    <testcase name="loadingASceneFileWithNonExistingResourceFileAsyncTriggersLoadFailedEvent" status="run" time="0.051" classname="ARamsesFileLoadedInSeveralThread" />
    <testcase name="canAsyncLoadSceneFile" status="run" time="0.05" classname="ARamsesFileLoadedInSeveralThread" />
    <testcase name="canAsyncLoadSceneParallelToSynchronousResourceLoad" status="run" time="0.051" classname="ARamsesFileLoadedInSeveralThread" />
    <testcase name="canAsyncLoadSceneParallelToSynchronousSceneLoad" status="run" time="0.001" classname="ARamsesFileLoadedInSeveralThread" />
    <testcase name="asyncLoadSceneFileWithoutEverCallingDispatchDoesNotLeakMemory" status="run" time="0.001" classname="ARamsesFileLoadedInSeveralThread" />
  </testsuite>
  <testsuite name="DistributedSceneTest" tests="5" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="givesErrorWhenRemotePublishingAfterEnablingLocalOnlyOptmisations" status="run" time="0" classname="DistributedSceneTest" />
    <testcase name="canPublishRemotelyIfSetInConfig" status="run" time="0.001" classname="DistributedSceneTest" />
    <testcase name="canPublishRemotelyIfNoSettingInConfig" status="run" time="0" classname="DistributedSceneTest" />
    <testcase name="canPublishLocallyWhenEnablingLocalOnlyOptimisations" status="run" time="0" classname="DistributedSceneTest" />
    <testcase name="reportsErrorWhenPublishSceneIfNotConnected" status="run" time="0" classname="DistributedSceneTest" />
  </testsuite>
  <testsuite name="AScene" tests="59" failures="0" disabled="0" errors="0" time="0.315">
    <testcase name="canValidate" status="run" time="0.006" classname="AScene" />
    <testcase name="failsValidationIfContainsInvalidSceneObject" status="run" time="0.005" classname="AScene" />
    <testcase name="doesNotDestroyCameraWhileItIsStillUsedByARenderPass" status="run" time="0.006" classname="AScene" />
    <testcase name="removesMeshNodeFromRenderGroupsOnDestruction" status="run" time="0.005" classname="AScene" />
    <testcase name="failsToCreateAppearanceWhenEffectIsFromAnotherClient" status="run" time="0.007" classname="AScene" />
    <testcase name="failsToCreateGeometryBindingWhenEffectIsFromAnotherClient" status="run" time="0.006" classname="AScene" />
    <testcase name="failsToCreateTextureSamplerWhenTextureIsFromAnotherClient" status="run" time="0.006" classname="AScene" />
    <testcase name="failsToCreateTextureSamplerWhenRenderTargetIsFromAnotherScene" status="run" time="0.005" classname="AScene" />
    <testcase name="failsToCreateTextureSamplerWhenStreamTextureIsFromAnotherScene" status="run" time="0.005" classname="AScene" />
    <testcase name="failsToCreateTextureSamplerWhenRenderBufferIsNotReadable" status="run" time="0.006" classname="AScene" />
    <testcase name="reportsErrorWhenCreateTransformationDataProviderWithNodeFromAnotherScene" status="run" time="0.005" classname="AScene" />
    <testcase name="reportsErrorWhenCreateTransformationDataConsumerWithNodeFromAnotherScene" status="run" time="0.005" classname="AScene" />
    <testcase name="canCreateATransformDataSlot" status="run" time="0.005" classname="AScene" />
    <testcase name="removesTransformDataSlotsOfNodeOnDestruction" status="run" time="0.006" classname="AScene" />
    <testcase name="canNotCreateMoreThanOneTransformationDataSlotForANode" status="run" time="0.005" classname="AScene" />
    <testcase name="canNotCreateMoreThanOneTransformationDataSlotWithTheSameId" status="run" time="0.005" classname="AScene" />
    <testcase name="reportsErrorWhenCreateDataProviderWithDataObjectFromAnotherScene" status="run" time="0.005" classname="AScene" />
    <testcase name="reportsErrorWhenCreateDataConsumerWithDataObjectFromAnotherScene" status="run" time="0.006" classname="AScene" />
    <testcase name="canCreateADataObjectDataSlot" status="run" time="0.005" classname="AScene" />
    <testcase name="removesDataSlotsOfDataObjectOnDestruction" status="run" time="0.005" classname="AScene" />
    <testcase name="canNotCreateMoreThanOneDataSlotForADataObject" status="run" time="0.006" classname="AScene" />
    <testcase name="canNotCreateMoreThanOneDataSlotWithTheSameId" status="run" time="0.005" classname="AScene" />
    <testcase name="reportsErrorWhenCreateTextureProviderWithTextureFromAnotherClient" status="run" time="0.005" classname="AScene" />
    <testcase name="reportsErrorWhenCreateTextureConsumerWithSamplerFromAnotherScene" status="run" time="0.006" classname="AScene" />
    <testcase name="canCreateATextureProviderDataSlot" status="run" time="0.005" classname="AScene" />
    <testcase name="canUpdateATextureProviderDataSlot" status="run" time="0.005" classname="AScene" />
    <testcase name="canCreateATextureConsumerDataSlot" status="run" time="0.006" classname="AScene" />
    <testcase name="canNotCreateATextureConsumerDataSlotIfOtherThan2DTextureAssigned" status="run" time="0.005" classname="AScene" />
    <testcase name="removesDataSlotsOfTextureSamplerOnDestruction" status="run" time="0.005" classname="AScene" />
    <testcase name="canNotCreateMoreThanOneConsumerForATextureSampler" status="run" time="0.005" classname="AScene" />
    <testcase name="canNotCreateMoreThanOneProviderForATexture" status="run" time="0.006" classname="AScene" />
    <testcase name="canNotCreateMoreThanOneTextureConsumerOrProviderWithTheSameId" status="run" time="0.005" classname="AScene" />
    <testcase name="canNotUpdateTextureProviderWhichWasNotCreatedBefore" status="run" time="0.005" classname="AScene" />
    <testcase name="canCreateStreamTextureWithFallbackTextureAndStreamSource" status="run" time="0.005" classname="AScene" />
    <testcase name="cannotCreateStreamTextureWithFallbackTextureFromDifferentClient" status="run" time="0.005" classname="AScene" />
    <testcase name="canCreateTextureSamplerForTexture2DWithDefaultAnisotropyLevel" status="run" time="0.005" classname="AScene" />
    <testcase name="canCreateTextureSamplerForRenderBufferWithDefaultAnisotropyLevel" status="run" time="0.005" classname="AScene" />
    <testcase name="canCreateTextureSamplerForTextureCubeWithDefaultAnisotropyLevel" status="run" time="0.006" classname="AScene" />
    <testcase name="cantCreateTextureSamplerForTexture2DWithWrongAnisotropyValue" status="run" time="0.005" classname="AScene" />
    <testcase name="cantCreateTextureSamplerForTextureCubeWithWrongAnisotropyValue" status="run" time="0.005" classname="AScene" />
    <testcase name="cantCreateTextureSamplerForRenderBufferWithWrongAnisotropyValue" status="run" time="0.005" classname="AScene" />
    <testcase name="cantCreateTextureSamplerWithWrongMagSamplingMethod" status="run" time="0.006" classname="AScene" />
    <testcase name="canCreateBlitPass" status="run" time="0.005" classname="AScene" />
    <testcase name="cannotCreateBlitPass_WithSourceRenderBufferFromDifferentScene" status="run" time="0.005" classname="AScene" />
    <testcase name="cannotCreateBlitPass_WithSourceAndDestinationRenderBufferFromDifferentScenes" status="run" time="0.005" classname="AScene" />
    <testcase name="cannotCreateBlitPass_WithSourceAndDestinationRenderBuffersHavingDifferentType" status="run" time="0.006" classname="AScene" />
    <testcase name="cannotCreateBlitPass_WithSourceAndDestinationRenderBuffersHavingDifferentFormat" status="run" time="0.005" classname="AScene" />
    <testcase name="cannotCreateBlitPass_WithSourceAndDestinationRenderBuffersHavinghDifferentWidth" status="run" time="0.005" classname="AScene" />
    <testcase name="cannotCreateBlitPass_WithSourceAndDestinationRenderBuffersHavingDifferentHeight" status="run" time="0.006" classname="AScene" />
    <testcase name="cannotCreateBlitPass_WithSameSourceAndDestinationRenderBuffers" status="run" time="0.005" classname="AScene" />
    <testcase name="canCreatePickableObject" status="run" time="0.005" classname="AScene" />
    <testcase name="cannotCreatePickableObjectWithGeometryBufferOfAnotherScene" status="run" time="0.005" classname="AScene" />
    <testcase name="cannotCreatePickableObjectWithWrongGeometryBufferSize" status="run" time="0.006" classname="AScene" />
    <testcase name="cannotCreatePickableObjectWithWrongGeometryBuffer" status="run" time="0.005" classname="AScene" />
    <testcase name="canCreateIndexDataBufferWithIntegralTypes" status="run" time="0.005" classname="AScene" />
    <testcase name="cannotCreateIndexDataBufferWithNonIntegralType" status="run" time="0.006" classname="AScene" />
    <testcase name="canCreateVertexDataBufferWithFloatTypes" status="run" time="0.005" classname="AScene" />
    <testcase name="cannotCreateVertexDataBufferWithNonFloatType" status="run" time="0.005" classname="AScene" />
    <testcase name="flushIncreasesStatisticCounter" status="run" time="0.005" classname="AScene" />
  </testsuite>
  <testsuite name="ASceneWithContent" tests="24" failures="0" disabled="0" errors="0" time="0.129">
    <testcase name="checksMeshVisibilityChangedByParentVisibilityNode" status="run" time="0.006" classname="ASceneWithContent" />
    <testcase name="checksMeshVisibilityAddedToInvisibleParent" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="checksMeshVisibilityAddedToOffParent" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="checksMeshVisibilityChangedByGrandParentVisibilityNode" status="run" time="0.006" classname="ASceneWithContent" />
    <testcase name="subTreeStaysInvisibleIfSettingVisibilityNodeVisibleParentedByInvisibleNode" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="nodesStayVisibleWhenRemovedVisibleParent" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="nodesBecomeVisibleWhenRemovedInvisibleParent" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="nodesBecomeVisibleWhenRemovedOffParent" status="run" time="0.006" classname="ASceneWithContent" />
    <testcase name="visibleMeshBecomesInvisibleWhenMovedUnderInvisibleNode" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="visibleMeshBecomesOffWhenMovedUnderOffNode" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="visibleMeshWithoutParentBecomesInvisibleWhenSetInvisibleNodeAsParent" status="run" time="0.006" classname="ASceneWithContent" />
    <testcase name="visibleMeshWithoutParentBecomesOffWhenSetOffNodeAsParent" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="visibleMeshWithoutParentBecomesInvisibleWhenMovedUnderInvisibleNode" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="visibleMeshWithoutParentBecomesOffWhenMovedUnderOffNode" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="meshInInvisibleBranchBecomesVisibleWhenMovedUnderVisibleNode" status="run" time="0.006" classname="ASceneWithContent" />
    <testcase name="meshInOffBranchBecomesVisibleWhenMovedUnderVisibleNode" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="nodesStayVisibleIfParentBecomesInvisibleAndIsDeletedInSameCommit" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="nodesStayVisibleIfParentBecomesOffAndIsDeletedInSameCommit" status="run" time="0.006" classname="ASceneWithContent" />
    <testcase name="nodeBecomesVisibleIfInvisibleParentIsRemovedFromIt" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="nodeBecomesVisibleIfOffParentIsRemovedFromIt" status="run" time="0.006" classname="ASceneWithContent" />
    <testcase name="nodeBecomesInvisibleIfAnyOfItsAncestorsIsInvisible" status="run" time="0.006" classname="ASceneWithContent" />
    <testcase name="nodeBecomesOffIfAnyOfItsAncestorsIsOff" status="run" time="0.005" classname="ASceneWithContent" />
    <testcase name="nodeBecomesOffIfAnyOfItsAncestorsIsOffAndInvisible" status="run" time="0.006" classname="ASceneWithContent" />
    <testcase name="offNodeStaysOffIndependentOfParentVisibility" status="run" time="0.005" classname="ASceneWithContent" />
  </testsuite>
  <testsuite name="SerializationHelperObjectTest/0" tests="3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="CanGetCount" type_param="std::vector&lt;ramses::RamsesObject*, std::allocator&lt;ramses::RamsesObject*&gt; &gt;" status="run" time="0" classname="SerializationHelperObjectTest/0" />
    <testcase name="CanSerializeContainer" type_param="std::vector&lt;ramses::RamsesObject*, std::allocator&lt;ramses::RamsesObject*&gt; &gt;" status="run" time="0" classname="SerializationHelperObjectTest/0" />
    <testcase name="CanDeserializeIdsInContainer" type_param="std::vector&lt;ramses::RamsesObject*, std::allocator&lt;ramses::RamsesObject*&gt; &gt;" status="run" time="0" classname="SerializationHelperObjectTest/0" />
  </testsuite>
  <testsuite name="SerializationHelperObjectTest/1" tests="3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="CanGetCount" type_param="ramses_internal::HashSet&lt;ramses::RamsesObject*&gt;" status="run" time="0" classname="SerializationHelperObjectTest/1" />
    <testcase name="CanSerializeContainer" type_param="ramses_internal::HashSet&lt;ramses::RamsesObject*&gt;" status="run" time="0" classname="SerializationHelperObjectTest/1" />
    <testcase name="CanDeserializeIdsInContainer" type_param="ramses_internal::HashSet&lt;ramses::RamsesObject*&gt;" status="run" time="0" classname="SerializationHelperObjectTest/1" />
  </testsuite>
  <testsuite name="SerializationHelperImplTest/0" tests="3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="CanGetCount" type_param="std::vector&lt;ramses::RamsesObjectImpl*, std::allocator&lt;ramses::RamsesObjectImpl*&gt; &gt;" status="run" time="0" classname="SerializationHelperImplTest/0" />
    <testcase name="CanSerializeContainer" type_param="std::vector&lt;ramses::RamsesObjectImpl*, std::allocator&lt;ramses::RamsesObjectImpl*&gt; &gt;" status="run" time="0" classname="SerializationHelperImplTest/0" />
    <testcase name="CanDeserializeIdsInContainer" type_param="std::vector&lt;ramses::RamsesObjectImpl*, std::allocator&lt;ramses::RamsesObjectImpl*&gt; &gt;" status="run" time="0" classname="SerializationHelperImplTest/0" />
  </testsuite>
  <testsuite name="SerializationHelperImplTest/1" tests="3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="CanGetCount" type_param="ramses_internal::HashSet&lt;ramses::RamsesObjectImpl*&gt;" status="run" time="0" classname="SerializationHelperImplTest/1" />
    <testcase name="CanSerializeContainer" type_param="ramses_internal::HashSet&lt;ramses::RamsesObjectImpl*&gt;" status="run" time="0" classname="SerializationHelperImplTest/1" />
    <testcase name="CanDeserializeIdsInContainer" type_param="ramses_internal::HashSet&lt;ramses::RamsesObjectImpl*&gt;" status="run" time="0" classname="SerializationHelperImplTest/1" />
  </testsuite>
  <testsuite name="StreamTextureTest" tests="4" failures="0" disabled="0" errors="0" time="0.022">
    <testcase name="createStreamTexture" status="run" time="0.005" classname="StreamTextureTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidFallbackTexture" status="run" time="0.006" classname="StreamTextureTest" />
    <testcase name="canToggleForceFallbackImage" status="run" time="0.005" classname="StreamTextureTest" />
    <testcase name="canGetStreamSourceId" status="run" time="0.006" classname="StreamTextureTest" />
  </testsuite>
  <testsuite name="ATextCache" tests="15" failures="0" disabled="0" errors="0" time="0.018">
    <testcase name="getsPositionedGlyphs" status="run" time="0.001" classname="ATextCache" />
    <testcase name="getsPositionedGlyphsWithMultipleFontsUsingFontOffsets" status="run" time="0.001" classname="ATextCache" />
    <testcase name="getsPositionedGlyphsWithMultipleFontsInlcudingInvalidFontUsingFontOffsets" status="run" time="0" classname="ATextCache" />
    <testcase name="getsNullTextLineForNonExistingTextLineId" status="run" time="0.001" classname="ATextCache" />
    <testcase name="failsToDeleteNonExistingTextLineId" status="run" time="0" classname="ATextCache" />
    <testcase name="createsTextLine" status="run" time="0.002" classname="ATextCache" />
    <testcase name="createsMultipleTextLines" status="run" time="0.002" classname="ATextCache" />
    <testcase name="deletesTextLine" status="run" time="0.002" classname="ATextCache" />
    <testcase name="failsToDoubleDeleteTextLine" status="run" time="0.001" classname="ATextCache" />
    <testcase name="deletesMultipleTextLines" status="run" time="0.002" classname="ATextCache" />
    <testcase name="failsToCreateTextLineFromEmptyString" status="run" time="0.001" classname="ATextCache" />
    <testcase name="failsToCreateTextLineUsingNonTextEffect" status="run" time="0.001" classname="ATextCache" />
    <testcase name="failsToCreateTextLineIfFontInstanceNeededForAGlyphIsNotAvailable" status="run" time="0.001" classname="ATextCache" />
    <testcase name="failsToCreateTextLineIfStringDoesNotFitToAtlas" status="run" time="0.002" classname="ATextCache" />
    <testcase name="failsToCreateTextLineIfEffectComesFromAnotherClient" status="run" time="0.001" classname="ATextCache" />
  </testsuite>
  <testsuite name="ATexture2DBuffer" tests="14" failures="0" disabled="0" errors="0" time="0.075">
    <testcase name="IsAllocatedOnInternalSceneAfterCreation" status="run" time="0.005" classname="ATexture2DBuffer" />
    <testcase name="CanGetTexelFormat" status="run" time="0.006" classname="ATexture2DBuffer" />
    <testcase name="PropagatesItsPropertiesToInternalScene" status="run" time="0.005" classname="ATexture2DBuffer" />
    <testcase name="CanBeCreatedSoThatTheLastMipLevelHasSize1x1" status="run" time="0.005" classname="ATexture2DBuffer" />
    <testcase name="CanNotBeCreatedIfMipLevelsWouldResultInTwoConsecutiveMipsWithSize1x1" status="run" time="0.006" classname="ATexture2DBuffer" />
    <testcase name="PropagatesDataUpdatesToInternalScene" status="run" time="0.005" classname="ATexture2DBuffer" />
    <testcase name="CanGetDataUpdates" status="run" time="0.005" classname="ATexture2DBuffer" />
    <testcase name="GetsDataUpToBufferSize" status="run" time="0.005" classname="ATexture2DBuffer" />
    <testcase name="CanNotBeUpdatedWithEmptySubregion" status="run" time="0.006" classname="ATexture2DBuffer" />
    <testcase name="CanNotBeUpdatedWithDataSizeBiggerThanMaximumSize" status="run" time="0.005" classname="ATexture2DBuffer" />
    <testcase name="CanNotBeUpdatedForUnexistingMipMapLevel" status="run" time="0.006" classname="ATexture2DBuffer" />
    <testcase name="RetrievesMipMapCount" status="run" time="0.005" classname="ATexture2DBuffer" />
    <testcase name="RetrievesMipMapSize" status="run" time="0.006" classname="ATexture2DBuffer" />
    <testcase name="FailsToRetrieveMipMapSizeForInvalidMipLevel" status="run" time="0.005" classname="ATexture2DBuffer" />
  </testsuite>
  <testsuite name="TextureSamplerTest" tests="21" failures="0" disabled="0" errors="0" time="0.111">
    <testcase name="createSamplerForTexture2D" status="run" time="0.006" classname="TextureSamplerTest" />
    <testcase name="createSamplerForTexture2DWithAnisotropy" status="run" time="0.005" classname="TextureSamplerTest" />
    <testcase name="createSamplerForTexture3D" status="run" time="0.006" classname="TextureSamplerTest" />
    <testcase name="createSamplerForTextureCube" status="run" time="0.005" classname="TextureSamplerTest" />
    <testcase name="createSamplerForTextureCubeWithAnisotropy" status="run" time="0.006" classname="TextureSamplerTest" />
    <testcase name="createSamplerForRenderBuffer" status="run" time="0.005" classname="TextureSamplerTest" />
    <testcase name="createSamplerForStreamTexture" status="run" time="0.006" classname="TextureSamplerTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidTexture2D" status="run" time="0.005" classname="TextureSamplerTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidTexture3D" status="run" time="0.006" classname="TextureSamplerTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidTextureCube" status="run" time="0.005" classname="TextureSamplerTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidRenderBuffer" status="run" time="0.006" classname="TextureSamplerTest" />
    <testcase name="reportsErrorWhenValidatedWithInvalidStreamTexture" status="run" time="0.006" classname="TextureSamplerTest" />
    <testcase name="setTextureDataToTexture2D" status="run" time="0.005" classname="TextureSamplerTest" />
    <testcase name="setTextureDataFromTexture3DToAnotherTexture3D" status="run" time="0.006" classname="TextureSamplerTest" />
    <testcase name="failsToSetTextureDataFromTexture2DToTexture3D" status="run" time="0.005" classname="TextureSamplerTest" />
    <testcase name="setTextureDataToTextureCube" status="run" time="0.006" classname="TextureSamplerTest" />
    <testcase name="setTextureDataToTexture2DBuffer" status="run" time="0.005" classname="TextureSamplerTest" />
    <testcase name="setTextureDataToRenderBuffer" status="run" time="0.006" classname="TextureSamplerTest" />
    <testcase name="setTextureDataToStreamTexture" status="run" time="0.005" classname="TextureSamplerTest" />
    <testcase name="failsToSetTextureDataToSamplerMarkedAsConsumer" status="run" time="0.006" classname="TextureSamplerTest" />
    <testcase name="failsToSetTextureDataFromOtherSceneThanSampler" status="run" time="0" classname="TextureSamplerTest" />
  </testsuite>
  <testsuite name="UtfUtils" tests="18" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="CanConvertUTF32ToUTF8differentOuputByteCounts" status="run" time="0" classname="UtfUtils" />
    <testcase name="CanConvertCharUTF32ToUTF8differentOuputByteCounts" status="run" time="0" classname="UtfUtils" />
    <testcase name="CanConvertUTF32ToUTF8emptyStr" status="run" time="0" classname="UtfUtils" />
    <testcase name="CanConvertUTF32ToUTF8ByteBounds" status="run" time="0" classname="UtfUtils" />
    <testcase name="CanConvertUTF32ToUTF8UpperBound" status="run" time="0" classname="UtfUtils" />
    <testcase name="CanConvertUTF32ToUTF8zeroInput" status="run" time="0" classname="UtfUtils" />
    <testcase name="CanConvertUTF32ToUTF8outOfUpperUnicodeRange" status="run" time="0" classname="UtfUtils" />
    <testcase name="CanConvertUTF32ToUTF8containingInvalidChars" status="run" time="0" classname="UtfUtils" />
    <testcase name="CanReadDifferentLengthUTF8Char" status="run" time="0" classname="UtfUtils" />
    <testcase name="HandlesTwoBytesUTF8Errors" status="run" time="0" classname="UtfUtils" />
    <testcase name="HandlesThreeBytesUTF8Errors" status="run" time="0" classname="UtfUtils" />
    <testcase name="HandlesFourBytesUTF8Errors" status="run" time="0" classname="UtfUtils" />
    <testcase name="HandlesInvalidUTF8Byte" status="run" time="0" classname="UtfUtils" />
    <testcase name="ReadsZeroUTF8Byte" status="run" time="0" classname="UtfUtils" />
    <testcase name="HandlesUTF16Errors" status="run" time="0" classname="UtfUtils" />
    <testcase name="ReadsZeroUTF16Word" status="run" time="0" classname="UtfUtils" />
    <testcase name="FailsExtractionFromEmptyOrInvalidRange_UTF16" status="run" time="0" classname="UtfUtils" />
    <testcase name="FailsExtractionFromEmptyOrInvalidRange_UTF8" status="run" time="0" classname="UtfUtils" />
  </testsuite>
  <testsuite name="SceneCommandBufferTest" tests="3" failures="0" disabled="0" errors="0" time="0.022">
    <testcase name="BufferIsInitiallyEmpty" status="run" time="0" classname="SceneCommandBufferTest" />
    <testcase name="CanAddAndGetCommands" status="run" time="0" classname="SceneCommandBufferTest" />
    <testcase name="AccessBufferFromMultipleThreads" status="run" time="0.022" classname="SceneCommandBufferTest" />
  </testsuite>
  <testsuite name="SceneCommandContainerTest" tests="3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="ContainerIsInitiallyEmpty" status="run" time="0" classname="SceneCommandContainerTest" />
    <testcase name="CanAddAndGetCommands" status="run" time="0" classname="SceneCommandContainerTest" />
    <testcase name="CanSwapContainer" status="run" time="0" classname="SceneCommandContainerTest" />
  </testsuite>
</testsuites>
